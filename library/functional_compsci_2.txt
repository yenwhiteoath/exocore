functionalCS2: electric boogaloo Reply Expand
Hide
Archie Mangergold - Fri, 23 Oct 2020 03:43:23 EST x6K3CZQk No.39023
File: 1603439003409.jpg -(329731B / 322.00KB, 1200x1200) Thumbnail displayed, click image for full size. functionalCS2: electric boogaloo
A non terminating loop of this ancient thread >>37033 though I don't know how often I can maintain, I have a bunch of side gigs which I hope anons too will have.
I used some random 'Wolves in the Throne Room' pic back in 2017 so I guess I'll use a 2020 Lustre pic though I do want to show Kirtaner launching missiles https://youtu.be/iM_DokBt0rk notice the code
All memes aside one of the reasons I post here is because he is the guy who splintered from SA back in the day and made this image board himself, and also taima.tv an endless fountain of ufc and mandrama memes though I suspect he just cloned cytube which is exactly what I would've done. This is the essence of functionalCS, clone the shit you want to build better and make your own community.

The meme AI workshop https://learnaifromscratch.github.io/ is going to go from zero to max starting sometime this month, we're just going to do 10-601 and 10-701 together and figure it out backtracking like I used to backtrack courses and fill in the blanks because fuck it. You guys can figure it out no problem.
The recitations will be the rest of the data science CMU course like probability etc.
The secret of the AI workshop is that I build you up to exactly where I was before I started doing the 2017 curriculum
So you now have the base to know to 10-701/601 which is writing AI algorithms from scratch.
Don't worry we'll just fill it in with random Wildberger Probability lectures and of course Tao has extensive writing on everything we're about to take, in fact Tao has the best probability intro notes I've ever seen (probably because he's Terence Tao)
Now you know the goal of the AI workshop, you become me, you just build up to mid-tier level and then discover you too can learn all these things yourself and just fill in the blanks as you go there is no such thing as prerequisites, YES! no prereqs.

Unfortunately I slacked many months of this year since starting the workshop in January, primarily because of pandemic surprise and now I'm moonlighting in a bio research lab again doing Wildberger tier deep learning with 'universal hyperbolic geometry' which is a model he built with rational math that you can use a model to project into and accomplish utterly mind blowing things you never thought constant time possible, with just a highschool background. We'll also go through those Sussman papers where he rants that AI is not really AI. tl;dr the workshop will go another 3 months into 2021 because I burned those months doing nothing but panicking moving around the world from HK back to my home country and trying to take care of my family while walking around wearing a gas mask all day and making a living.

If you don't know what you want to do, and want direction, I suggest you email RMS. Don't step to him w/politics or some meme about licensing, but ask him 'what do you think will be important 100 years from now' and then go do it yourself. RMS despite his hyper partisan politics has very, very interesting emails he will send back to you. He quite literally has a crystal ball that he looks into and sees the future of all of mankind and understands all modern technology being the bezerker hacker that he is. Greed has poisoned mens souls https://youtu.be/2jJxkwIEUp4

In the meantime I teach you how to make a bucket of money so you don't need to rely on exploitation for your survival whatever your background including mine, if everything in life is set up against you I will teach you a way where it doesn't matter, you can have the skills to pay the bills despite your background, since mine was one of absolute failure where I went to prison extradited from my country to US Seatac fed prison and embarassed my whole family spending time there living like an animal. I beat the ridiculous hacking charges but it doesn't matter I'm still guilty and deserved what I got, and I know what it's like to work an 14 hour day doing hard labour and be afraid that you'll be on the street if you're fired becuase you don't have real credentials. I still don't have real credentials either. Nobody trusts HK credentials and I had to prove myself to get into the lab I'm currently larping in as a genetic researcher only because I had old letters of recommendations from profs in the labs i worked in before, reminder apply to these positions, nobody else does.

This post was a pile of cringe, here's the deal: we are doing CMU's ML 10-601 and 10-701 phd courses in a week or so, from scratch, and it doesn't matter because you anon can do it too. Fuck it we'll just figure it out from scratch.

Also I'm secretly writing a Pfpl and dan licata workshop for ML/OCaml, once you read this you will realize how easy all of this is

    39024>> 39024>> 39032>> 39032>> 39038>> 39040>> 39042>> 39056>> 39060>> 39062>> 39063>> 39065>> 39070>> 39074>> 39083>> 39084>> 39103>> 39123>> 39131>> 39156>> 39158>> 39158>> 39163>> 39178>> 39187>> 39239>> 39296>> 39300>> 39320>> 39334>> 39342>> 39355>> 39378>> 39382>> 39426>> 

>>
	
LUSTRE - Fri, 23 Oct 2020 03:52:24 EST x6K3CZQk No.39024 Reply
1603439544057.jpg -(19248B / 18.80KB, 480x360) Thumbnail displayed, click image for full size.
>>39023 (OP)
>>39023 (OP)
Fuck, I picked the wrong image
Hah the absolute state of my posting https://youtu.be/Bdywzwu4a-k
I listened to this song through all of ryan odonnel's lectures on complexity theory
anyway fuck this thread, let's learn 10-701 anon's and have absolutely no background and not care
>>
	
Ebenezer Nicklewater - Sat, 24 Oct 2020 10:05:36 EST sYJjdoCx No.39032 Reply
>>39023 (OP)
>>39023 (OP)
Yes! My favourite thread is back! Great to see you OP.
I'm looking forward to your course on ML/OCaml. Recently I've managed to convince my tech lead and team to go from pseudo-functional-object-oriented-clusterf*ck C# to F#. It is a great experience so far.
I wonder if I could use material that you will present, and then expand it to phd career in my eastern bloc country. I'm pretty interested in category theory and its application in modern software. Do you have some perspective on this? Also, do you think it's worth learning OCaml or SML as a supplement to F#, or should I go full meme into Haskell, Idris or some Agda/Coq math wackiness?

    39102>> 

>>
	
Polly Crandlefoot - Sun, 25 Oct 2020 09:04:06 EST cCD/PZU8 No.39033 Reply
Currently reading

    plai.org
    existentialtype (Harper's old blog)
    Practical Foundations for Programming Langs (Harper's book)


I really enjoy Ocaml and Rust but I really don't have any ideas what to build on my own.

    39068>> 

>>
	
Oliver Tootbanks - Mon, 26 Oct 2020 06:20:20 EST xtUBJgQC No.39036 Reply
OP what's your opinion on ML/DL being overhyped? How come you think it's worth going in this sector when every clueless compsci freshman wants to do ML? I think the competition will be too hard except if the supply of jobs explodes as well.
>>
	
Oliver Grandridge - Mon, 26 Oct 2020 12:03:02 EST cvVdbkAd No.39038 Reply
>>39023 (OP)

hey OP (or anyone else) have you been able to find solutions for the cs0190 content? it's incredibly difficult for a noob like me and i feel like i'm not really getting that much from some of the assignments just because i'm not capable of doing them in a reasonable amount of time...

    39049>> 

>>
	
Hukomukho Hyangla - Tue, 27 Oct 2020 02:28:27 EST Ckf/izku No.39040 Reply
>>39023 (OP)
OP, I saw you removed quite a few resources after the update of the site. Like the Kleinberg Algorithms books. The CS3110 course was also removed. You left a mention of only their free book. Why?

    39049>> 

>>
	
Fuck Cummerbury - Tue, 27 Oct 2020 05:05:17 EST bxbFYfoS No.39041 Reply
This is off topic from computer science and math, but do you know of any resources for electrical engineering in topics such as analog/digital circuits, signal processing, etc. Online courses, video lectures, people to follow, blogs, etc. I'm just asking because the resources that you recommend for computer science are amazing.

    39043>> 39049>> 

>>
	
Betsy Ponnerwack - Tue, 27 Oct 2020 05:24:57 EST qya5a5Ib No.39042 Reply
>>39023 (OP)
what are you doing for a living these days?

    39049>> 

>>
	
Thomas Chimmlesteck - Tue, 27 Oct 2020 17:47:53 EST ScRC92Od No.39043 Reply
>>39041
Was going to ask this exact question about civil engineering. How do you go about learning something like that on your own?

    39049>> 

>>
	
Ebenezer Birringsock - Fri, 30 Oct 2020 01:35:28 EST x6K3CZQk No.39049 Reply
>>39043
>>39041
You can do the EEVblog route on youtube and teach yourself to hack stuff which is the point of hacker spaces https://sites.google.com/stanford.edu/soldering-internal/learning or you can learn the shit out of engineering math meaning Gilbert Strang Calculus and his CSE book which is covered by 18.085 and 18.086 courses (check stellar for latest lecture videos) then either hack around or go to university P/T and learn it for real. You should know that anything you want to do outside of being a lawyer, chemical engineeer or medicine, you can pay for a masters online even EE or civil engineering. So how do you find the cheapest online and accredited bachelors to lead you to where you can work F/T and take a P/T masters online for these things? P/T at your local college/university or look into Open University in the UK as they have regional US accreditation. At least you can teach yourself statistics and get a real accredited BSc in math. Your local university would probably be cheaper though.

I think civil engineering you could get away with if you learned a lot of optimization/statistics yourself you could end up at a city hall somewhere assisting a real civil engineer, which at that point you would go to school P/T to get a real degree or else you're stuck there unless you contract your civil engineering amateur optimization to other cities, totally possible. I don't know anything about these gov licensed and regulated engineering professions except that they will try and arrest you if you bypass their piles of regulations with your own electronic devices because I saw it first hand at a hacker space I was once a member of and some guys there were trying to market something and ended up fucked. This was back in 2006 though in my country, your country may vary but every country typically is heavily regulated for these kinds of things. P/T school is no problem really, that's why the meme CS list exists can you finish Tao's Analysis then you're good to go to learn Strang's incredibly crazy differential models that he shows you how to solve in 18.085.

>>39040
They're all behind class logins now, the gitbook is the only resource available which I still think is excellent. Screw the course assignments try this instead: https://ocaml.org/learn/tutorials/99problems.html or the competitive programming book I'll eventually work through using kattis online judge that accepts OCaml source

>>39038
Sure check github with the filename of the assignment, such as 'nile-code.arr ' you will find a ton of solutions. Many of them are completely wrong or insanely over-engineered I highly recommend everybody that finishes a pyret program in CS019 goes on github and looks up all the solutions there other student's have done, my god you will see some amazingly bad code (and sometimes brilliant code). The assignments are indeed difficult but my advice is just do them and make your tests pass, keep at it this is how you learn. When you get half way through the course you can go back and re-do all the shitty assignments you did with better code. Then when you're 3/4 through CS019 you go back and can easily, easily re-do almost everything you did in the beginning with much more advanced as in modular, generalized, abstract code that is self documented that any idiot can come along and fully understand including yourself because a lot of assignments I wrote I didn't get. For me this is the payoff, you look at your old code, and then as a lunch break exercise completely re-do the whole assignment on your phone while slurping ramen and build the confidence needed to disagree with that guy in the conference room who suggests an insane idea of redoing everything to solve a problem you know can easily be solved with min effort.

Which lab is a problem? or assignment. Remember they are purposely difficult as written but implementation is often easier because irl every problem you get seems impossible

>>39042
Because my current country is all kinds of shutdown still I do a working class job outside that I kept from years ago and just resumed when I was kicked out of China. It's oddly satisfying, hanging out with other working class ppl again. I did this just to get outside legally and avoid being quarantined 24/7 which what was happening earlier and now we may go back to strict lockdown again. Any excuse to escape even if it means manual labor I'd rather do that then be in house arrest. There are people hiring for things here I'm interested in but all require working from home and I want that essential service piece of paper for when the shit hits the fan so I can go outside.

Friday nights, sat and sun I work in a university bio lab just like before, this time doing algorithm optimization meaning I project collected data using Wildberger rational math, which then brings you into the realm of TAOCP and Kozen's Algorithm book where it's very easy to optimize, and we run enormous simulations on a server farm. I'm doing this with 'universal hyperbolic geometry' which you could say has more 'space' than euclidean space so we can store more data, analyze it easier, and prove it's correct because everything is highschool rational numbers math. Basically my experience is in optimization and filtering enormous amounts of data in fintech, so that's what I hustle. I have a few side projects just to see what happens, primarily using vercel, because I wanted to write a how-to kind of max abstract tutorial using next.js for the webdev shitty curriculum I did, so far I have been able to write dynamic sites using their content delivery network to do some things normally you would use a full server or w/e for, like a reservations system for a home business like a house hair salon (every hair salon getting closed AGAIN where I live) or an illegal 'sichu' meaning home restaurant like I remember from Hong Kong. I slapped this together using next.js and deployed it to google playstore and it absolutely went insanely bezerk in downloads, then they killed my account and I haven't taken the time to dig into the takedown notice to see why, ....anyway from past exp it's always your competitor that launches attacks so obv I had some kind of intelligent daemon (i use something similar to tinyscheme on android devices) that for whatever reasons was fine for 3 months but now is banned even though it does not access any extra pivs, anyway another post for another day.

I'm also interested in bamboozling Amazon to see what it's like there, and how to get in there, and once inside how to manipulate the internal structure so other anon's can follow, like a one year test to see what I can do internally to move around. I of course would use just the resources that we have done none of my experience in labs or HK, this is also a side hobby of mine from when I was very young, kevin mitnic'ing my way into places I shouldn't be but not for theft but for exploration, recall I used to write for infiltration magazine it's just a compulsion to be a faux journalist, so right now I'm talking to an amazon recruiter seeing if I can temporary work there in their massive software new local building still u/c, my working class job I can easily go on hiatus again and keep my lab job of course because I don't plan on working very hard at Amazon instead just doing internal manipulation and writing a guide for it maybe another 2600 article.. just this time don't send me a hoodie again I'm supposed to be anonymous. I also talk to Stallman a lot now on what I should be working on. I highly recommend people write Stallman before he drops dead and ask him what is important 10000 years from now but be savvy how you step to him, or else you just get the macro response about how you should work on X open source software. I find it's better to ask him what software he would reinvent.

Continued...

    39050>> 39051>> 39052>> 

>>
	
Ebenezer Birringsock - Fri, 30 Oct 2020 04:32:13 EST x6K3CZQk No.39050 Reply
>>39049
the app store thing I did was just hobby attempts to rewrite some popular business software and dump them on foreign market app stores, I wanted to write something that was completely self-sufficient and free so zero investment or monthly payments needed using tricks to make static free tier hosting look dynamic so somebody could take appointments/reservations for w/e tiny biz they ran but quickly ran into patent troll problems like some company fake online lawyer sending takedown notices because their logo appeared beside a competitor, and another for review because my little interpreter triggered some china app store review for crypto mining and i'm still in review pergatory just going around various reviews with nothing happening. The app worked though and was a little popular before getting crushed but was mainly just an experiment so see what you could get away with using only free hosting like next.js/vercel, google or github pages, if I get more time I'll rescue it from pergatory and reinvent it somewhere else there's dozens of global app stores not just google/apple.
>>
	
Hedda Buzzdale - Fri, 30 Oct 2020 14:35:29 EST cvVdbkAd No.39051 Reply
>>39049

Hi OP, thank you for your reply regarding CS0190 solutions. When I search on Github, no code comes up (I tried both 'nile-code.arr' and 'tour-guide-code.arr'). I'm not sure if I'm not searching properly or if everything was taken down, but Github is empty from the looks of it. I've been stuck on "Tour Guide" for a while now, and I gave up on the last portion of "Tweesearch". It seems like later assignments get even harder than these, so I'm pretty demoralized. Would it be possible for you to link solutions that you've found?

That's phenomenal advice regarding effort, but it's really difficult to keep my dumbass motivated through hours of mashing my keyboard with different futile attempts. No wonder I'm not an Ivy student haha. But for sure, even the little I've been able to do properly has given me confidence in myself.

Thanks again, you're a blessing <3

    39055>> 

>>
	
Basil Blizzleworth - Fri, 30 Oct 2020 17:41:02 EST MmoLooUZ No.39052 Reply
>>39049

    >You should know that anything you want to do outside of being a lawyer, chemical engineeer or medicine, you can pay for a masters online even EE or civil engineering


Is this with or without a BSc degree?
I'm assuming these schools are just happy to take anyone's money? But are there any kind of relevant schools that offer a completely remote MSc? If I could pay like to do a remote MSc at MIT or Oxford or something like that I would definitely consider it in a few years.
>>
	
Nicholas Bonnerdale - Sat, 31 Oct 2020 03:38:28 EST x6K3CZQk No.39055 Reply
>>39051
Nile is purposely difficult and if you look at the archives of that course, it used to be one of the later assignments you did and he moved it to the beginning of the course with a warning in the writeup that it will be hard at first but after you do it you'll see it's not that hard, the trick is cleaning the data to something you can easily manipulate. I just checked and indeed, all the repositories I once found with 190 assignments are now gone (now you know why I don't post any answers on the meme workshop, it will get your content nuked, plus you don't need them) though I archived some of them here's one Brown student's implementation of nile, The ### Tests part is his seperate file called nile-tests.arr https://paste.ofcode.org/37Wb86ttKqdySzgbuqkuZYC

Note that it is kinda overengineered, uses a lot of HOF that weren't even introduced yet at that stage, my final version just did cases on the data definition, I only used filter() to return that pair function where my accumulator had duplicates and filtered them out upon return. There's another assignment where you use Nile again, I'll go back there this weekend and rewrite Nile again using the most basic code I can and publish it using a throwaway google account hoping nobody notices so you can see but the key I think for this assignment is just cleaning the data, everything after is easy manipulation with lists we've already done. Also the trial and error of slogging through something like Nile, reading and re-reading the Pyret documentation for built-ins, and then rewriting the built-ins, is how you learn, and now I get why he pushed that to the beginning of the course, it's a big enough little program that you kind of get a grand tour of basic pyret.

The latest version of that assignment you need to check for equality now of pairs and recommendations, the course keeps getting harder as it goes on each year, also a lot of the code is encased inside include gdrive support files we don't have access to that can disappear at anytime which is why I'm going off the older assignments, they're the same just you get the data definitions and pre-written functions yourself instead of some include statement that can be shutoff or req access later.

    39059>> 

>>
	
Samuel Benningcocke - Sat, 31 Oct 2020 08:55:42 EST NSoTwleq No.39056 Reply
>>39023 (OP)
Do you recommend dropping out? I am an EE student and I don't pay anything since in my third world shithole my degree is free.

    39057>> 39073>> 39075>> 

>>
	
John Goodstone - Sat, 31 Oct 2020 10:56:32 EST aFKLU9e0 No.39057 Reply
>>39056
Not OP but, which third world shithole are you from?

    39058>> 

>>
	
Graham Dollerdug - Sat, 31 Oct 2020 11:31:16 EST WA/KxFuX No.39058 Reply
>>39057
Mexico.
>>
	
Albert Pimmlebug - Sat, 31 Oct 2020 15:43:57 EST cvVdbkAd No.39059 Reply
>>39055

Thanks for the link, but Nile was actually surprisingly easy (for me). I did learn a few things from the code you sent, though, so that went to good use.

It's Tour Guide that's really hard. I'm trying to keep with the pace of the current 2020 class and it's actually so brutal. I can't imagine being some 17-19 year old living in a dorm for the first time in my life AND taking 3-4 other classes on top of this one. How the fuck do these people even survive!?

It's a shame that there aren't any solutions anymore. Maybe we can come together as a community and make some Mega folder with our own code? Idk, I just feel like I'm not getting much out of this class at this point because of simply how hard it is (or maybe I'm an uber-brainlet, prolly both). Like, okay, I moronically stare at my code for 8 hours, don't get something that works, and the cycle repeats endlessly with the occasional success. I wish I could somehow speed this up :( it's not like I have all the time in the world to just stare at this shit, I've got other life obligations too!

I would love you long time if you could provide the Tour Guide code and some of the later assignments (like 24 and Fluid Images), but I wouldn't know how to express my gratitude properly. <3

In any case, best wishes, and thanks for organizing this.

    39073>> 

>>
	
Edwin Briblingshaw - Sat, 31 Oct 2020 19:14:16 EST 5PyL6T44 No.39060 Reply
>>39023 (OP)
i got my first job as programmer: java ee and legacy financial project. I hope they will not fire me too soon its kinda hellhole with clocking hours and standups, sprints and whatever. Coding itself i enjoy, especially finding and fixing errors. Anyway for sure you was kind of inspiration for me, even if i never find a time to do propoer meme workshop with all this math stuff

    39073>> 

>>
	
Edwin Briblingshaw - Sat, 31 Oct 2020 19:36:45 EST 5PyL6T44 No.39061 Reply
whats your working class job?
>>
	
Discombobulating Shitdick - Mon, 02 Nov 2020 12:39:24 EST bo4dCTZE No.39062 Reply
>>39023 (OP)

OP could you please change the bkgnd colour to something non as disgusting as #ededed in your learnaifromscratch site? I can't read with that kind of background. Also maybe change the font to some non-serif one? Thanks, you're awesome!

    39073>> 

>>
	
William Bellyshaw - Wed, 04 Nov 2020 05:14:06 EST bxbFYfoS No.39063 Reply
>>39023 (OP)
What do you think about quantum computing?

    39074>> 

>>
	
Cyril Mombletadge - Wed, 04 Nov 2020 13:21:21 EST zjbn0uZi No.39064 Reply
is the Competetive Programming 4 book worth buying? there is no ebook version for it and shipping is probably ridiculously expensive

    39073>> 

>>
	
Nathaniel Turveyhood - Mon, 09 Nov 2020 00:24:16 EST hhaGQZFl No.39065 Reply
>>39023 (OP)

OP. Can you please recommend how to learn computer organization / architecture? Basically a first course on systems. I see that CMU has 15213, but UCB has CS61C. Both use different books (csapp vs hennessey patterson) and x86 vs risc-v. But I also notice that CMU has 18447 which uses the same/simlar syllabus and books of UCB but has prerequisite 15213. So... i'm sorta confused why CMU has a weird structure like this.

    39072>> 

>>
	
Beatrice Drillercocke - Mon, 09 Nov 2020 10:10:46 EST G2UESsjv No.39068 Reply
>>39033
Thanks so much for helping me out of a serious rut. I went from being a druggie who couldn't do any algebra (I remember getting some girl to tutor me, and she started cracking up cause i never understood fractions) to a motivated individual who can do a little math and a some programming. I find myself shifting through reasearch papers trying to implement something now. It's a real life monomythical resurrection, thought that shit was impossible. Anyway, after being attached to a couch for years, i have zero social skills and struggle building relationships. Also I got no social-value, so why the fuck interact with me? I'm not lonely or friendless or whatever, but I really wanna be more likeable to get ahead, what the fuck can I do? Specifically I want to start working with the people at the parallel programming lab at the university i'm now attending.
Anyway if anybody out there is doing drugs and can't stop, go to therapy, get your shit together, you can catch up in a few years no prob.

    39069>> 39072>> 

>>
	
Hukomukho Hyangla - Mon, 09 Nov 2020 22:02:26 EST wBYj+M1L No.39069 Reply
>>39068
I am not OP. If I may suggest. You can start calisthenics/bodyweight exercises from your home. You can check up r/bodyweightfitness on circlejerk. It will benefit you mentally as well as physically. Go read the FAQ on that subcirclejerk. It will increase your productivity at work too.
>>
	
George Brimmlelock - Tue, 10 Nov 2020 09:08:01 EST xRbgRRux No.39070 Reply
>>39023 (OP)
Very glad you are back.
Small typo at https://learnaifromscratch.github.io/software.html
Not "We're starting with the lecture titled Wed 9-5-19", it's "9 5 18".

Also trying to take a look at a git diff between commits. What a mess, because all links ids autogenerated or something, there is always a very big diff. Happy to see you are remaking whole ml part of meme workshop.

    39071>> 

>>
	
Jack Blackbanks - Wed, 11 Nov 2020 20:36:57 EST x6K3CZQk No.39071 Reply
>>39070
org-mode trashes diffs when you export new html, plus I haven't changed the div containers to something more searchable/permanent, this is because the meme curriculum is largely an experimental draft to find the best combination of courses and see what works and what doesn't, before I do something more permanent and even more crazy meaning I'd like to go through Wildberger's Algebraic Calculus and other courses, write libraries and solve everything in Agda or something similar, and a lot of that CS Theoretical toolkit course again doing everything in Agda. Sometime that'll happen

For example did anybody watch that Wildberger lecture in his algebraic calculus playlist where he shows how to efficient multiplication of matrices? Recall the 15-388 warnings (and more we'll see in Strang's class) about the disaster that is n x n matrix multiplication with regards to complexity. Wildberger manipulates and substitutes entire matrices into polynomials, then uses polynomial typical manipulation to multiply matrices in constant time.

    >typo software.html

Thanks, there's tons of typos there I spot all the time and forget to fix. The software workshop draft I'm completely redoing as the 2020 PAPL version totally changed the first 10 chapters, it's now even easier than before, so this will be the 10th or 11th time I've read PAPL and even still I learn new things everytime I re-do it. I'm also going to include the recitations I've been finding around and added to youtube, re-do all the assignments again too

    39077>> 

>>
	
Jack Blackbanks - Wed, 11 Nov 2020 21:25:10 EST x6K3CZQk No.39072 Reply
>>39068
Steve-O surprisingly has the best sober advice I've seen 'helping other people is how you stay sober' so maybe you become a community TA and help people learn your own meme curriculum after you finish university, or while there. If you want ideas of what to build, make something you would like and there will be other people that will want to use it. All software I believe was created by somebody who wanted something themselves not what they thought other people would like. I've thought about rewriting youtube-dl countless times but haven't done it yet but probably will eventually, even though that means signing up to the arms race that is defeating google API changes that continually break your program. I just hate their documentation, hate dealing with Python installs instead of native binaries that are one click download and run. I've also noticed that everybody who presents a Tails live CD alternative just straight up disappears. All the features of SubgraphOS were a good idea, but the maintainers are nowhere to be found because they've been hired away to lucrative industry and gov contracts prob with agreements they abandon their prototype. Everybody I used to talk to on the various android hackers forums back in the day who wrote customized SELinux type kernels (back then called SEAndroid) all disappeared too as they were hired away from their hobby projects.

>>39065
Take both, learn both x86 and RISC-V like MIT's 6.004 arch course. I've taken 6.033 MIT's systems course which is really good too and you can find lectures for if you dig around stellar or youtube.
Forget about prereqs, every course is req to have one for some reason but you don't need them usually unless explicitly stated in the syllabus that 'you must know X' for example Strang's linear algebra second course I'm doing he admits in the first lecture he only put in 18.06 as a prereq because MIT staff required it. If you were taking that class at the fast pace of a reg student then sure you'd need it but otherwise you can look up anything you need to know.

15-213 teaches the compiler how linking works and virtual memory, is really good at teaching assembly as well but exclusively focuses on x86-64 Linux. Not included in the lectures if IIRC, in CSAPP chapter 4 they write their own architecture and you dick around with it, I found that chapter actually the most illuminating of the entire book yet it's not included in the reg class which is what led me to go look at 6.004 at MIT and learn about RISC-V. tl;dr my advice would be to take what you think is best, that covers some assembly, then take MIT's Performance Engineering class where you really learn about computer architecture like all the CPU options you can enable. Click on export materials zip https://learning-modules.mit.edu/materials/index.html?uuid=/course/6/fa19/6.172#materials and match up these lectures with the free one's on OCW https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/lecture-videos/

The only OS class I've ever liked is MIT's 'Lions' Commentary on Unix' style class where you read the book and the code at the same time https://pdos.csail.mit.edu/6.828/2020/schedule.html all the lectures are open on youtube I took some of CMU's OS class before the lectures were deleted off panopto and it was good (freeBSD 32bit) but nothing is better than the classics, and Lions Commentary is how everybody learned in the day so MIT simply rewrote it with a 'modern' v6 clone. For example I had already taken 2 OS courses before I tried xv6 and I ended up learning more from there than I did both those 2 highly regarded OS courses. I agree with Don Knuth that literate programming is the best way to learn, you walk through a program and read the code and understand what it does instead of having somebody explain it to you, so the OS code you read is actually the book.
>>
	
Jack Blackbanks - Wed, 11 Nov 2020 21:57:17 EST x6K3CZQk No.39073 Reply
>>39064
No just wait for it to show up on library genesis, I'm glad I bought it, it's pretty good but there's no difference from ver 3 except the new exercises they have developed on kattis and i'll just post the one's they suggest in the book. Also notice CMU's algorithm course is exactly the same as competitive programming problems: here's the input, here's the expected output, make your algorithm within these parameters.

>>39059
Sure here's some brown student's answers for all the 019 assignments http://www.mediafire.com/file/o62den0i8jsclmi/CSCI0190.zip/file they survive because they have superior time skills than all of us which is why they got into that school in the first place. Also some of those assignments are group assignments,and they have full office hours everyday and TA assistance where they walk you through that 'design recipe' we really didn't cover as it's not fully in PAPL yet, but exists in HtDP and actually works quite well when writing a very difficult program like tour guide. Recall that lecture in cs19 where prof k says 'if you are strugging with the assignments, try it our way instead'.

>>39062
I actually got that configuration from a CMU course on UI design I did for accessibility and maximum conservation of phone battery and user preference so their pref fonts can easily override the shitty org-mode ones, as the meme curriculum is largely designed so you can look at it with firefox, export to pdf, and do it offline. I too dislike it but it's just a draft I can manipulate on my phone until I re-do it all from scratch. Whenever I add something I try and think about the kid in HK who worked at that shitty 24hr convenience store who I would run into all the time at 3am doing nothing with his life watching sports highlites on his phone and shitposting before I got him to try taking cs19 on his phone so he could escape graveyard shift in asia and it worked, all he had was a counterfeit samsung and he could do the entire course.

>>39060
Why I shill for future devs to try what I did and go to a university lab somewhere where you're given total autonomy and responsibility. No stand up meetings or sprints or any of that silly corporate methology. You should try and weasel your way into a security role, start breaking the software you build, take some of MIT's security courses on the meme list, claim you should be the security lead, claim you should be the Chief security officer.
>>39056
You prob can't, because MX is a credential oriented society meaning you are fucked without it. Surely there is some research going on there you can get involved in that professors are active in, that to me is what made school fun not the courses but the research opportunities. If not start your own group there on campus to study type theory or something else you're interested in. That's what I do but of course if you want to drop out then sure but a year later you may regret like I did.
>>
	
Jack Blackbanks - Wed, 11 Nov 2020 22:09:26 EST x6K3CZQk No.39074 Reply
>>39063
The Quantum information model is easier IMHO, writing quantum algorithms is also totally possible and you can actually run them in existing 'quantum cloud simulators' that will be eager to find and hire you should you be able to do this. Ryan Odonnell's 2 courses on that Youtube playlist I shill has extensive Quantum complexity models and algorithm design info if you're interested. That's all I know about it: here is the information theory (like learning the x86 architecture), here is how you design and optimize a quantum algorithm for a simulator since none of this hardware exists yet.

This seems to me like the #1 opportunity like all those old 1930s papers we read about Alonzo Church and others inventing languages for a non existant computer, we are at that stage where crazy research into quantum algorithms can happen and at least run on a simulator which they never had back then.

>>39023 (OP)
Meme AI workshop actually begins this week, I selected Julia because you can just import any R or Python library you want, which means all those Cozma Shalizi courses/books are now possible without having to learn R, and Julia reminds me of common lisp where I learned all these topics in the beginning: building an abstract model and tinkering with it to understand. The MIT course we will do fully explains the Julia evaluation model and techniques which is something I didn't want to have to do w/Python because I hate python for many reasons too long to get into. If we can learn advanced optimization of BLAS libraries in Julia then why even bother w/Python, the CMU and Cornell ML courses don't care what language you use to build your algorithms. I also ended up running into Julia in my shitty new biolab job where everybody is now using it to run a forecast model and it was dead easy to start using, similar to CL.

It's totally different than the math workshop, we just program math (and run into all the problems wildberger warned in his lectures about how applied real number compsci math works).
>>
	
David Smalldale - Thu, 12 Nov 2020 01:42:28 EST YCzqxHzX No.39075 Reply
>>39056
OP you said something about starting a type theory group. What resources can I delve in so I can get a clearer view of this field, and if possible produce some application or research? Can you suggest a possible undergrad soykaf thesis with that topic? I'm almost done with the Vol. 1 of software foundations by Pierce, and I really wanna start a group like this in my shitty third world country. Btw I'm not that guy from MX.

    39079>> 

>>
	
George Hillerdale - Thu, 12 Nov 2020 09:46:28 EST ta4imTyU No.39076 Reply
im so fucking retarded i wake up at 4:00 am and study all day yet i cant even fucking pass on my third world shithole retardation its real

    39096>> 

>>
	
Hukomukho Hyangla - Sat, 14 Nov 2020 10:04:23 EST wBYj+M1L No.39077 Reply
>>39071
OP, I have had enough of laziness. I want to learn enough programming, CS and math so that I can contribute something to this world.
I have a list of so many resources/courses to complete. But I suffer from paralysis by analysis. If I plan to start a course I procrastinate and find another similar course and my time is gone just by analysing the pros and cons of the two. And I end up doing nothing. Any tips on that?

BTW, has PAPL 2020 version really changed that much from 2019 as you say? The chapter names are almost same.

Regarding OS, I have heard that the CMU OS class is great because it makes you build an OS from scratch. MIT has a different approach. But the CMU one is paywalled and the assignments probably need customised software to actually run the code. Maybe.

Thanks for your insight though.

    39078>> 

>>
	
Doris Gangerpidge - Sat, 14 Nov 2020 13:32:41 EST zjbn0uZi No.39078 Reply
>>39077
just do it
>>
	
Walter Turveyford - Sun, 15 Nov 2020 00:44:04 EST x6K3CZQk No.39079 Reply
1605419044752.jpg -(11670B / 11.40KB, 480x360) Thumbnail displayed, click image for full size.
>>39075
Try Dan Licata's Agda workshop: http://www.cs.cmu.edu/~drl/teaching/oplss13/index.html I have the password for the notes here they are: http://www.mediafire.com/file/ghm5oftww6r86gv/notes.pdf/file
If you want your mind totally blown, try those notes as you go through Okasaki's Purely Functional Data structure's book and prove red black trees, you will see something you've never seen before like how you can prove efficiency with types. In those Agda notes you learn about HoTT, and exactly what functors do, and how fancy types in Agda can eliminate functors you just create a typical Pyret style datatype for functors and bam, you can now reach into any program library and map over it's functions in an exact manner. That's all functors are, a data structure 'container' so you can map from one type to another (i say type, but these are complicated modules/libraries but in the end, just types). It also allows for ridiculously abstract generic programming you never thought possible, even with common lisp, which is one reason I shill SML/type theory so much. You also learn about HoTT how you get functors for free, but it's insufficiently computational, it's missing critical things you want which is what cubical type theory fills in for you. You get the 'functors for free' part of HoTT and everything else without compromise. Try it out
Also:

    Dan Licata's 15-150 https://dlicata.wescreates.wesleyan.edu/teaching/fp-s20/lect.html
    take Robert Harper's PFPL book and frank pfennings proof theory/constructive logic notes from CMU at the same time


All those CMU/Brown courses on logic and SMT/SAT solving and imperative logic, throw it out the window and welcome to dependent types where you get to choose just how much you want to verifiy and the compiler verifies this for you as you write the code, no extrinsic or 3rd party code writing to prove a program. For me this is awesome, prove and write a program at the same time, like in an AI autonomous bot, so it can grow and prove itself.

    39080>> 

>>
	
David Dartridge - Sun, 15 Nov 2020 08:33:01 EST aFKLU9e0 No.39080 Reply
>>39079
That looks cool! I've heard about Agda, but I'm mostly using Coq. How different are they?

Also, after finishing those stuff that you listed plus the Software Foundations books by Pierce, will I be able do research in the field or contact those professors so that I can collaborate with them?

    39083>> 

>>
	
Albert Weshdeg - Wed, 18 Nov 2020 00:05:05 EST x6K3CZQk No.39083 Reply
>>39080
Forget the pierce book try this https://cs.uwaterloo.ca/~plragde/842/handouts/notes.html it's a workshop for doing the Agda book
Coq uses tactics which Robert Harper refers to as a video game where you just try and get to level 2 by any tactic necessary
Agda is much easier IMHO, once you figure out dependent types you're just in any other programming language

Reminder you can always write professors and ask for help, like CMU's HOT compilation course is all about higher types in compilation, and totally and utterly locked up but maybe if you stepped to them with your expertise they would grant you use of their material. Unfortunately begging for grad school is out of the question these days due to too many unsolicited beggars, but should we ever get out of pandemic lockdowns you could ask for admittance to the Oregon PL summer school proving your worth and there you meet them and make your case.

I solved a problem today in the shitty gov lab I work at using a trick I learned in a Wildberger lecture, it just magically worked so we went with it, I've been following the OCaml/OWL data science book (except I make my own SML libraries, I prefer it to OCaml) and it's a really, really good book where it teaches you how to make everything yourself. If anybody wants to do the AI memeshop on hard mode try the OCaml book w/cmu's 701: https://ocaml.xyz/book/introduction.html and just cast your problems into the Wildberger rational geometry and calculus domains.

>>39023 (OP)
The draft/alpha/terribad workshop is now in racket scribble, so will look like PAPL, mainly because I saw Prof K's lectures on scribble which I skipped before because now I need something like it. I also think anons can easily prove inequalities and other things from 15-251 so will slipstream that into cs19, and competitive programming. I will remove 15-122, I like it but it's better to take 15-251 and anybody doing cs19 can finish 15-251.

Since this (shitty) workshop is about AI, all the focus is now on completing 701/601 and any anons can figure out all the rest like the Putnam seminar though I'm definitely still going to do it, and the rest of cs19, esp the language last half of papl because Prof K is uploading youtube videos about it, possibly for his reboot of plai.org in the spring 2021. The meme AI workshop begins with Project Genesis, the insane MIT propogator programmed lisp system that interpreted human read stories.

Anyway Julia is dead simple to use, it's Python without any OOP junk (no classes) and (sort of) common lisp macros. You just import some Python ML library and can use it effortlessly. Great language for building a model of something just like I used to do w/CL back in the day. 15-251 can teach us probability which is all we need, none of the math in that workshop will be by hand it will be all done like the Theory toolkit course just programming math even calculus we do. Even all the Big-O proofs in the 15-251 notes you can just solve with a language like sage or wolfram or mathematica or even Julia.
>>
	
Albert Weshdeg - Wed, 18 Nov 2020 01:14:17 EST x6K3CZQk No.39084 Reply
>>39023 (OP)
I will also sneak in some Ryan O'donnel's quantum algorithm course
Also lot's of programming languages getting made these days, like for Reversible Computingvhttps://reversible-computation-2020.github.io/accepted/
This is the kind of thing where Harper's PFPL book really is useful, imagining some nonexistant architecture and building a language for it like how they did decades ago before the processors were built. Reversible Computing means you can go from end state back to the beginning basically memoization but fully traceable to do any partial computation of a full computation imagine the insane performance in this fictional architecture.
>>
	
Charles Coblingcocke - Wed, 18 Nov 2020 17:23:09 EST vYbkpU+j No.39085 Reply
How do I into a distance learning Masters or PhD program without a BSc?

    39090>> 

>>
	
Thomas Dommlekad - Wed, 18 Nov 2020 19:57:02 EST zjbn0uZi No.39086 Reply
In what language are you aiming to do Competitive Programming book in?

    39089>> 

>>
	
Fuck Smallwill - Thu, 19 Nov 2020 23:51:56 EST x6K3CZQk No.39089 Reply
>>39086
In the CP4 (and cp3) book you do it C++/Java Ocaml and whatever else is accepted that fits the problem, it's competitive programming and algorithm practice so no classes, no objects, just a dirty function and hacking the standard library to do what you want, in the process you learn a lot about C++ and more importantly writing the fastest possible solution all the usual interview bs plus machine learning hackery when you need optimize some library over a huge amount of servers. I did a few hours of it all this week, the writer's of the CP book are hilariously eastern education philosophy meaning 'why haven't you mastered this entire book yet what's wrong with you?' on every page, for example if you look at their lectures for the course they teach in Singapore you're expected to read all of the free first version before even showing up to the beginning of class.

The orig 2 workshop thinghy's are basically done, all other material is optional I'm just going to start the AI, Putnam and Competitive Programming workshop this weekend and see what happens because you can only watch lectures and do assignments for so long, everybody will get bored/give up and this is the problem with all the 'teach yourself cs' courses if you have no reason to do it, you won't do it, I often didn't do it either. If you are actively solving problems in math and algorithms you will have a little motivation at least to go back to PAPL, Tao, other books and look up what you need to know to complete said task. Poh Shen-Loh has a bunch of interviews about this how he was disinterested in math until competition

the 'algorithms' workshop is also Ryan Odonnell's Quantum algorithm course, because IBM is hiring in 2021 something like 20+ entry level quantum software dev positions and many, MANY other quantum startups, it's the kind of thing where I think anons can scheme their way into because nobody else is doing it and it's interesting work, esp quantum machine learning is kind of insane when you learn it. All these so-called quantum cloud platforms are opening up lately, I don't think anybody is running a quantum algorithm marketplace either like they do machine learning marketplaces, something for an anon to try. Anyway, I think it's the easiest way for somebody without a formal education to get into primarily because nobody is doing it, and a PhD will test you in person not some HR crony, which is what you want to prove you know the material, you aren't doing 'team building' or other corporate fuckery it's research lab work where you go from algorithm analysis to programming a logic controller in a freakish building straight out of NASA, not to mention Ryan O'donnell is now the most open professor, you can email him and he will grant you access to any of his courses no questions asked, give advice, surprisingly open, provided you know the material and aren't begging him for favors. Most prof in my exp will just not even answer you to access their material.

I also have a slight problem I've been dealing with, do you guy's remember live music before the global lockdowns? https://youtu.be/GTtzB17SKwQ well turns out you can't organize a show and I did with some friends, pulled it off and now have multiple court dates so if I disappear for awhile it's because I'm in covid jail, though my lawyer claims I probably won't see a court date before 2022 because of backlog and general unwillingness of my regime to appear totalitarian they just arrest you and put you on permanent bail meaning don't fuck up again or sit in jail until 2022 waiting for trial. I'm not worried and there is a '90% chance the judge throws out the charges' according to my lawyer(s) but whatever. If I disappear that's where I am
>>
	
Fuck Smallwill - Fri, 20 Nov 2020 00:12:14 EST x6K3CZQk No.39090 Reply
1605849134639.jpg -(41687B / 40.71KB, 1000x576) Thumbnail displayed, click image for full size.
>>39085
This is all I know about school, I applied to and got into numerous BSc online degrees like 'University of the People' to see what they offered.
To get into MSc without BSc you will need written letters from PhDs recommending you, there is no other way, so you need to work with them in a lab (why I shill working in a university lab as a dev) and they will provide this for you assuming you do actually have the so-called equivalent of a BSc. It can be for any subject and you can change later in some schools.

Or you publish papers on Arxiv that are actually valid papers and not nonsense and you contact somebody involved in this research somewhere and they manipulate the system to get you in. A final way is in Europe, there is a way to only do 2 year school and then go straight to MSc and most of it is tuition free even for foreigners but you need to cover your cost of living which will be extremely hard these days unless you go Belarus or something, or east Germany though I'm not sure of German laws these days regarding foreign students. 10 years ago anybody could walk in, start school in Germany tuition free, even get work permits for like 20hrs per week but I'm sure that all changed. Berlin is also now expensive as fuck whereas it used to be dirt cheap to live there by N. American standards.

Anyway all I know is what I did.
Find something you want to work in.
Show up to your local university and start to network with people actively involved in this research (impossible right now because of global apocalypse/plague), what I did was check the calendar's of various departments and see who was giving a free public talk and show up. I met a ton of people, tl;dr ended up in a lab position writing algorithms with post-doc's in a grant research project, they gave me letters of recommendation, I used these to go to grad school without BSc but I ended up dropping out anyway due to a long story about girlfriends and idiocy, but anyway it's possible but there is no click here and just get your MSc, you need recommendation.

I did a few online schools, UOPeople stood out because they offer NYU tranfer to Abu Dhabi campus fully paid some anons should look into esp if they live in the 3rd world. I took a bunch of their courses, their calculus course is just Strang's book you can easily annihilate that book. I also did Western Governer's U for a while to see what it's like, you can audit the courses as fast as you like remotely and get your BSc in 1 year and it's regionally US accredited which means MSc is possible afterwards easily if you have the $20k or so to pay for it, whatever Georgia Tech or Johns Hopkins charges these days. The grad school I went to was paid for because I went in the traditional way, I paid no tuition and they in turn got a lot of work out of me during that time that's still in use, but another story.

Anyway that is the reality of the schooling situ right now, you either pay a lot for WGU and complete as fast as you want, or you go to UOPeople and con your way into Abu Dhabi campus fully paid and to do this I suggest interacting with the prof teaching course, they post their thesis and their research, I would talk to them about that and show interest while slaying the material to get into Abu Dhabi. Otherwise I have no idea what to do, publish papers and get noticed or get recommendations or forget school, get a job and go P/T over 6 years and finish your BSc at your leisure.
>>
	
Phoebe Dezzleham - Fri, 20 Nov 2020 02:02:59 EST a63cScHW No.39091 Reply
How can I apply to grad school in Europe? I'm planning to apply in France, Germany, Switzerland, and Netherlands. But I am a 3rd worlder and tbh our professors here do not have any good research. I can get the gov scholarship here that stipulates that I work here in the country after I finish grad school if needed.

    39097>> 

>>
	
Emma Grimcocke - Sat, 21 Nov 2020 23:47:08 EST bxbFYfoS No.39095 Reply
What do you know about programming bots?

    39097>> 

>>
	
Alice Sonnercocke - Mon, 23 Nov 2020 18:59:51 EST jdZqGtyz No.39096 Reply
>>39076
same . but m too focused on ops curriculum that i neglected the shit industrial maintenance technician degree or whatever. And know m stuck i cant pass anything and cs019 is fun but the assignements are discouraging and i cant pass on anything whitout fully grasping it and if i cant i go offgrid for some weeks . i even did over one year just on the intro to computing lol but i made sure m pretty darn good at everything mentionned by op .
I think i still have some time m 19y.o .
Anyways m stuking with op i dont care if it doesmt workout fast all i need is some crazy salary job even after 10 years from now . m considering doing some beekeeping and farming to live in this shithole and learn at the same time this the only solution that will give me time . normal employeees here are soykafty wage stallions .

    39098>> 

>>
	
Hannah Sennerpin - Wed, 25 Nov 2020 00:09:42 EST x6K3CZQk No.39097 Reply
>>39091
Many of Daniel Bernstein's grad students are from Thailand or Argentina, they somehow got into the Netherlands. I got in briefly to TU/e because I had those pieces of papers from professors as recommendations, so even if your school has 'shit research' you just hustle those recommendations and they help you. Germany it used to be anybody could take (tuition free) school, in English, in certain subjects, but they may have changed this. Germany even gave you a visa to work there while at school. Grad school though is typically paid/sponsored or whatever, so you need some way to convince them to take you which normally is recommendation letters though you never know, I'm not an expert in university admissions I just kind of fluked out because I had a bunch of recommendation letters and they immediately let me in (without a BSc, because one of the recommendation letters claimed I had 'graduate standing' knowledge). Also it was a ton, ton of work, like meme curriculum x a billion, I had other shit going on so couldn't focus and left but anyway, be prepared for an insane amount of work.

>>39095
For the meme ai curriculum hackerrank has their own 'AI challenge' type exercises and many of these are writing your own bot which we'll prob do. All this information is in Peter Norvig's 'AI a Modern Approach' text see if you can get the 4th/latest edition on libgen yet I haven't checked but it doesn't matter, his old github free version with common lisp will teach you how to make bots too.
>>
	
Hannah Sennerpin - Wed, 25 Nov 2020 02:02:33 EST x6K3CZQk No.39098 Reply
>>39096
I wrote a huge reply then I frog blasted the vent core somehow and lost it all
The meme curriculum will do a competitive programming algorithms book soon and that's all you need to get paid.

The language doesn't matter because if anybody here read Harper's PFPL book it's just 'modernized algol' they're all the same, with few exceptions. You know algol you know every other language that is shilled including julia or whatever else.

My rant that was deleted was on Wildberger's rational math, I have had supreme success using his hyperbolic geometry as a model for the shitty lab job I'm doing right now, because Frank Pfenning's proof theory effortlessly works automated to prove all my code. This is something I really want to do sometime when the meme curriculum is done I obsolete it all and just write the ultimate of meme curriculums: a rational math and programming curriculum using things like cooltt cubical type theory prover (without cartesian coords because in the rational continuum you don't need it) so a dependently typed rational model where this is like your test case, it just works, so far for me anyway. I don't know if Wildberger is right or wrong but I do know his math is simple to implement as typed code and prove while you run it. Wildberger these days as been releasing his findings directly to YouTube bypassing journals for numerous ranting reasons, for me this is a huge success because I can then implement impossible things and run them in the shitty lab I work at and the post-doc's look at the proofs and everytime ask me where did I come up with this math? "From this 10 year old youtube series". Anyway, I spent a month doing 10-701 to see if it's possible for us to do, it is, so let's do it

    39099>> 

>>
	
Hannah Sennerpin - Wed, 25 Nov 2020 04:38:18 EST x6K3CZQk No.39099 Reply
1606297098055.png -(452348B / 441.75KB, 854x856) Thumbnail displayed, click image for full size.
>>39098
Forgot the mention the rest of the meme curriclums prog/math are done, the point was you now know where to look up things yourself, like when we do the Putnam seminar you know you can just look at Tao's chapter on continuous functions or see how he defines double integrals to solve some problem. You can watch a cs019 lecture on min spanning trees when it comes up, make it a research project instead of mandatory task when it comes up in later. You don't even have to do the rest of the cs19 assignments but you might end up looking at them when researching something to solve a map/reduce problem. You're good to go. Remember Prof K insisting the student rewrite map/fold/filter in every kind of abstraction like for trees, streams etc.? That's because later you rewrite them in highly crazy abstract graphical models in AI mapping over a probabilistic graph framework we'll learn and the time spent doing it incrementally from lists to trees to streams pays off.

I'm going to do the10-701 lectures: https://www.youtube.com/playlist?list=PLsWN0V-b507g7dbQTUvFkKZEqdHR5Fh4P and course https://www.cs.cmu.edu/~epxing/Class/10701-20/schedule.html since graduate courses are always better than the undergrad courses because they just assume 'graduate standing' prereqs so will review things not in undergrad versions, and they will go deep into theory assuming you can look it up yourself to fill in blanks. The undergrad 10-601 course can be used as recitations. Turning these ideas into algorithms requires skill in algorithms that's the whole point of doing competitive memeprogramming on the side not that you will use those methods just you get experienced with the nature of computation, a book you can read w/Ryan O'donnells Theorist Toolkit course on youtube, then you get better at optimizing your modelling of whatever new AI paper or method taught in 10-701. Everything we did comes up again and again like invariants, and other topics in 'learning security' because these algorithms are trivial to fool, you'll learn things like projective gradient descent attack and how to build and deploy a provably robust AI model with randomized smoothing because regular algorithms aren't good enough anymore, you need a provable model. It sounds difficult but nothing is conceptually harder than what we already did just the notation gets more elaborate but it's the same thing as you'll see in Ryan O'Donnell's probability notes "Probability is analyzing random code" if you know if statements and randInt(x) you're good. Graph model of covid as pic from some company that uses probabilistic framework modeling we'll see.

    39101>> 

>>
	
Ebenezer Wottingbutch - Wed, 25 Nov 2020 06:28:52 EST wdIjS3A2 No.39100 Reply
Physics seem like an interesting subject that has some intersections with CS, and has application in the real world. Do you recommend learning it too to gain additional insights?

    39127>> 39128>> 

>>
	
Something - Wed, 25 Nov 2020 09:41:37 EST QSSRr7sa No.39101 Reply
>>39099
Hey OP! I'm a final year CS undergrad. I made a huge mistake of joining a not-so-good university and the professors here are hopeless. I resorted to online studying, and there are holes everywhere in my foundations. I stumbled upon learnaifromscratch, and have decided to complete it. I have 6 months to graduate, and hope to finish it by that time. I'm a bit confused with the order we have to do things though. Im currently doing CS019 and the math section. After this, do I have to do the prerequistes you have listed in the AI section?

    39127>> 39127>> 

>>
	
Jenny Tillingstock - Wed, 25 Nov 2020 19:02:55 EST rssKXQuV No.39102 Reply
>>39032
OP, please respond. I'm really interested in your opinion

    39126>> 

>>
	
d4u - Thu, 26 Nov 2020 15:29:25 EST xRbgRRux No.39103 Reply
>>39023 (OP)
Started going through your workshop. Want to change my profession to data scientist and relocate from Djibouti to Europe. Hope can do this by end of 2021. Will write my progress here and hopefully see some feedback from you. You my inspiration, Rn learning cs15-122 on my mobile in free time whenever I can and cs0190/papl 2 hours before work(or after because some days I need to work earlier). After a few weeks want to add Tao's analysis 1st book, I skimmed a bit through it and it's brilliant. Wish I had it when was in my uni.
I have already few questions, seems I cannot wrap my mind about topic of calculating complexity of recurring functions. I stuck at "T(k-2) + 1 " using plug and chug method, when you need to substitute.
Second is what are you thinking about "scala". Seems like rn is very good time to learn it. 3rd version is almost here and it's the only language where you can write in functional style and get a job easily(in Djibouti 2 big banks are using it).
Third, when are you will continue to get adding new PAPL material guide. It's very helpful that you written order of lectures / assignments. In one-two month I think I will be already at 16th lecture.
Also I very want to start competitive programming course but 4th book will be here only in summer in PDF. What I can do? Want to start much earlier since I think it will help to answer all this FAANG interview type of question(don't want to greed leetcode).

P.S.

How did you manage to find labs for cs0190?

    39129>> 

>>
	
Augustus Buckleworth - Tue, 01 Dec 2020 16:33:10 EST H3PaHsxz No.39123 Reply
>>39023 (OP)
OP what are your thoughts on Georgia Tech's OMSCS? Would it help in PhD applications? Do you think it's good to have if I plan to continue only in industry?
>>
	
Charlotte Hibberwell - Thu, 03 Dec 2020 16:24:46 EST 6j/wh0mF No.39125 Reply
OP any resources for trading? Not algorithmic trading or bots, but day/swing trading.

    39130>> 

>>
	
Phoebe Woffingkudging - Sat, 05 Dec 2020 00:29:15 EST x6K3CZQk No.39126 Reply
>>39102
I only like OCaml because it has SML-like modules, and I find those modules the world's easiest way to program though OCaml has a bunch of advanced higher-order modules and shit I've never really used. If you're interested in switching from OOP->Functional then Yaron Minsky has articles, talks he's given and even papers on google scholar if you look around about this how they did it. https://youtu.be/FnBPECrSC7o

All I know about category theory is Robert Harper's 'computational trinitarianism' he claims in those Oregon Programming Language Summer School talks: Logic (constructive logic ie: natural deduction/judgements) , programming language theory and category theory... if whatever you have discovered works in all those 3 fields then you have genuinely discovered something new. Many people discover things in category theory that have nothing at all to do with PL or can't be proved in constructive logic, so they're not useful, which is a huge criticism of category theory you will find. My advice is if you want a PhD in programming language theory then Robert Harper's computational type theory is sitting right there available for anybody to check out, he even has a full book (i have a prelim draft) that you can write and ask him for or one of his PhD students and they will give it to you. Otherwise it is a crazy, crazy abstraction you could get lost in and much of it has nothing to do with programming languages. They are also actively writing their CHiTT (computational higher type theory) proof assistant, so basically they're own agda entirely in OCaml and you could get involved that way and who knows maybe they start inviting you to whatever it is that this group of PL theory students do: https://github.com/redprl/cooltt

My personal opinion of category theory is that it is hard to study that model and find anything meaningful that applies to PL, but finding something in the PL world then testing it on a category theory model works somehow. If your planned thesis is in category theory then sure go nuts but I consider it less important than most other models, like the constructive model is the most important to me. For example you want to take SML modules and make them higher-order, a module can consume another module and produce a new module. You first test this in the language, which is where the truth is, does this actually work. Then you write a proof in agda or with constructive logic. Then you go into category theory and try this after much difficulty you will discovery it works there too.
>>
	
Phoebe Woffingkudging - Sat, 05 Dec 2020 01:27:32 EST x6K3CZQk No.39127 Reply
>>39100
I know nothing about physics except Strang's CSE book and 2 courses on MIT solving differential equations which is pretty amazing when you see it. These kinds of techniques translate to Quant finance dev monkey type jobs, if you can understand stochastic calculus and have exp modeling real life things in something like strang's mathematica models (which you can write in Julia too, or common lisp even) then you will be in high demand.

>>39101
I will make those prereqs as brief and as easy as possible, we will tear through some calculus prereqs and read Ryan Odonnell's probability notes and see his lectures on it, but it won't feel like work it will be interesting. tl;dr there's no prereqs for anything really, the AI workshop will be a model of how I learn things, dipping briefly into a topic to extract only what is needed and then bailing, no huge textbooks or series of lectures though there are some things we will have to do like probability. tl;dr2 the AI workshop is the 'grad research workshop' where you can now look up these things yourselves as a research project, that's how we'll do it. Fill in the blanks as you go.

CS019 I have to totally rewrite sometime it's just a draft, the main takeaway from that course is how he takes the data, writes a data type, then does cases on that type to make everything much easier. Also it directly translates to OCaml if you know CS019/Pyret you know OCaml believe it or not.

>>39101
My opinion is you should get an employer to pay for it, work at somewhere like IBM or Jane Street or wherever that covers tuition and get them to pay for your MSc don't bother paying yourself. PhD I can only speak from my own exp which is obtaining letter recommendations from professors, that to me seems to be all admissions cares about. "Oh you are vetted by somebody we already know, come on in". OMSCS requires US regional accredited bachelors of some type if I'm not mistaken, the courses look good to me but there are big companies out there that will pay you to get it. With the exception of Netflix I would avoid FAANG completely they are kind of a dystopian nightmare directly lifted from the Unabomber manifesto on the worst possible future for humanity, also I wouldn't trust them to pay for your education these kinds of creepy corps have all in house education or terrible year end reviews that nobody can pass. Do a search of tech corps that pay for education, straight up tell them in interview you want them to buy your masters and in return you will use that knowledge to make them money as bluntly as possible you'll get hired.
>>
	
Phoebe Woffingkudging - Sat, 05 Dec 2020 01:36:56 EST x6K3CZQk No.39128 Reply
>>39100
Also I worked through a lot of Sussman's crazy, crazy books on functional differential geometry and classical mechanics. If you want to learn Physics try those books you take the math notation and write scheme programs and they run. It's crazy.

I still don't understand physics though, except Wildberger's 'relativistic hyperbolic geometry' lectures you may find interesting.
>>
	
Phoebe Woffingkudging - Sat, 05 Dec 2020 02:17:19 EST x6K3CZQk No.39129 Reply
>>39103
SCALA is heavily used by Algorithmia, they run an 'AI marketplace' that I believe Microsoft bought and they hire remotely worldwide. The classic way to learn it is that MOOC that the founder of the language runs on edx or wherever, I can't remember, look him up.
To find T(k-2) + 1 all I did was input values, and then look for a pattern, I cut and paste that pattern into OEIS which told me it was closed form: T(n) = floor(n/2) + constant for n > 1 so I looked around youtube for an explanation and found: https://www.youtube.com/watch?v=8gt0D0IqU5w this is generally what I learned taking Ryan O'donnell courses, if you don't know then just input small cases and see what happens, search for an answer. There is of course something called the 'master method' for recurrences, something we haven't done yet because we haven't done algorithms yet, but that method will easily solve that recurrence as well.

Your 3rd issue, I slacked on that workshop because I spent about 6mos in total doing a ton of AI courses and other things to see what would be best to learn, from my shitty background in finance watching Quants backtest using statistics to find a signal in the noise, or using NLP to analyze comp[any finance reports or even the daily news. Anyway some of the greatest lectures come towards the end, where he intuitively describes impossible complexity theory or even network theory. I still think it's the best intro to CS course ever made and will redo the whole workshop a few times to distill the essence of: this is your data, write a type for it, now do cases on your type, look everything is done you didn't have to do anything.

Competitive programming I will go through the 4th book and 3rd ed on libgen.rs at the same time so you don't need to buy it, they will have a digital copy once the 2020 competition is done which was suspended because of pandemic, I think spring 2021. It's virutally the same as CS3 except there is a lot of new problems all of which I will list as we do them. the point of comp prog is to learn algorithm design, and emergency hacking. Emergency hacking is what I had to do in HK when faced with about 100 data feeds in real time and some that just dumped in bulk at end of trading day. You had to normalize, parse, clean etc this data stream as it came in by any means possible, usually manipulating/hacking the language standard library in order to do this in any kind of time where you could go home at the end of the day. It also happens to be every single shitty interview question they ask, if all you ever did was practice comp programming you can pass codility and white board and whatever tests, tl;dr you get hired no matter what, even if you have no idea how git works or have never written a full program. It's true, so we're doing it.

    >where did you find labs for cs19

literally using the techniques from 15-388 that practical data science class plus a bot I wrote that just mined the hell out of CMU's pages, I would scrape the name of professors on one page, than learn the cmu.edu/~profName domain and scrape that too. End of day I would have like 1000 courses to look through fully archived, then I found the labs. There's more labs too, plus I have a lot of CS1730.... anyway I'm waiting for Prof K to release his new 1730 and we'll take it instead of me pasting together a bunch of shit I scraped.

    39140>> 

>>
	
Phoebe Woffingkudging - Sat, 05 Dec 2020 02:45:28 EST x6K3CZQk No.39130 Reply
>>39125
Tip anon: we are actually doing quant work in the AI workshop.
We will learn so many statistics that we may as well learn stochastic/ito calculus, and that Cozma Shalizi Advanced Data Analysis course which is exactly what you do as a quant.
I like finance because it is a specific domain where everything is a lot of noise, and you need to find the signal.
Machine learning there is a strong signal already, but you're working in such a high complexity domain the art there is to reduce complexity. Think about identifying images from pictures, high signal, extreme complexity because there are so many possible images and interpretations of pictures. This is why we will take Ryan O'donnell's Theory Toolkit course to understand the complexity of the enormous problems we have in ML
Meanwhile as a quant, you want to take data and reverse engineer the signal with statistics, that's mainly what we'll be doing.
In fact, everything we have done, qualifies you to apply to JS or Two Sigma or Rentec as a quant developer meaning the guy who sits beside the PhD who needs to backtest immediately on data that literally came in a second ago. Both of you get the same bonus in my exp so it doesn't matter.
The math is not hard, what is hard is combining the entire data of earth's state at a moment in time and then producing a program that can backtest over that state before the competition. We'll learn the math they are doing it's Wildberger tier, you can do it easily.
What isn't easy is finding that signal in all the noise, and this is all done in pure stats not machine learning, ML is used for the data which is 99.9999% of any quant strategy: the available data. What signal can I find in today's global vehicle sales? By global I mean global, like millions of data points just being dumped at 3pm to us totally uncleaned from some 3rd party source and they've told us that we are not allowed to use any kind of cloud technology to analyze it, because they are not licensed, so we need to come up with our own in-house solution. You are the guy tasked with this task, take apart these million+ points of data in the fastest possible way, normalize them and index them so the quant researchers can analyze them for any kind of alpha and it must be done as fast as possible before the competitors which is the rest of the earth. Now you see where competitive programming comes into play: by any means necessary, parse the shit out of this data using this strategy. Or even CMU's Parallel and Sequential algorthims book, highly useful in my day to day job then (and also a sibling of CS019, if you know Pyret, you can easily understand that book).

Day to day trading I don't know about I've never done it. There's a few algorithmic trading competition thoughs for 'day trading'.
Whatever you do don't try crypto daytrading, it's not legit whatsoever.
Long story but I was dicking around with this recently and one of the biggest crypto exchanges straight up extorted me to buy 'premium access' in order to keep my delay, and when I said go fuck yourself they rate limited me

    39133>> 39134>> 39135>> 

>>
	
Phoebe Woffingkudging - Sat, 05 Dec 2020 04:34:55 EST x6K3CZQk No.39131 Reply
>>39023 (OP)
Fans of the absentee learnAIfromscratch curriclulum I slacked for numerous reasons like being arrested again, but we're back and going to learn AI.
Well really we are going to learn stats theory, for a problem that has immense complexity, like mind boggling complexity. We'll learn how to project this complexity into things that are easier to optimize, just like all those Wildberger lectures where he projects shit and then claims he can do relativistic hyperbolic geometry. In ML you project into affine spaces, you will be glad you did those affine linear algebra Wildberger lectures.

I'm going to cut + paste some wildberger lectures that explain integration, which is all we care about, though we will also see the first instance of derivatives
Then we'll do Ryan O'donnell's probability lecture notes and lectures, and some of Wildberger's probability series, and you will review the Jane Street 'quant interview' pdf they hand out and realize: you know this. Rolling 2 dies and what are the odds it's 7? Wildberger explains in like the 3rd lecture. Congrats you work at JS. Julia the language we use is a modelling language like common lisp except you can import any Python or R library and use it, we are no longer programming software, we are just making models of real life events. We solve these models using all the kinds of things Ryan O'donnell teaches and Strang with his matrix manipulation (wildberger teaches this too, in his 'higher linear algebra' course on his other site). Except there is a serious problem we need to do this as fast as possible by any means necessary even . That's why we learn competitive programming, straight from CP4: inserting negated input integers into priority_queue<int> pq; to make it into a Min-PQ instead of default Max-PQ. Real hacking, taking the standard libraries in various languages and manipulating their defaults.

I won't cover this but I suggest anons do Wildberger's algebraic calc course, it's analysis just using rationals in his basic affine geometry, super simple to turn into vector calculus and project into other fields wher ethe complexity is reduced. This is generally what I've been doing, having fun doing that at my shitty lab P/T job and writing all the proofs in agda which is an even simpler task. If anybody here wants to 17th century it up and be the next Euler rational math research that wildberger shills (and has PhD students, anybody here read their thesis under Wildberger at NSW? you can reinvent everything in his math) is ripe for research opportunites. Where I work I reduced the complexity of a gene expression measurement by modeling in matrices, using Wildberger tactics to squash the curse of dimensionality. As the space of the data increases, the clustering of the points diminishes but.. not in wildberger hyperbolic universal geometry. Anyway anybody here looking for something interesting to get into cast your shit whatever it is into his crazy world of spherical triangles it requires almost no optimization, you're just making trivial rational models. As we go through all the AI junk, keep his lectures in mind and see if you can translate them over, that's what I've been doing anyway and all of it has worked. Good luck anons

    39132>> 

>>
	
Biggus Dickus - Sat, 05 Dec 2020 07:12:10 EST t9R6d/Mk No.39132 Reply
>>39131
OP, you mention trying to get a job at Jane Street and the likes. As someone who knows how to code, but lacks internships and experience, what is a good plan to have a decent chance of being selected at such a place? Can you tell me a sequence of steps as briefly as you can?

    39142>> 

>>
	
Lillian Subberfield - Sat, 05 Dec 2020 08:21:53 EST GPHHJcpg No.39133 Reply
>>39130
is Scala used in daytrading? Can i get into one of those meme masters degree, if i have bachelor of science in CS, but in very bad private school in my thridworld country?
>>
	
Isabella Chavinghood - Sat, 05 Dec 2020 08:33:44 EST /o1c5dVH No.39134 Reply
>>39130
Yeah, I meant something like Forex retail trading. I'm drawn to trading because you do everything yourself, you're in complete control. No boss to report to, no shitty coworkers, no deadlines. You literally manufacture (or vanish) money. And you have prop trading firms like FTMO that give you a test (make 10% returns in one month) which you pass then they fund you with $100000 to trade and split profits 70/30, so you don't even need to have insane amounts of money to trade for a living. But I don't know much yet. I've only been studying this for a few weeks, hence why I was asking for resources. Trading gets a really bad rap because of all the YouTube/Instagram charlatans that scam people but I truly believe you can make it and do it for a living if you work hard enough.
>>
	
Lillian Subberfield - Sat, 05 Dec 2020 09:21:59 EST GPHHJcpg No.39135 Reply
>>39130
where is AI workshop you talk about algotrading? I searched 'quant' in all sites here https://learnaifromscratch.github.io but havent found even one occurance. Do you have some hidden AI workshop?

    39141>> 

>>
	
Betsy Nubberbitch - Sat, 05 Dec 2020 14:53:35 EST as6fz8zv No.39138 Reply
I'm not sure if its on-topic but do you (OP) or anyone else know any resources related to gaining a diploma in computer science completely online available for international (Indian here) students?

In India where I am it will take 3 years for a diploma. I think foreign institutes don't have such a lengthy time? I need one and can't do any alternative stuff.
>>
	
Nathaniel Hegglewatch - Sat, 05 Dec 2020 16:50:17 EST FxaNxWKw No.39140 Reply
>>39129
>>
	
Phyllis Hubblebury - Sat, 05 Dec 2020 19:53:13 EST x6K3CZQk No.39141 Reply
>>39135
There is a decent summary here https://quantnet.ai/documentation/en/theory/theoretical_basis.html#asic-concepts the MIT 'Math for Finance' course on ocw covers some too and more advanced methods. Remember they trade by using statistical methods on tons of public data to find a signal, then test this hypothesis against historical prices the prices themselves of stocks you never find anything there it's just a source of truth to test.
>>
	
Phyllis Hubblebury - Sat, 05 Dec 2020 23:03:20 EST x6K3CZQk No.39142 Reply
>>39132
Akuna capital will just straight up send you a coding test as a filter, triplebyte you can pass their tests easily and get some kind of offer so you are now 'experienced' if you want before applying to JS. If you were to apply at JS as a new SWE grad, I would make sure I knew the basics of everything in CS019 not at any kind of expert level of understanding but enough to solve their medium-hard tasks which will all involve some kind of dynamic programming/graph or other basic compsci 101 implementation.
In fact I still claim that CS019 is all you need to get hired for any SWE job anywhere virtually any problem they give you can be modelled in Pyret with a graph or an array, you don't even need to learn a 'real' programming language* since they're just going to teach you to use whatever they use in-house anyway though you do need to pass a recruiter phone screen which will use this: https://coderpad.io/launch-sandbox so learn enough of one of those languages to do basic shit.

The language you pick for the real interview you should know it's complexity model and every library you use inside out because they will ask when you import something about it's scope and reasons for you expanding the namespace to a gagillion new functions, you should be able to write code fast like you know what you're doing after you do examples with the interviewer(s) to flesh out the requirements, and your code must be bug free you aren't allowed to run it yourself. You also have to be able to define anything you wrote on your application or say in the interview 'define what a hash table is'. You can see interview questions and compensation offers on teamblind.com for JS and other outfits and watch their 'Effective ML' talk on YouTube for general style things they like such as always making an interface, always being explicit with failure states, etc.

Going through all of Minsky's talks basically the interview is supposed to be you showcasing how you work with a team, the interviewer(s) are actually your coworkers so you should be working together to fully get all the requirements of whatever it is they ask you to do and you write a solution from scratch probably a small program with numerous interfaces, like the assignments in CS019 in fact exactly like the assignments in CS019 but with more vague requirements you have to figure out with the interviewer. Really what the interview is testing you for is basic programming competence in any language, test your bullshit and bluffing levels (using jargon you don't understand), and for 'intellectual curiosity' ie: are you actually interested in working here and optimizing the living hell out of banal things like some client wants a better way to display charts on his trading screen, or rewrite unix utilities using OCaml. That's why they are always shilling puzzles so much the idea being everything they do is a puzzle to be figured out collaboratively. If you approach it that way as a puzzle to be figured out and always be modest about your abilities since every second employee there has a graduate degree then I don't see why they wouldn't hire you so long as you don't fuck up the code and turn in some bugs you should have caught.

As a concrete example, this chapter from PAPL https://papl.cs.brown.edu/2020/Algorithms_That_Exploit_State.html#%28part._memo-vs-dp%29 where he talks about the tradeoffs between dynamic programming and memoization and various pitfalls, all things an interviewer there would ask when you start writing some DP solution and forget you can accidentally use an uninitialized answer. btw if you do get hired get them to pay for your graduate degree in advanced compilers or FPGA/something else so you can get out of SWE and into a really easy research role modifying compilers which means huge increase in $$ and no deadlines pressure good luck anon

    39143>> 

>>
	
Biggus Dickus - Sun, 06 Dec 2020 00:53:59 EST VVJBQPty No.39143 Reply
>>39142
Thanks a lot OP. In summary, I should do cs019 and math by the side till I complete papl, and then move onto the CP4 book, right? Apply after 3 months?

    39144>> 

>>
	
James Huvingchatch - Sun, 06 Dec 2020 22:48:34 EST x6K3CZQk No.39144 Reply
>>39143
There's no real linear sequence, Nick Wu aka xiaowuc1 who is 'international grandmaster' had zero background and started doing competitive programming just by leafing through CLRS in his spare time and seeing what he could solve with the usual online judge sites, then he went to university to take basic compsci 101 so did it backwards.
>>
	
Dildo Baggins - Mon, 07 Dec 2020 03:26:14 EST tvHrKZ+1 No.39145 Reply
OP, you should do a Compilers/Operating Systems worskhop. I tried doing the edx compilers course but without help it's really difficult.

    39154>> 

>>
	
Basil Sirryway - Thu, 10 Dec 2020 07:29:17 EST tU8FWnKX No.39153 Reply
I hate this web dev shit. We're using the biggest meme stack and I can barely keep up. I'm gonna try to get in Toptal. OP can you suggest the fastest way to be able to pass their algorithms interviews? How hard are they?

    39155>> 

>>
	
Eugene Subblewater - Thu, 10 Dec 2020 23:17:04 EST x6K3CZQk No.39154 Reply
>>39145
Try CS1730 on plai.org then take the compiler course in the functionalCS meme list that uses OCaml, the entire course is open with recorded vids from Prof K he will explain exactly how parsing works, generators, garbage collectors, etc. A lot of this is in the last part of PAPL too but in 1730 vids that I've seen he really goes into details just like he does in the CS190 lectures to make these concepts understandable. Then you pick up a compiler book and everything is easy. Sadly almost every compiler course is locked up behind logins, CMU won't even let you look at their higher types compiler course notes.

Reminder that Prof K writes this on his 1730 page:

    >The on-line version does not offer credit from Brown; but those who successfully complete it can get recognition of this directly from the instructor.

>>
	
Eugene Subblewater - Thu, 10 Dec 2020 23:44:08 EST x6K3CZQk No.39155 Reply
>>39153
When I took them they used codility, and you could just do the 'codility learn' sequence and probably pass the test but reminder the meme ai curriculum is sometime this week going to go full competitive programming out of CP3 book (since CP4 won't be released electronically until after college 2021 competition) so my advice is get that book, go on Kattis or Topcoder and just start solving shit until it makes sense. Kattis is nice to start because all the problems are 'apply this data structure' while you learn, then the competition archives you'll see on there are much different, it's apply this queue then feed into this other datastructure.

The other toptal test is a small webapp in language of choice but it has to be 'production ready' meaning fully optimized and commented code/obvious bug free etc but at least you don't have to use piles of meme frameworks. Reminder you can just target firebase too and do pure javascript 'front end' if you wanted too, then they just restrict you to 'front end developer' status until you do the full test again later. In my shitty webdev guide that mother of all app demos github is literally what you do in the second part of the toptal interview, took me about 5 hours on a weekend to do it because of all the annoying authentication plugins they wanted but I highly overengineered. Toptal offers other contracting too it doesn't have to be webdev you can be a rust programmer or whatever you want but I have no idea what the tests for that are I didn't try.

AirBnB and some others used to hire directly from toptal too, they probably still do. I still think the most lucrative job on earth would be a Node.js optimizer like somebody who can write C++ plugins directly you could just contract yourself for $200/hr anywhere. You could also do something completely different, take that CMU 15-213 course and try microcorruption CTF, when you're done no joke apply to NCC group and say you want to be a junior consultant and learn security. While you're at it go slay cryptopals challenges too, in fact I will probably slide those into the competitive programming curriculum because they're easier than you think at least until you get to the level(s) where they start emailing you direct challenges (and at that point, you have a job offer).

Finally if you really hate all of this, and since this is 420chan, look at Jane Street's incremental-dom software in OCaml, study the fuck out of real world ocaml 2, write marijuana auction software and sell it to some venture weed capitalist in colorado or california. Look at dealdash website, pretend everything is marijuana. You can easily, easily do this with incr-dom jane street software, it was something I always thought about doing then got sidetracked with other stuff. If you hate OCaml write it in Elixir and there literally is a google paper about how to write auction software in Erlang, study that and translate to Elixir (uses same OTP libraries.. I think) and try Phoenix web server, tons of books for this.

Since we are on the topic of weed reminder that Dutchie is the (poor) software that every single legal dispensary uses.. can you make a better one? Like add in filters for all the terpenes and other options? Can you connect it to quickbooks and other existing inventory and POS software so you don't have to rewrite it from scratch yourself? Then you can make their levels of monthly subscription money too just charge half what they charge. Like pg from hn used to write, check their careers page to see what they're using, and make improvements.
>>
	
Eugene Subblewater - Fri, 11 Dec 2020 00:30:38 EST x6K3CZQk No.39156 Reply
1607664638067.jpg -(244100B / 238.38KB, 1200x630) Thumbnail displayed, click image for full size.
>>39023 (OP)
Next week who wants to try some silly competitive programming, and the Putnam book at the same time. I kind of wished I began doing competitive programming because so far this is definitely the best way to learn all this shit from what I've tried, sometime when this memeworkshop is done I'm going to rewrite the intro to programming to do this from the very beginning. I finally understand what Poh-Shen Loh meant when he said that only through competitions do you truly learn all these things because there is no motivation otherwise. I'm going to use the Art of Programming instead of CLRS because it goes into ridiculous depth, Knuth teaching you the mathematical properties of trees and how to generate all possible trees is absolutely wtff tier when you see it.

For education anons, I will describe some exp I've had with UoP aka University of the People. You can get the NYU profs to give you letters of recommendation, and everything in my life has been through letters of recommendations so I now wish to shill UoP because depending on your country, you can get a heavy discount on 'tuition' which for me in a first world country was only $100 USD per course. This means getting into European grad schools, or even NYU Dubai as a fully paid student.

The intro to CS course is way too easy and just using 'Think Python' by greentea press, a free book. The other students peer review your code and routinely fucked up my meme recursion I wrote in Python so you may have to get the prof to fix your grades but anybody can finish this course. There is no proctored exam but if you have to anybody can be a proctor, though I wouldn't recommend cheating you don't need to, if you've done CS019 you can do any of the courses. The calculus intro is Strang's book on OCW, again you can easily destroy this book and course no problem just take the Brown Trig bootcamp and watch Wildberger talk about the integral (this will all be in the ai meme curriculum) and take 18.01SC/18.02SC all the lectures are recorded. If you did just 2 chapter's out of Tao's book you have 'mathematical logic' meaning you now get that it's just an abstract model, you point to the axioms and constructions and can convert back and forth like the chapter on real exponentiation, Tao hands you square roots so dealing with some kind of ridiculous nested roots is simple just point to the lemma where he shows 'this operation equals this' and change them easily to something easier to work with. I should prob write more about that, I just assume anon's know but substitution rule: if this equals this, substitute it in, now simple to manipulate all those Strang exercises. Anyway that's what I did and slayed their calculus course which was proctored, I had to pay a local college to watch me take the UoP test which was way easier than I thought it would be.

You take 2 Java courses after and again, if you've done PAPL where Prof K builds objects from scratch in the later half of the book this is easy though the IDE they recommend is a nightmare. Prof K 2 lectures in CS19 (i always screw up cs19 vs 190 if you haven't noticed) on aliasing will teach you all you need to know too about this.object aliasing.

During this time, I interacted a lot with the professor. Reminder every other student is harassing him for grades and petty questions but the NYU prof I had for one course was a compiler engineer so I pumped him for that info, ask them and they will reply. Ask them for a letter of recommendation but only after you destroy the course, don't beg for shit and they will provide. If you are in a 3rd world country and excel at the courses they honestly will put you in NYU Dubai with full scholarship. The only problem of course is the bs tuition fees, I think you only get (from talking to others in the forums there) a max 50% discount so still have to pay $50usd per course which for me is unacceptable but maybe not for you. If you are really 3rd world this is an option.
>>
	
Eugene Subblewater - Fri, 11 Dec 2020 01:21:27 EST x6K3CZQk No.39157 Reply
Has anybody here taken the Ryan O'Donnell Theoretical Toolkit course? I should prob elevate this on the functionalCS memelist as the best course I've ever done.
Prof O'Donnell is absolutely merciless as well as you will see in the recorded lectures when a student can't answer a question, that's the diff between undergrad hand holding and grad courses. 'You should have known this by now'. I write him sometimes and all the profs in the functionalcs meme guide, though I don't tell them what I'm doing of course. If you step to them in their world, meaning you want to learn what they're doing and not begging for letters or favors or whatever, they will def help you, he gave me access to the 2020 version of the course on CMU's AWFUL diderot, why the fuck did they make that. Reminds me of MIT's 'stellar' another abomination with exception to the 'export ZIP' all materials it's complete trash. Anyway Ryan O'donnell and Prof K are the two most open professors you will encounter and if you write them they will reply, like if you wrote prof K and asked him 'I want to know everything about compilers what do you suggest' he will def help you. If you guys want to know something write him and ask, then actually do it. Btw I'm now an almost F/T contributor to PAPL, because I caught so many mistakes, see if you can find me in the book credits.

Now that I'm apparently American with dual citizenship, this means US border guards cannot immediately refuse me because of my silly fed incarcerated past (even though charges dropped they can still tell you to fuck off and fly you home at your expense) so I've been actually thinking about applying to JS or one of Elon Musk's ridiculous brain implant startups, and I'm leaning towards Musk's wacky brain implant startup just to see what goes on there, though I found out a lot more about JS: you can take your bonus and invest it in their proprietary fund, all employees this is their other benefit, meaning guaranteed interest because they never lose money. How does this happen? We'll learn in the ai workshop. Ryan O'Donnell also has a very good probability and computing set of notes that I've been doing we should do, something else that may help you get into JS possibly but of course the challenge is just being able to get a phone screen let alone a job there given the millions of applicants from top schools. JS is also kind of OpenBSD project, they rewrite fundamental protocols and unix software themselves, so knowing operating systems is key. That said, the MIT course I shill on the functionalCS website is really the only full OS course I've taken (I did half of CMU's os course before they nuked the lectures off panopto) and when I worked in HK I always knew more than everybody else about operating systems, just from that single MIT book that is a rewrite of Lyon's Commentary and I would rate my OS knowledge as minimal except for the kernel hacking (as in bad software) I did when making phones and needing to patch android kernel with SEAndoid. I could write another guide to that, strangest exp I ever had was emailing the NSA guy in charge of SEAndroid so I could write gang members 'secure' phones. This is now an open research avenue too due to Apple's shenanigans lately, also I could write a lot about Moxie Marlinspike's software like how to edit it so you can remove phone numbers and just use other identities of your choice which is what I did, and even how to run your own server. I wrote and talked to him numerous times about doing this when I was actually doing it before it got what-is-going-on tier and all my competition was murked outside the gym or nightclub parkinglot being accused of setting up a jack. Reminder Moxie is a great hacker, but the guy who truly made Signal crypto is a robotics engineer from CMU moxie met while he went to school with him, so don't be bamboozled by his amazing engineering it's that PhD robotics guy silently making signal what it is though I owe a lot to moxie and he will also write back to you if you ask him things.

Anyway I will continue this elaborate shitpost no bump

    39162>> 39162>> 

>>
	
Eugene Subblewater - Fri, 11 Dec 2020 02:46:58 EST x6K3CZQk No.39158 Reply
1607672818067.jpg -(53633B / 52.38KB, 500x500) Thumbnail displayed, click image for full size.
>>39023 (OP)
>>39023 (OP)
Many posts, mainly shilling Wildberger, because I wish to celebrate with other anon's my aquittal from Corona-Chan conviction for my little concert I put on where local prosecutors threatened me with years in jail and a judge threw it all out today as I expected. I'm on cruise control now. I could also write a lot about prison what to expect, but you don't ever want to end up there, media never reports what really goes on inside. I witnessed the most fucked up shit in the 'tv room', if you go to jail, don't go near the TV that's all I have to say. Every inmate sweats the tv and the phones. I met people in there doing 20+ years for the most trivial things like a blind guy who who's fingerprints were on a bag of drugs in somebody else's house, and they put him in federal prison for 20+ years. Anyway let's finish this last post with some meme curriculum

Anyway, if I gave you two abstractions/representations of real numbers, and you watched all of Ryan O'donnell's courses on turing machines, you would not be able to order them in binary. To me this is a fundamental flaw and when I started to take Wildberger seriously, real numbers truly is a pile of bullshit. But I won't inflict my non-mathematician beliefs on you but seriously try it, it doesn't work.

    39161>> 

>>
	
Eugene Parryford - Fri, 11 Dec 2020 10:21:35 EST MmoLooUZ No.39159 Reply
OP can you share how you find uni courses? I want to find courses in unrelated fields to CS (finance & economics) and I usually just go to the faculty page and go through every prof's personal page to see if they have courses that they post online but this only really works with CS since those profs are more likely to have their lectures/notes/assignments online. Also, do you think a prof would share their notes or past assignments if you emailed them as a rando?

    39174>> 

>>
	
Dildo Baggins - Fri, 11 Dec 2020 15:50:06 EST 3CdummYd No.39161 Reply
>>39158
In regards to you shilling Wildberger, seeing his views on infinte numbers, set theory and real numbers in general have alarmed me to say the least. I'm by no means a mathematician, so I can't comment on what is right and what is a pile of flaming bullcrap.I will watch his videos with an open mind just because you recommend them (and also because his Math History videos were really interesting).
There's so much I want to learn but unfortunately financial reasons have me stressing out over mundane shit. Hopefully the little bit of programming I know will land me a decent job where I can continue studying on the side. I would go for masters in CS but sadly I have nothing to show for other than a CS degree from a shitty college.
But hey, at least the CP3 book will be fun.

    39174>> 

>>
	
Hukomukho Hyangla - Fri, 11 Dec 2020 22:16:32 EST wBYj+M1L No.39162 Reply
>>39157
My dream is to reach a level of proficiency in maths and programming so that when a new topic comes on, I can go onto google scholar and find the latest paper on it and be able to read and fully understand them. Once I understand them, I should be able to implement them in my choice of language (according to my best language judgement) for that task.

OP there are many many courses on your meme list. Which are the pivotal do you think for math and strong CS skills. By which I mean to ask which are the bare minimum that must be done to develop the iron strong skeleton I am talking about. I am currently in the middle of CS19.>>39157

    39175>> 

>>
	
George Cazzlemere - Sat, 12 Dec 2020 08:01:30 EST dghocC3Z No.39163 Reply
>>39023 (OP)
any idea how to optimize legacy Java systems? For example there are Hibernate methods that not only take long time to finish, but they pack ton of things into one transaction, so one thing fail - all things fail. And nature of business is there are lot of things going on in "one transaction": creating new annex updates policy whihc updates proposal which may updates customer data, insurance subject data... many other things.

    39175>> 

>>
	
Eugene Sillywater - Sun, 13 Dec 2020 20:53:01 EST bxbFYfoS No.39169 Reply
What steps should I take if I wanted to become a quantum software dev?

    39171>> 39175>> 

>>
	
Eliza Dunkinville - Mon, 14 Dec 2020 10:43:56 EST 7sa8hi9j No.39171 Reply
>>39169
How would you run and test code without a quantum computer? They're not very powerful yet even if you could get one. A normal computer has millions of transistors. Quantum computers have the equivalent of 50 or 100 transistors so beyond 3rd grade math they're not very useful.
>>
	
Cedric Blackson - Mon, 14 Dec 2020 17:26:50 EST Eh+7pngF No.39173 Reply
Hey OP probably a dumb question but does your meme AI list supersedes your original curriculum or are they complementary of each other?

    39176>> 

>>
	
Doris Sivingstad - Thu, 17 Dec 2020 00:10:00 EST x6K3CZQk No.39174 Reply
>>39159
These days I buy a bunch of seed boxes with ssh access and I index entire university domains crawling through every page, the script I run tells me if any link to recorded lectures are available then emails it to me which I then go through manually to see if I want to keep it or not, it's how I found all the MIT stellar videos too at video.odl.mit.edu and the open panopto vids on CMU. I learned this from that 15-388 course, I'll have to find it but I'm pretty sure it was just one of the exercises mining an entire site except I generalized the scrip to mine .edu domains like a bot that just runs forever. I use seed boxes because they have a huge amount of space and usually no xfer limit

Also yes you should email them and ask I did a few times, they will usually let you. The one's I got access to I couldn't share because I agreed not to, there's all kinds of problems with recorded lectures some student privacy law where they need consent if half their head is in the frame, and all the assignments they don't like to hand out to prevent future students from gaming it too hard like hiring somebody to solve all the assignments for them but tl;dr yes you should email them just be brief and say you are self-learning and will respect any copyright or w/e and they'll give it to you. Ryan O'Donnell for example will give you full access to all his courses on canvas.

>>39161
No reason to be alarmed, there exists a bunch of different schools of math like constructivism where Robert Harper doesn't believe in the axiom of choice. Real numbers to me are just a convenient abstraction, they work for some things and some they don't all of which is outlined in The Art of Computer Programming and Strang lectures about what to do in order to take pure math ideas like infinite sequences and represent them in a finite thing like computer memory. I personally find Wildberger's rational math interesting because he's kind of reinventing analysis completely with simple highschool math, which means there is ample opportunity for any bored anon to actually do research/discoveries, it's like you're a 17th century mathematician again. I still use real numbers and regular trig everyday where I work, I'm not a mathematician or anything so can't really say who is right and who is wrong not does it really matter they're all just models in the end.
>>
	
Doris Sivingstad - Thu, 17 Dec 2020 00:31:57 EST x6K3CZQk No.39175 Reply
>>39162
Ryan O'Donnell's youtube channel, esp his 'Theoretical CS toolkit' course where you go through the book The Nature of Computation.
In it he will show you how papers are written, like you accidentally find something and then think 'hey I could make this a paper' so you slap it together and publish, then he tells the students 'if you've always wondered while reading a paper how did this guy find this result? I would never think to do this.. this is how it's done.. by chance'.
He will also show you how to do actual applied research math techniques that generalize to all kinds of fields, meaning that you can read future papers in whatever and even decide what kind of computational aspect that new thing has.

I think you could just jump into that course and then backfill anything with his 15-251 lectures as they come up, so far I haven't had a problem in fact we will insert this into the AI meme curriculum somehow just because it's so good.

>>39163
I once used this book to fix a hibernate performance problem only because the guy in charge of that software was on vacation, I hadn't even heard of hibernate http://libgen.rs/book/index.php?md5=44F36493FF973358C228B35B117DC844

>>39169
Read Ryan Odonnell's probability notes free off his website, which we'll do soon
Take his Quantum Algorithms course on Youtube and flip through his analysis of boolean functions book
Apply to IBM as a 'Quantum Entry Level Software Developer' or Rigetti computing or the thousands of other Quantum "cloud" vendors floating around that sell access to simulators or actually allow you to run on their hardware like IBM does. Of all massive software companies I would have to say IBM is probably the best in that they have junior roles for anything, including eternal open positions for junior compiler developers. They don't pay tons of money but who cares to start, the point is to apprentice and learn everything you can until you can just go contract yourself out as independent.
>>
	
Doris Sivingstad - Thu, 17 Dec 2020 01:04:00 EST x6K3CZQk No.39176 Reply
>>39173
learnai is a somewhat terrible alpha draft of what I really want to do which is design my own curriculum and make these into youtube videos that are as brief as possible, where you learn all these things solely through competitive programming sites and math because you can do so using just a phone and nothing else. I don't think people on their own including myself are motivated enough to finish entire courses but they are motivated when they are building something or progressing in some kind of verifiable linear way that can also act as your portable 'resume', so when we do Kattis or codeforces problems your accounts there are now your resume and to me are worth way more than any kind of github filled with software because in my exp nobody ever looks at it, but everybody will look at your kattis or codeforces account for some reason.

I wasted a bunch of time using that 3blue1brown library but it's not abstract enough meaning I have to write a ton of shitty python code and have no time, however I discovered in Julia this is much easier to do because it's just a wannabe Lisp with macros, and then I discovered it's also much easier to do with Wildberger 'universal affine geometry' and his rational trig, like trivially easy, so that's where a bunch of my spare time goes lately creating visualizations for algorithms something I got into after reading that CP4 book because the author is a PhD in visualizations and has his own site for this. Somebody who has great papers on how to teach yourself anything is Prof K's brown university page, he now solely specializes in teaching computer science instead and the best way to do it and has nonstop papers about this subject everybody should read like why do people give up on curriculum? what transfers and what doesn't, why does math emphasize problem solving but not in CS etc. What do students totally forget? Myself included there's tons I forgot, basically my mind is just a library index where I know where to find something later but at least 70% of it I can't recall on command unless I'm doing it everyday.. and in competitions you're doing it weekly so you don't forget.

The learnai meme notes will also one day actually do an AI course, though I don't want to do any class assignments I want competitions in AI we can slay so I've been auditing what's out there and what is shit and what is worthwhile.

    39177>> 

>>
	
Dildo Baggins - Thu, 17 Dec 2020 01:27:42 EST Kf4OsfEW No.39177 Reply
>>39176
I did the Stat110 open from harvard, how is it compared to Ryan o Donnell's probability notes? (Or Tao's for that matter)

    39178>> 

>>
	
Doris Sivingstad - Thu, 17 Dec 2020 02:01:03 EST x6K3CZQk No.39178 Reply
1608188463144.jpg -(15719B / 15.35KB, 669x453) Thumbnail displayed, click image for full size.
>>39023 (OP)
This is everything I've found out about competitive programming doing it for a month or so everyday, looking at all the available courses/material, and watching some live competitions:

There's a ridiculous amount of 'online judges' I didn't even know about in every language you can think of, the one's I found the best are Kattis and Codeforces because they are backed by universities so no advertisements, marketing or horribly written react junk like topcoder. Every university uses Codeforces for some reason I think because it's been around forever and it has the most full coverage tests.

in practice you usually are just implementing a single data structure but in competitions you are always writing your own multi data structures meaning first queue everything then dump into some obscure tree model to search log n and finally hash the results. You are hacking the shit out of these and not writing any kind of so-called production code, it's how can I manipulate the hell out of this library which in turn teaches you about that compiler and library.

Being fast is a meme, most of the problems in modern competitions are incredibly difficult and require paper to solve and model algorithms that have just been released yesterday on arxiv before you ever touch code and even the top guys are spending hours thinking about a single problem.

OCaml seems to me anyway easier than C++, because just like CS19 you write your own data types and pattern match to victory but I can see why they don't use it in competition because of type errors though so far I've not had any. Danny Sleator the prof who first started CMU's competitive programming course orig did all the notes in OCaml like functional union-find (also taught in CS19).

There's the classic book E-Maxx algorithms that even CMU shills (the english version) but whatever you do, don't take the english version use the original Djiboutin version and google translate. They are totally different versions, whoever wrote the so-called 'translation' has injected a bunch of bullshit and the very intuitive, very simple original Djiboutin version is gone replaced by a bunch of awful notation they think explains the ideas better when they don't whatsoever. They even group the english version into artificially stupid categories that don't make sense, mixing in non-geometric algorithms into 'geometry' section and other idiocy. So far every algorithm in E-Maxx is already in The Art of Computer Programmding so for me it's a waste of time, you can just instead go on Codeforces practice or Kattis and use TAOCP as your research material.

Modelling absolutely everything w/linear algebra and doing gaussian elimination or other numerical matrix techniques solves almost everything I've found so far, as usual linear algebra is the secret CS weapon. I'm injecting Strang's matrix methods MIT course into the AI curriculum anyway so glad I did, literally almost everything can be dumped into a matrix and solved including fibonacci numbers, huge sums, etc. No more closed forms you have to memorize which are useless anyway because they use irrational numbers that will be rejected by the online judge.

Poh-Shen Loh the guy who now teaches 15-295 and the US olympiad coach claimed the best way to know math was to do old competition problems, and so far I've found the best way to know CS in general is to do competitive programming. Now I get why people do this, I should have started with this in the meme curriculum but I'm going to redo it all eventually sometime. Anyway I will start this sometime this week, depends on many chaos factors like I'm lockdown again meaning wasting time lining up for food like I'm in late 80s Djibouti, my workload increased 10x at the lab I'm at because grants for bio research is at an all time high, and a throwaway startup I made on a Chinese clone google play store accidentally exploded so I invest some time into that in hopes of selling it off, surprised how well it's doing it was dormant for months, and of course the now hundreds of feature requests coming in.

tl;dr things I just want to switch to right now:

    CMU Putnam seminar
    Competitive programming
    Strang's Matrix method course and new book which is now on libgen
    Ryan O'Donnell's probability notes
    10-701, all the above relevant to it anyway


>>39177
His notes are full of 'THIS IS A FALLACY' and 'IGNORE THIS MISLEADING NOTATION' so far they've been the best I've found but they're for a probability and computation class meaning teaching queueing theory so you can skip those lectures if you want. Tao is of course Tao so highly thorough covering the absolute foundations of probability, If you've done some intro stats try Cozma Shalizi's books: http://www.stat.cmu.edu/~cshalizi/TALR/ or just take 10-701 they kind of review probability in the first few lectures, most grad classes I find are better at that instead of undergrad where they assume you already know everything and just proceed whereas a grad class not everybody went to the same school so they don't assume.
>>
	
Mufasa Bowelman - Thu, 17 Dec 2020 13:21:15 EST Wgh5i4io No.39179 Reply
op, In the functionalcs curriculum, you have written to try microcorruption after 15-213. Do they offer a job if someone completes it?

    39184>> 

>>
	
Esther Brindleson - Thu, 17 Dec 2020 22:43:58 EST gV1WrrjB No.39180 Reply
Is it worth doing TAOCP over CLRS? TAOCP seems like it will take a very long time to finish.

    39186>> 39186>> 

>>
	
Clara Drammerwill - Tue, 22 Dec 2020 00:56:45 EST x6K3CZQk No.39184 Reply
>>39179
Not offer a job, but if you did microcorruption (it gets harder every level but if you did 15-213 and the labs you can easily do it) then you've completed part 1 of the 2 part NCC group security consultant interview. The other part is you read the web hacker's handbook and you test some vuln web app and write a report about it. If you want to do this, try MIT's 6.858 it's fully open https://css.csail.mit.edu/6.858/2020/ and you spend the whole semester attacking browsers and their zoobar website. All the lectures and the labs are open and their class VM you can download and run is also open. In one of the labs you use Reflected Cross-site Scripting to mangle your zoobar website routing with a URL filled with malicious javascript that is executed and sent back to the browser of anybody who happens upon the URL, it's a pretty good class. No reason NCC group wouldn't hire you after either doing microcorruption or the MIT class. I have no idea what it's like there at NCC but other 'security consultants' i talked to had similar tracks where they just kind of dicked around with stuff, were hired as very junior and directly apprenticed with a team for about a year being sent around to break into software F/T.
>>
	
Clara Drammerwill - Tue, 22 Dec 2020 01:59:04 EST x6K3CZQk No.39186 Reply
1608620344044.png -(135527B / 132.35KB, 399x272) Thumbnail displayed, click image for full size.
>>39180
>>39180
Although you could read TAOCP for entertainment like doing a crossword puzzle, you don't have to read these books linearly.
What you want to do is get involved in something (a competition, solving practice problems on Codeforces, building some impossible software) then you use these huge algorithms books as your exploratory reference. Like say you want to Elon Musk it up and build something which seems impossible but you want to try anyway. Now it's no longer a chore or tedious task to read through them or browse through google scholar looking at papers, like you're being forced to do so with no motivation, instead you are flipping through them trying to find the best solution so when you go through the mathematical properties of all trees in Knuth's book it's not just another boring lecture you have to force yourself to sit through, you're finding creative ways to manipulate tree shaped data that you want to use for your impossible project or codeforces challenge.

For example while doing some AI meme workshop content I discovered that 90% of it is relevant to quant finance, esp that MIT parallel 'scientific machine learning' course where you do stochastic calculus, they even have a book for julia quant modelling shilled in the course https://julia.quantecon.org/_downloads/pdf/quantitative_economics_with_julia.pdf so naturally it would be better to do that workshop as a competition/challenge like https://numer.ai/ which is a meme but still enough motivation to actually dig through all those lectures on machine learning or other competition. So tl;dr try to get involved with something where you end up using the algorithms in CLRS/TAOCP instead of just taking it like a linear class or you will end up non motivated and just give up in my exp.
I'm not a big proponent on 'just enough background' which is why I abruptly ended the math workshop and the rest we will just fill in later as we do other things, never try and preload it all up front you'll just begin to hate it.

    39188>> 

>>
	
Clara Drammerwill - Tue, 22 Dec 2020 02:44:54 EST x6K3CZQk No.39187 Reply
>>39023 (OP)
Since this is 420chan I did some research around the current state of legal weed software, because of COVID a lot of regulations were relaxed, like for a while you couldn't even have a legal online menu due to regulations.
All of the software is a joke. Any anon here that completed CS19 can write better software.
The current big one is Dutchie, it's only unique offering is 'regulatory compliance' meaning you click a button and can limit purchase amounts to satisfy state/country regulations, and there is a pickup option that interfaces with various weed only POS libraries that any of you can write yourself. They use these high risk/fee POS because of various federal and whatever other banking laws where they avoid dispensaries but this is something you would want to just have as a module, so anybody can plugin their Stripe POS or whatever, since I noticed a lot of that going on, using unauth POS in the actual dispensary and just manually entering in the price. With a modularized (think OCaml/SML) you can effortlessly write this to be plug and play for new POS systems your functor parametrizes the new module using 90% of the old code without you needing to write more, anyway that's how I used to write this kind of software.

There is absolutely no refinement for the search, legal weed should be organizable by terpenes and cannabinoids to be searchable, using an algorithm to identify similar constructions in other strains so you can have real recommendations. None of this is offered by dutchie of course it's just a boring foodora clone. It also seems to try and reinvent inventory and other things that are already solved by existing 3rd party software you would not want to rewrite like Quickbooks or even Excel, which most of these dispensaries want to use since they are already used to that software. So some kind of glue of 3rd party software and filling in the blanks of what they don't cover that is specific to the legal dope industry.

There still is no auction software for dispensaries, I don't see why they can't legally run auctions then collect and pay, or have only dispensary owners auction with other owners to offload excess stock, and Phoenix/Elixir is perfect for something like this, no joke there is a paper on google scholar telling you how to exactly implement such an auction, or JS's incr-dom framework too if you know OCaml, very easy to write something that looks exactly like the main page of dealdash or similar live updated sites. You would prepay some kind of memecoin abstraction in order to sell the 'bid packs' to avoid false bids. By abstraction I mean the backbone of the scheme is memecoins but the person involved in bidding never knows this, they only have the option to transfer/sell their bids to other users and hand over money at the dispensary you abstract the whole complexity of whatever memecoin you use away because people don't care and don't want to know the details, it needs to be Elon Musk tier: everything technical is abstracted away from the end user.

Delivery this is also a solved problem with a lot of existing software, no reason to reinvent that but if you did it's often just a simple queue, driver 1 goes to the back and driver 2 gets the next order. Uber and Foodora like companies use a kind of area select system where if you are in that area you can choose or not to select a pickup however legal dispensaries are very much like illegal drug lines where there are stash houses all over the city and the closest one just grabs and goes, resupplying their safe house later. Again this is a module in OCaml, the delivery module instead of pick up you have a generalized module that you can tweak with functors in order to accomodate whatever specific delivery settings they want for their dispenary.

POS order entry for 'budtenders' is all trash, usually some ipad that is buggy as f. A better solution would be to find a free existing POS system and reinterpret the orders like you would interpret a language, then you don't even need to modify their software. This is what I used to do at my little shady kiosk where we sold the shady modified phones and it worked perfectly. There should also be a way for dispensaries to trade stock with each other in the software, each one you sell your scheme to has access to the seller tier where they can auction/buy/trade stock off each other. You would also want to fill it with analytics, a trivial task if you take the AI meme workshop in a few days when we start it.

To bootstrap this you need somebody in that market to sell your software so you simply cut a 50/50 deal with them and they do all the leg work convincing people they know in the industry to use you instead of dutchie. Major problem here is support, which will have to be superior to dutchie and that's where all their investment startup cash went so of course this is the biggest problem to taking over the industry and unsolved, figure out how to do that and you win. My suggestion would be to pawn it off on the person you partner with in that region who sells your software, make them responsible for live support so you have a filter and only have to deal with 3-4 reps, that's exactly what I did when I sold the phones I had guys embedded with crews who knew them and then relayed me the problems to fix and it worked fine because they were already used to dealing with just him, and preferred to do so. Because of the generous income split it worked out they were more than willing to be the best support reps. I've always been a big fan of splitting up all the income to make your life easier and offload responsibility so you can continue to be a one-person software kingpin. If they're making the kind of money you are making they will be more inclined to step it up and go above and beyond, anyway I'm surprised no anons are doing this, it's a wide open field.

Finally hosting, with supreme meme languages like OCaml or Julia you can just produce a binary and they can run this on their own server of choice (some dispensaries actually need in house hosting in some districts) or you can just generate the html to static CDNs giving the Wildberger illusion of dynamic menu order, or start like WhatsApp did and Netflix with FreeBSD colocation hosting. This is where you would get it into TAOCP and other algorithm texts to derive ways to have the most efficient html generation or simply have a node.js standard CDN and pay for it.

Reason why I don't do this is because I ended up totally involved in something else but there's money and opportunity being left on the table with these sad excuses for software companies like leafly or dutchie that are monopolizing everything. As pg wrote a good rundown of your competition is to look at their careers page and see what they're using, Look for yourself. Can you do better? Can you overlay a graph on a city area, and optimize that graph to discover the most efficient driver pickup and delivery with respect to dividing areas so they too maximize their income? Can you do that? You will smash these shitty companies anons and their buffoon executives collecting millions in venture capita

    39380>> 

>>
	
Clara Drammerwill - Tue, 22 Dec 2020 02:55:56 EST x6K3CZQk No.39188 Reply
>>39186
So many spelling mistakes in my shitposts because i'm on a subway typing on a phone, that should read I'm NOW a big proponent of 'just enough background'.

Anon's who don't want to wait for me because I've been slow for months, they can take 10-701 themselves with that math for ml book I link in the landing page, it's all wildberger linear algebra just a little more abstract with tons of notation but nothing is different whatsoever.. in other words you already know this.

    39190>> 

>>
	
Graham Tillingman - Tue, 22 Dec 2020 19:56:05 EST fXQjFEc7 No.39190 Reply
>>39188
For retards such as myself, can you give some examples of projects that are in the sweetspot of being close to entry level, but still impressive enough pursue that you can put it on a resume and be offered non meme jobs (data entry etc)

In other words, if I finish the PAPL course, what would be an interesting enough idea to implement that would utilize what I learn from that course, that also looks impressive?

    39192>> 

>>
	
Edwin Fottingbitch - Thu, 24 Dec 2020 00:12:18 EST x6K3CZQk No.39192 Reply
1608786738130.jpg -(70646B / 68.99KB, 482x676) Thumbnail displayed, click image for full size.
>>39190
First I think ppl underestimate cs19, when Prof K says you are 'done' in the last lecture you actually are done meaning you have the basic toolset now to make whatever you want . Where I worked nobody knew about dynamic programming, or even how to program a continued fraction stream all things taught in cs19 (streams come back when you do machine learning.. a continuous function that acts as a relation from one infinite set to another... how do you program this? Exactly how prof K taught you)

If you want a job as fast as possible, find some open source project, learn it, produce commits and get them reviewed and accepted. That is the fastest way to get hired anywhere... you had 3-4 PRs accepted in 3 months? You're hired. This says you can work with other people, you can learn software and read documentation, and even better you can be productive actually contributing features.

Of course you still should make your own software just because why would learn all this otherwise, and I personally think you should pick the hardest thing you want to make or always wanted to make and try and make it happen, see what happens. That to me is more impressive than 'i made this tic tac toe app and here it is' because it means you spend a lot of time researching, a lot of time doing trial and error programming, and your experience bucket gets filled so when they ask you to do something stupid like make an actual tic tac toe app you can easily do so because you've already spent a month or more hacking away at your totally insane project.

here's an idea: nobody has a non-shit youtube app ad filter. What about just a single youtube filter that removes ads on devices, and does nothing else? How would you build that so you don't have to invest any money at all. Can you script such a thing to be automated like I download an app of google playstore and click install and the filter just works? How does adtech work like how can you redirect or block these ads without having to invest in running your own servers or rent AWS or w/e? Is this possible to do? If it is possible how much do you think people would pay for this and where can you find out about software payment metrics anyway like what are people actually buying off the app stores? Should you edit the phone or sell them pipeline that blocks this traffic like a VPN but totally automated and abstracted away so they have no idea what is going on it's just install this app and magically youtube ads disappear from your device. If you did this how much do you think google would pay you to allow certain ads or buy your company? Anyway that would be by line of thinking for something like this: find an urgent need, try and do it yourself you'd be surprised how far you get maybe you even succeed.

Never set the bar low where it has to be 'entry level', you're already beyond entry level just don't realize this because you haven't tried to build something yet

    39193>> 39196>> 39197>> 39200>> 

>>
	
Eugene Pockridge - Thu, 24 Dec 2020 02:09:32 EST wBYj+M1L No.39193 Reply
>>39192
OP, I know you recommend Tao's Analysis as a starting point for learning pure/proof-based maths. I know it starts from the very basic. But I think it goes against your other mantra that you shouldn't learn prerequisites just because it is required. I maybe getting it wrong.

I want to learn proof writing. I want to learn it real bad to get into the wonderful world of mathematics. I also want to learn computational math. Not just rote math. I know Analysis is a good starting point to that. But the problem with me is that Tao seems to be a bit dry to me and too many symbols. Are there any alternative paths or books? By paths I mean not starting with Analysis.

    39203>> 

>>
	
Graham Simmerstock - Fri, 25 Dec 2020 17:54:25 EST MmoLooUZ No.39194 Reply
Any resources for physics?

    39204>> 

>>
	
Josiah Davenposh - Sun, 27 Dec 2020 03:18:39 EST UtjCv9TQ No.39196 Reply
>>39192
Hello Op, i have been reading your posts and i have learned a lot from them. i'm a third worlder who will soon be studying computer science in canada. one of my first year courses is a java course (I don't know why it is shilled in almost all colleges) so i was wondering if you know any resource i can start studying so that i can be ahead of my class and have more free time to study the meme curriculum because i believe it could help me get an internship faster than what i am learning in my first year. i saw the javahypertext resource you recommended in the previous thread but i'm not sure if that course is really for a beginner.

speaking of internships, do you have any experience or know anybody that immigrated to the US? i ask because my career goal, at least after college, is to become a quant. i don't want to work for FAGMAN because their jobs(software developers) seems boring to me, and quant jobs seem more interesting. back to my question, i know that getting a green card in the us is super hard, although it may be easier now because of biden. i believe that after my undergrad in canada i could possbily get permanent residence in canada and i don;t think canada has any of the hedge fund outfits i was looking forward to applying to(citadel, jane street e.t.c) So what do you recommend? should i do my undergrad in canada, then do a masters in a top accredited university like Uwaterloo, and apply for a phd in a top school in the US? i think it is slightly easier to get a green card in the US if you hold a Phd .i'm not sure though. or if you have any experience in canada, do you know any good hedge fund outfit there? or any province with a good hedge fund outfit? Do you know anybody who has had this experience? Thank, you!

    39197>> 39197>> 39205>> 39206>> 

>>
	
Josiah Davenposh - Sun, 27 Dec 2020 03:24:52 EST UtjCv9TQ No.39197 Reply
>>39196>>39196
>>39192

and what would you say that somebody who wants to follow your meme curriculum, and has little to zero experience in programming, and hasn't taken calculus before should focus on if they are looking for an internship within 1-2 years into their undergrad degree? and if they want to make some money on the side while they are in school (international students can only work 20 hours a week in canada).
>>
	
Hugh Tootman - Tue, 29 Dec 2020 09:23:54 EST wBYj+M1L No.39200 Reply
>>39192
OP, can you update the 15-251 part of the curriculum. All the homeworks seem to be paywalled. If you have them archived can you kindly share them?

    39202>> 

>>
	
Jack Hozzlewut - Wed, 30 Dec 2020 22:50:20 EST x6K3CZQk No.39202 Reply
>>39200
https://www.anilada.com/courses/15251f17/www/notes.html I only ever used these notes/solutions. Indeed I should update that part, also there are more lectures on panopto too that aren't on the youtube playlist Ryan O'Donnell includes mainly complexity theory talks/proofs. Reminder the proofs are purposely difficult in 15-251 he even has a lecture about how it took him 2 hours to finish one and he teaches the course. When I did it I just did them like I normally do 'does this logically work?' if so good enough I'm not a mathematician, another reason why we are doing the Putnam seminar/book because I suck at proofs like most everybody else.

    39207>> 

>>
	
Jack Hozzlewut - Wed, 30 Dec 2020 23:06:57 EST x6K3CZQk No.39203 Reply
>>39193
True I think prereqs don't actually exist, in fact we'll see this in the AI curriculum when it finally starts Jan 1. Tao's Analysis was written for senior undergrads who already finished calculus, so even though it appears to start at the very beginning Tao assumes you're already a competent math student, so much so that you're enrolled in his honors analysis course which is what the set of notes were originally for. I in fact bamboozled readers into thinking they were doing 'easy' material when it is in fact not easy whatsoever even though Tao has written all the proofs in those books to be as easy to follow as possible, so there's no fancy tricks you would read in Rudin's books or Pugh or any other analysis text.

I had to include it because this is actually a machine learning curriculum eventually, and one of the first things we'll see is a cauchy sequence, closed intervals, measure theory, all Tao stuff in some of the papers we'll do. This is where the reader becomes surprised they already know all this and just didn't realize it. I too hate analysis anon and find it tedious taking epsilon sized measurements of the real line, if you want to know computational math take linear algebra and you can learn proofs in any linear algebra book, such as the classic Hoffman and Kunze book (spelling? on a phone can't check). The meme ai course will do an absolute ton of it very soon and all of it you can just program. You can program calculus too of course: https://juliahub.com/docs/CalculusWithJulia/AZHbv/0.0.5/ or there's multiple python Numpy tutorials and books floating around to program calculus. You can also watch Wildberger's calculus lectures and write all the libraries yourself from scratch, and write all the proofs he gives as exercises (from what I've tried so far).
>>
	
Jack Hozzlewut - Wed, 30 Dec 2020 23:20:47 EST x6K3CZQk No.39204 Reply
>>39194
Yes, the original meme curriculum https://webspace.science.uu.nl/~gadda001/goodtheorist/index.html which I based mine off of, this professor was tired of people writing him nonsense, so he created a curriculum they could teach themselves theoretical physics. You can also take Ryan Odonnell's quantum information theory lectures, you literally build and analyze quantum algorithms and there is a huge demand for this right now.

The meme AI curriculum will eventually do Neural ODE's, so full understanding of this course https://mitmath.github.io/18337/ and another. You model nature with these and silly things like financial time series, in fact the AI meme curriculum will end up a quantitative finance curriculum just because there's so much overlap between ML and quant we may as well do both, and we can actively practice time series simulation in competitions that Two Sigma/JS run on a regular basis so why not.
>>
	
Jack Hozzlewut - Wed, 30 Dec 2020 23:36:56 EST x6K3CZQk No.39205 Reply
>>39196
We're doing quant stuff in the ai meme curriculum soon.
https://julia.quantecon.org/ then learning stochastic differential eq on models (of course we do not have access to the proprietary data that funds have, we can only play around and see what happens, and learn a ton of probability/random matrix theory).

You can get Canadian citizenship easily if you go to school there, that's where I was when I first wrote this curriculum. The way it works is somebody agrees to hire you and then a few years later you get a passport. There are also a ton of banks in Toronto or Montreal that will hire you to be a quant, that all have US and HK offices, and jane street hires canadians all the time magically granting them US greencard somehow the incr-dom girl was originally a Toronto resident IIRC. I personally don't know anything about hedge funds really, the place I worked at in HK was like jane street so arbitrage on the HK exchange, with some chaos betting on the Shanghai stock exchange which was kind of fun because it doesn't act like any other exchange since there are like no rules whatsoever so we essentially traded on insider information buying up hundreds of shady data feeds like Gordon Gecko from Wallstreet the movie. Anything goes in China, imagine 4 trillion being traded and no rule enforcement at all except for those who fall out of favor with Beijing so get targeted. It's 100% 1980s wallstreet or 1980s Canadian stock exchange which was shut down it was so free-for-all https://en.wikipedia.org/wiki/Vancouver_Stock_Exchange

If you want to be a quant you ask everybody at your university how to do so, you form a group with other students to study and practice on some bullshit like numer.ai or the JS challenge currently going right now on famous google data science site (blocked word). Anyway java recommendations next post this is too long already
>>
	
Jack Hozzlewut - Thu, 31 Dec 2020 00:24:04 EST x6K3CZQk No.39206 Reply
>>39196
This is all I know about quant finance, having seeing it in HK but I was just a manager pleb there in charge of hiring they removed me from optimizing a literal firehose of (at the start) about 100 proprietary incoming data feeds after my first few months and insisted I train other people what i knew because nobody else could do it. We're talking about terrabytes of data, much of it is real-time like tick data or just dumped end of trading day and you have to have it ready within minutes for the quants that want it. What they did at a high level was just find a signal in that data, build a model that tested their hypothesis of said signal, then backtest it over historical trading data. If it remotely worked out as promising they would figure out the probability in their heads (how I have no idea) excatly how much to "bet" on this signal and then boom it'd be dropped in the trading queue and traded until.. somebody else learned the strategy and copied it which reduced the profits then reset and do everything all over again: find proprietary data feed, find signal, backtest, dump on market and profit until you can't. I never found out how competing firms could figure out their strategies so fast which is why I'm not a quant. All of this is definitely interesting and can be run as a test as you learn, the guy's who handle billions of dollars for a second of trades is the kind of thing you would have to apprentice for working as a quant somewhere where they teach you these things. My guess is new quants are in charge of finding the signal, writing all the code to backtest and deploy, then a senior quant is there to tell them how the competition already discovered their strategy and now they need a new one immediately because you eat what you kill, your bonus is entirely dependent on a successful run and the more money you make the bigger it is, I witnessed some frenchman quant get paid out the equivalent of a million dollars in a single day. I'm going to assume that's not a daily occurence but I wasn't around them all that often because they propelled me into eventually managing all the hiring in numerous countries so I had no time. Totally insane world of model building on the fly.. rolling the dice and cashing out anyway we will learn some of this.

This is actually helpful for 'the market', as a quant your task is to compare prices of two things, determine that other thing should be priced like other thing, run a bet and start trading (making money) until that inefficiency is corrected then you've balanced the market. I think most people can do this there is no magic involved, there is a process, there is models, there are signals to find in noisy data, there is nuts to grab when your position nose dives but you're confident your hypothesis is still correct but I'm just an amateur that worked with these guys, I've never done anything remotely close to it but won't stop us from learning much of what they do and maybe even jumping head first into glory or ultimate failure.

Java MIT prob has the best course http://web.mit.edu/6.031/www/fa20/
Followed by Cornell with their hypertext book on invariants https://www.cs.cornell.edu/courses/cs2110/2017fa/online/definitions.html (click the annoying beard icons, you get a youtube lecture)
Java is literally everywhere, though I would personally hate to actually program in it F/T it would be a nightmare of complexity but people enjoy it and make a very good living doing so, everything you learn there applies to all other software engineering too so may as well make the best of it and bleed your TAs and prof for all information possible. Reminder that elastic search hires remote anywhere on earth and will pay a very good java programmer who knows the 'elk stack' a ton of money ($100k USD) to just be a simple support engineer and answer tickets to their database abstraction. Well the used to, not sure what that going rate is now.
If you want a visual of java try this: https://www.edx.org/micromasters/ubcx-software-development it's run by UBC (canadian university) and it's one of the best descriptions of objects and annoying things like 'this' keyword I've seen for java (aliasing). I actually did most of that course to test it out for the meme curriculum but I hate Java so much I abandoned it, I still think using ML-style modules is the most easiest way for an independent programmer to make a gigantic piece of software and actually understand everything they wrote, and be able to maintain it themselves.

tl;dr good luck anon, again ask everybody in your university you can find including professors 'how do I become a quant' and when they tell you make a study group, you and other students all in the student union building trying to tune your own models, to me that's the point of going to university to work with other students.
>>
	
Fucking Porryhire - Thu, 31 Dec 2020 00:32:05 EST arSXV0N5 No.39207 Reply
>>39202
How to search for open videos on panopto? Is there any way?

    39208>> 39209>> 

>>
	
Jack Hozzlewut - Thu, 31 Dec 2020 01:17:47 EST x6K3CZQk No.39208 Reply
>>39207
Mainpulate their 'Podcast.ashx' if you can get it, or just use google history.
For example here's a 15-251 lecture not on Ryan Odonnell's youtube: https://d2y36twrtb17ty.cloudfront.net/sessions/ae5a4168-58c8-48c2-8cfc-dbb47581f9f3/0fe8eaab-0ae4-4b86-a31c-5fb307c90b3f-36808785-3577-446e-8e25-b65ef5841909.mp4?invocationId=b64ace7f-2f4b-eb11-8283-12b1cb861383

I have all of these btw, I'll just upload what O'Donnell's youtube channel doesn't include and make it a torrent. Otherwise searching panopto I've never tried, I just looked for the RSS/podcast links and grabbed those to get the rest.

Also btw, if you ask Ryan O'Donnell he will give these all to you he's like that
>>
	
Jack Hozzlewut - Thu, 31 Dec 2020 01:30:06 EST x6K3CZQk No.39209 Reply
>>39207
Actually anon here's the whole course:
https://pastebin.com/984YQJRc

    39212>> 39219>> 

>>
	
Walter Gablingwin - Thu, 31 Dec 2020 15:33:37 EST NrSmkjTk No.39212 Reply
>>39209
OP I am working through the basic math cirriculum, but I still feel a bit scared that highschool level problems are not being done. I can understand this skip for the higher levels, but what classic pre calc resources would you suggest to build up more rigor. I think doing both at the same time would be very benificial.

    39213>> 39214>> 

>>
	
Walter Gablingwin - Thu, 31 Dec 2020 15:41:48 EST NrSmkjTk No.39213 Reply
>>39212
Samefagging to say that I am an idiot. I get your perspective now. Rather than work bottom up we work top down, and if needs be we can attempt any classic pre calc tome to refine problem solving. This way we develop a much better understanding becasue we struggle with the material more. Still, if you were to suggest a giant book to get better from toddler to college level math, for problem solving purposes, would you have a particular resource in mind, just to have it handy.
>>
	
Sophie Chillybanks - Fri, 01 Jan 2021 02:17:23 EST x6K3CZQk No.39214 Reply
>>39212
When you do the Putnam seminar you will pick up this math on your own, that's why Poh-Shen Loh shills doing math problems (and competitive programming too) because it's the best way to fill in all the blanks.
For example the first CMU Putnam lecture, in one of the psets the topic of continuous functions come up. That's the chapter in Tao's book we bailed on, so now we have to go back and read that chapter to solve that problem, otherwise you are highly unlikely to read that chapter yourself... it's too far into the book, at that point you're just ready to give up not seeing any point in finishing some analysis book, but a challenge through problems and you might. When you're done the problem you did far more than just that chapter in Tao's book, you also learned a new strategy how to solve math problems. 2 for 1. Human nature is to thrive through competition and always has, famous mathematician Hardy only ever got into math because he discovered he could beat other students at his school, so I have changed everything to be competitive because that's who we are by nature if you read the ancient greek/roman plays and philosophers. It will annoy you as a human to not be able to finish something, it persists in your mind all day until you finally figure it out but there needs to be a significant prize at the end too either personal or 'virtuous' (curing cancer with all those obscure ODE models we do in AI) or financial statis or for fame. All of us are wired like this so the attempt of the meme curriculum 2.0 is to capitalize and harness this motivation method turning everything into a challenge to be solved where at the end you get benefits both personal and artificial like money.

The programming workshop in 2021 will be entirely rewritten for the same thing, in order to just have to work on a single problem daily which in turn teaches you many topics all at the same time as you try and solve it, but this time you researched yourself you didn't just passively watch and do exercises which seemingly have no meaning while you linearly do them, because through the competitive lens definitely has meaning. The AI workshop will be take paper and then find out how it worked, see how it worked, translate to algorithm. Do this enough and you can just go on any AI marketplace now and translate these papers to dollars something as a previously poverty anon I have full experience with. You also now can write your own paper. Nobody will believe it but when you watch that Ryan O'donnell TCS theory toolkit lecture about it you'll realize wait, I can write these too.

Since my background is cringe hacker I have used classic Mitnick techniques to spread myself into a lot of industry just to soak up intel, I consider this 'ethical' since I'm just trying to get other anons into these famous places. I don't consider working there some kind of ultimate goal or anything, I consider it an opportunity to learn from people who know way more than we do (ie: an apprentice) and get paid that's all. I expect anons to game their internal systems immediately or depart so they can independently contract or be rich enough they don't need to work and can actually solve the problems of humanity like going into biotech research like I did despite not having any kind of medical background because you don't need it, it's all just the nature of computation, so if you want to do what I do on my weekends which is run simulations of treatments for supposedly incurable illnesses you can under a real doctor's supervision, you don't need a degree or formal granting for you to do any of this work as I have none myself. The point is the real doctor includes your name with his when he writes that journal article and you move around with him curing diseases or whatever it is you want to leave your mark on this finite timescape, that's what I managed to do so can anybody else. I'd also like to see some anon's get into Jump Trading doing some crazy quant models on the Shanghai stock exchange without any kind of formal degree it's possible.

    39216>> 39217>> 39218>> 

>>
	
Lydia Nemmerdedging - Fri, 01 Jan 2021 08:14:19 EST wBYj+M1L No.39216 Reply
>>39214
The Putnam seminar sites only have lecture notes and the notes are only problems with no solutions. How to proceed? Am I missing something?
>>
	
hangla - Fri, 01 Jan 2021 08:35:59 EST wBYj+M1L No.39217 Reply
>>39214
BTW, does this mean you are ditching all previous courses like CS19 and 15-151/251 where you learn the absolute basics? I mean before attempting competitive programming a person doesn't need to know about basic programming constructs? I am talking about a newbie.
>>
	
Batman - Fri, 01 Jan 2021 09:39:00 EST wBYj+M1L No.39218 Reply
>>39214
OP, 15-151 course webpage has three books listed. Infinite Descent is the primary read. There is another problem-solving book.
There is another free book written by some CMU grad student along with Prof Mackey, which you also list in the curriculum.

Among these three which is/are the best to start with? Infinite Descent has the maximum breadth it seems.

    39223>> 

>>
	
Shit Drellerfetch - Fri, 01 Jan 2021 20:45:29 EST D57IUT9v No.39219 Reply
1609551929367.jpg -(68027B / 66.43KB, 718x317) Thumbnail displayed, click image for full size.
>>39209
Watching it and it's quite interesting, is it a part of your curriculum? Which one of them?
>>
	
Graham Nablinghodge - Sat, 02 Jan 2021 09:01:21 EST kgv30QZT No.39221 Reply
I noticed that you deleted the Julia based MIT courses from the AI tripos. What's your plan for this year? 10-601?

    39222>> 39223>> 

>>
	
Batman - Sun, 03 Jan 2021 07:58:16 EST wBYj+M1L No.39222 Reply
>>39221
One request to OP. Please don't delete links to courses when you update the curriculum. If possible please create an archive section where you dump all the discarded courses for whatever reason.
>>
	
Edward Pandlebanks - Sun, 03 Jan 2021 16:15:16 EST x6K3CZQk No.39223 Reply
Here anons is the official solutions for all the cs19 assignments: https://arxiv.org/pdf/2010.16305.pdf meaning what they tested and graded for during the last 5 years of the course. If you are already pretty proficient at Pyret you don't actually need to finish all the assignments, instead you can now read the writeups and just write a specification on a piece of paper then check your answers, this is what they are trying to teach anyway. Reminder that Prof K's school page is filled with papers about the students who take this course so he directly talks to you telling you exactly what you should know and what 'metacognitive' shortcomings all students have when they first take the course, they even analyze when students click Run in the interpreter to see how many lines of code they changed before running.

>>39218
The putnam seminar we do will cover all of Infinite Descent but we will learn competition strategies and see the solutions. I consider working through a few chapters of Tao's book, and reading his appendix on logic the equivalent to doing infinite descent meaning what they are trying to teach is pure math proofs to compsci students and once you see enough and write enough proofs in Tao's book you're at that good enough level you can easily work through 15-251 or w/e CMU has to offer with 15-127 as a prereq. You could also just read the beginning chapters of TAOCP and get the same material.

>>39221
You can use git commit history to get anything I deleted but all of those courses we will do and more just not in a linear way because forcing anons to do incremental lectures for things they don't care about is what every other curriculum does. The idea is reducing everything to just a daily problem we can figure out with the least amount of prep meaning hopefully short lectures, short chapters. One day solve a graph problem on Kattis, next day prove some property about a programming language, next day prove some property of computation in theoretical cs. The meme curriculum should be pick up device: do minimal prep, solve something and go about your day because nobody is going to sit through these huge courses unless forced to ie: they paid tuition, and we don't have 4 years to do this. They may dig through those courses to find solutions to a specific problem though.

    programming workshop thinghy: Enough cs19 material so we know memory mutation, basic programming, then go into competitive programming using the rest of the cs19 lectures to teach us graphs and dynamic programming. While we do that I will go through Robert Harper's pfpl book because it's like Tao's book for math, and easier than it looks once you try it. If you ever wanted a single book that taught you every programming language that ever existed or will probably exist, this is it including OOP style, logic programming, everything. The exercises there are supremely challenging and just get thrown in with the daily competitive programming challenges. Same time we start Ryan Odonnell's theoretical CS lectures and the book Nature of Computation. If you ever wanted a single book that taught you everything there is to know about computation it's that book. When we exhaust CS19 resources and need more in depth resources to finish Kattis problems we have 15-251 lectures and notes, TAOCP and 15-451 lectures to try. This sounds like a lot but again, reduced to a single problem a day.
    math workshop thinghy: The Putnam and Beyond book has full solutions for every single problem, the Poh-Shen Loh lectures he goes through a few in lecture. He claims this is the best way to learn math, reducing everything to a problem to solve because it will require using multiple sources so you increase your knowledge gain exponentially as he puts it. Again just a problem a day or every other day, whenever you want to do it.
    AI workshop thinghy: Self-directed learning, take whatever you want. Learning how julia works with some of those MIT lectures/notes so we can use R or Python libraries to build any kind of model. Watch some 10-601 lectures and 10-701 lectures. Watch some strang 18.065 matrix methods lectures, I will probably end up doing his whole book as we refer to chapters while figuring out other stuff. Using that mml-book "Mathematics for Machine Learning" for reference. Going through some of depthfirstlearning a site where they build whole curriculums in machine learning around a single paper since this is what you do in AI: read paper, implement it, think of ways you can make it better. Jane street funded some of these curriculums, like the one on random matrices and lucky for us Tao has a whole book about random matrices we can flip through. Now the 10-701/601 lectures are optional so we can understand those papers. There's one paper in depthfirstlearning about Neural ODE's, and this is where that second Julia course from MIT 'scientific machine learning' comes in as they also teach how to build and optimize differential solvers/neural networks. At this point you're also doing quant finance so we'll try some. It'd be interesting to read the game solving papers there too so we can enter some yearly competition: https://halite.io/ and learn about autonomous agents (bots) which to me is what real AI should be some kind of program that teaches itself and is totally autonomous. All of this won't take as long as it sounds, the hard part was beginning w/math and programming, this part is just reading and building our own models, no assignments and totally self-directed learning. We have Sussman's papers on the failure of modern AI to read too, these are really interesting.


In March, Sussman has a new book out about a completely different style of programming: symbolic computation, since we know Julia and lisp macros we can do it. It covers automatic differentiation and other AI topics we'll learn from the MIT scientific AI course. What's the point of doing this? So you anons can go ahead and invent general AI escaping the confines of traditional programming. I look forward to living under your hopefully benevolent AI god you create with this workshop.

    39224>> 39225>> 39226>> 39227>> 

>>
	
Matilda Fillykin - Sun, 03 Jan 2021 18:05:37 EST stsruH4L No.39224 Reply
>>39223

Isn't symbolic programming the whole basis of Wolfram Language, what powers his mathematica? That was the basis for AI companies in the 80s IIRC.

    39237>> 

>>
	
Ozymandias Stark - Sun, 03 Jan 2021 22:37:04 EST UtjCv9TQ No.39225 Reply
>>39223
OP, when are you going to start the "topics in artificial intelligence" part of the AI workshop? is it still this month?
>>
	
Nicholas Sublingridge - Mon, 04 Jan 2021 02:29:55 EST wBYj+M1L No.39226 Reply
>>39223
OP, is the MIT Scientific ML course a combo of ML and the 15-210 style of parallel algorithm writing? I see in the new workshops you are discarding(or not talking about) 15-150 or 15-210 at all. You are considering CS19 as the ONE and all.
>>
	
Nicholas Sublingridge - Mon, 04 Jan 2021 11:12:53 EST wBYj+M1L No.39227 Reply
>>39223
OP, if I may, I see that in the revamped workshop you are not talking about system courses like 15-213 / MIT 6.004 or the OS and compiler building courses. Is there any specific reason behind that? Curious.

    39238>> 

>>
	
Reuben Dettingdale - Tue, 05 Jan 2021 21:38:11 EST zAErrtRB No.39234 Reply
OP do you think Actuary is a good alternative for quant finance jobs here in this third world shithole (Philippines)?
Quant finance seems nonexistent here and the only available jobs (software) do not interest me that much.
>>
	
Caroline Checklekotch - Fri, 08 Jan 2021 00:35:03 EST x6K3CZQk No.39237 Reply
>>39224
Read Sussman's essay https://ocw.aprende.org/courses/electrical-engineering-and-computer-science/6-945-adventures-in-advanced-symbolic-programming-spring-2009/readings/MIT6_945s09_read01_robust.pdf he's been promoting symbolic programming for 'real AI' for a long time now because it accurately models how bio systems work. Sussman is totally against the entire computer science curriculum claiming proofs of programs is the problem for a true fault tolerant system like the human body, instead maximum generics should be employed until the proofs are self-evident. So tl;dr extreme abstract programming building a super system that can extend itself and it will be correct because proofs won't be needed. Crazy read, I imagine his whole new book is like this which is why I want to take it. This will be the 'general AI' curriculum seeing what kinds of unthinkably complex yet 'correct' things are possible. Anyway I highly recommend that pdf if you want to read about crazy shit, like a language that can magically extend itself into 'new algebras' not anticipated by the designer.
>>
	
Caroline Checklekotch - Fri, 08 Jan 2021 01:14:08 EST x6K3CZQk No.39238 Reply
>>39227
This is an AI workshop so if those things come up I'll do them otherwise any anon can figure it out after cs19. I kind of want to do MIT's Xv6 book to prove you can learn operating systems on a phone so I will likely shove it in somewhere, it really is the best way to learn these things. Reminder CMU's o/s course just teaches you 32bit because it gets so complex and complicated (have you read the Intel massive pdf) that unless you want to specialize in these things all you need to know is how to manipulate the o/s from a programmer's perspective, much like how 15-213 teaches. Compilers I don't know enough about either, but again beyond the intro courses it's a research project you would take on yourself and I chose to do AI, so not many compiler topics will come up however Prof K teaches a ton of it in the rest of PAPL and his cs173 course which is totally open including lectures if you look at plai.org. If you wait a few months he will update plai.org with the latest version of the course complete with new lectures. In the programming meme curriculum we will do Robert Harper's book, and the rest of PAPL beyond cs19 so language theory things and it will be definitely interesting but not as in depth as cs173 and Prof K's secondary plai.org material. Programming language research is pretty awesome though, that's how he came up with Pyret in the first place a Racket/Lisp that has matlab/Python like syntax but is conceptually simple and.... runs in a web interpreter. If you are interested in this there are 2 cs19 lectures about PL research he talks about to students you should watch.

    >39234

For sure there are quants there just it's probably called something else, and actuary is also a similar kind of field you're still analyzing risk and building models. You should not think about money and do what you want to do, the money comes later if you're good at it. When I walked around Manilla and Bonifacio I noticed a million vendors and no link between them, there should be an 'interactive business guide' kind of like Elon Musk's first startup but connecting these little market vendors everywhere. Forget what everybody else has done and make your own, I kind of did the same that's my little side startup that is now taking off in China of all places.

    39241>> 

>>
	
Caroline Checklekotch - Fri, 08 Jan 2021 01:22:18 EST x6K3CZQk No.39239 Reply
>>39023 (OP)
The AI workshop has started, 10-701 profs inform us the following things are obsolete:

    kernels
    convex optimization
    anything that isn't a neural network because there was a breakthrough and now it's all about neural networks


We actually picked the perfect time to learn Machine Learning/Deep Learning. Reminder we also have markets for AI algorithms, one of the motivations for depth first learning is to learn how to learn papers, so we can translate these to working algorithms and sell them on these marketplaces. I'll prob try to do this in the meme workshop. The ML workshop is different from the other 2, they were generalist courses in this workshop we need to know everything there is to know about current AI because we want to design our own. I don't know about you but I'm not satisfied with just implementing the algorithms, I want to make my own.

    39240>> 39244>> 39252>> 39357>> 

>>
	
Albert Puvingmine - Fri, 08 Jan 2021 01:44:54 EST 0CxFBQc5 No.39240 Reply
>>39239
OP would you recommend doing cs019/PAPL to someone who is already in their penultimate year of CS degree. I will admit that my foundations are not very strong but going back to do the basics in an unusual/impractical language like Pyret is a bit unappealing.
Also I will be starting out with competitive programming soon as you highly recommend it, what advice do you have for that? It is not very popular or well known here in my country.

    39245>> 

>>
	
Phyllis Clacklegold - Fri, 08 Jan 2021 02:51:55 EST rPfe4s17 No.39241 Reply
>>39238
That's an interesting idea OP. Is it related to those blockchain fads going on right now? Do you know any good resources for that

    39245>> 

>>
	
David Cheddlefat - Fri, 08 Jan 2021 03:24:03 EST bxbFYfoS No.39242 Reply
How can you learn xv6 on a phone and what other things did you learn on a phone that I can do as well?

    39246>> 

>>
	
Martin Sashfield - Fri, 08 Jan 2021 04:06:05 EST oT2Eb59d No.39243 Reply
What can I actually do with AI in terms of freelance work? Is there really a high demand for it?
>>
	
William Murdwater - Fri, 08 Jan 2021 17:51:58 EST kgv30QZT No.39244 Reply
>>39239
AND WERE FUCKING OFF LET'S GO ANNONS. IF YOU ARE NOT DREAMING BIG THEN GET A GRIP. GIVE IT YOUR BEST, TRY TO DO EXERCISES EVERYDAY AND THEN BE GENTLE WITH YOURSELF.

EVEN THIS FAMOUS GOOGLE ML ENGINEER BELIEVES IN "THE SECRET" LEVEL STUFF https://twitter.com/fchollet/status/1342725628257136640.

WE CAN ALL CRUSH THIS MATERIAL EASILY.

OP I THINK 200 PAGE PROBABILITY WITH COMPUTATION THEORY IS OVERKILL? I THINK THE VIDS AND THESE NOTES http://bactra.org/prob-notes/srl.pdf ARE ENOUGH. IT'S 20 PAGES AND DESCRIBES ALL NECESSITIES. AND THE EXERCISES ARE NICE, LIKE: HERE'S THE DEFINITION OF CONDITIONAL PROBABILITY, NOW PROVE BAYE'S RULE.

    39246>> 

>>
	
Sidney Worthingshaw - Sat, 09 Jan 2021 00:13:18 EST x6K3CZQk No.39245 Reply
>>39240
Up to you, PAPL is technically a second course in CS, he assumes you've already done an intro course because all the ivy league students he teaches are like the best of the best and did a few Python/Java courses in highschool already, but then he teaches like you know nothing because he assumes what you learned was totally wrong. I would say try the assignments in Pyret if you can't complete them easily then you should take the course, reminder he puts emphasis on 'property based testing' (see that paper I linked above, or his brown u page) . I chose competitive programming because I think no anons will slog through TAOCP or 15-451 CMU's Algorithm design course, but they may do competitive programming which teaches you the same thing in the end.

>>39241
I just read their 'whitepapers' if they are available, Something like blockchain you would use for an internal credits system, like somebody pays into your system to do something like say paying for bids for an auction site. Now you can easily allow users to sell/xfer their site credits, have full accountancy, and it's "safe" by default meaning nobody is going to come around and just plunder your site credits because you fucked up it's implementation, instead you just need to measure some blockchain and report the findings to their user account for how much balance they have etc. You can safely export codes like a transferrable card paid for in a 7-11, a lot of things which were really difficult before because you needed to roll your own system. To me that's the best thing about blockchain and that I can do 3rd party payouts, meaning if I hire some developers in China I can sell bitcoins and then change the receiver to anybody I want to collect the cash. This was absolutely impossible before now it's just send coins, insert the data of 3 people and they all get paid and more importantly they get paid how they want to get paid. I can also buy something with bitcoin, and just paste in the address to whoever I give cash to so they pay on my behalf, again something impossible before... so things like that to me are the greatest strength of blockchain not any kind of speculation. What needs to happen is maximum abstraction to remove all the annoyances in doing the above, nobody has done it yet.

    39249>> 

>>
	
Sidney Worthingshaw - Sat, 09 Jan 2021 00:52:45 EST x6K3CZQk No.39246 Reply
>>39242
I do the entire learnaifromscratch thing on a phone, so all of CS19 and the assignments, and competitive programming esp if you choose C++ you just have a template you save in any phone text editor and you fill it out, upload it to the online judge, it compiles the source and tests it for you. By template I mean all the boilerplate stuff is already done and you're just writing the body in a template. I write computational geometry algorithms on a lunch break with one hand while slurping ramen, upload, it tests and passes. This is the master goal of the meme 2.0 curriculum because the idea is that you are doing something else all day, and have finite time to do the meme curriculum so whenever there is downtime like commuting on a train, eating lunch, standing at a bus stop you can open your phone and then actually write a dynamic programming algorithm or learn AI on your phone.

Reminder google colab exists, and it supports Julia, you can do the entire AI curriculum on your phone too including when we do the highly advanced GPU and matrices optimization MIT course, google colab gives you free access to GPUs although not unlimited 24/7 access it's enough to learn anything you want and try it out. No joke, it works I do it everyday.

This is also why I try and reduce everything to just competition problems in math/compsci and youtube videos because you can also do this on a phone, and you end up learning 3 things at once esp a math competition problem. You can have like 10 pdfs open on google drive to look at Tao's definition of integration then solve that putnam challenge on a tablet or other portable device like you would a crossword puzzle on a lazy sunday morning over coffee. So this is the "concept" of the meme curriculum, because most people including myself do not have access to laptops and desktops all day to do these things and in some countries people only have phones nothing else because laptops are ridiculously expensive and also complicated to get all the installed compilers and shit running so just analyze and upload the text source instead. Xv6 is 'Lions Commentary on Unix w/Source' rebooted, which is what every single OS hacker learned from back in the day. You read the MIT XV6 book and it describes every line of code, then you look at the code at the same time and you learn what an OS does at the Lions Commentary old school Unix V6 level which really hasn't changed all that much. Threads, traps, signals, kernel protected memory and userland programs that use a supplied OS API in order to run ....it's all the same when you remove the architecture specifics and just look at the overall big picture and that's what the MIT course teaches you. You can then proceed to go out and buy a $10 used computer, and do Linux From Scratch or install some BSD and hack the hell out of it to see what happens, all the documentation is built-in to BSD in manpages, anything you want to know. Write a command line email reading program, write a kernel module, write all your own device drivers looking at your own hardware documentation from the mfg website, write a toy VM, open network libraries up and send manual frames to see how that works..all you need is that simple MIT course to start.

>>39244
Sure I like those notes and even easier actually is the mml book https://mml-book.github.io/ if you want the most concise summary but we will have to analyze random algorithms and O'donnell's notes, plus his abstraction of 'probability is just analyzing random code' works for the first few chapters. Anyway no anons have to do the entire pdf, I prob will out of interest but yea it's not needed. Reminder it is self-directed, the idea is ppl can do what they want and ditch the rest.

    39247>> 

>>
	
Sidney Worthingshaw - Sat, 09 Jan 2021 00:57:31 EST x6K3CZQk No.39247 Reply
>>39246
Speaking of self-directed I run into ppl on a daily basis who couldn't figure out applied calculus in X field, like say geomatics.
So I decided I will make an addon optional workshop to learn calculus but instead of using the same books everybody uses I will use Strang's CSE book which is 'all of applied math' reduced to the most important models and frameworks. If you know CSE you can basically do literally anything in any field, like astronomy, surveying, civil engineering, quant finance, whatever req applied math. Build a cabin for yourself, build a drone, be able to understand neural networks etc all of that is in his book so sometime this weekend I'll put in a link in the math workshop where to find it. It's 'weekend calculus' meaning you do something else for a living and have finite time on a sunday to watch a single lecture and do some psets but it's advanced applied math not slogging through some Stewart calculus text.

    39248>> 39253>> 

>>
	
Steve pratt - Sat, 09 Jan 2021 01:46:52 EST UtjCv9TQ No.39248 Reply
>>39247
I'm looking forward to that OP. i will most likely use it to prepare for my calculus class in college.
>>
	
Matilda Hennerhood - Sat, 09 Jan 2021 07:29:13 EST wBYj+M1L No.39249 Reply
>>39245
OP, you have become a fan of 15-451. How does it compare to 15-210?

    39260>> 

>>
	
Phyllis Horringwater - Sat, 09 Jan 2021 11:41:23 EST 0CxFBQc5 No.39252 Reply
>>39239
What do you mean exactly by started? Is there a study group or class that I am unaware of?
>>
	
Wesley Goodbanks - Sun, 10 Jan 2021 10:36:26 EST wBYj+M1L No.39253 Reply
>>39247
I see that the Putnam CMU seminar assumes 15-151 as prerequisite. Tao's Analysis teaches us basically to write proofs and a strong base for calculus. What I find is that most such problem solving type of competitions use combinatorics (counting principles) as a major tool. I have personally asked people good with discrete math and probability and they all point to combinatorics. I think one book for that may be https://www.springer.com/gp/book/9783642173639. You can take a look at it.

    39260>> 

>>
	
Hannah Hillyshaw - Mon, 11 Jan 2021 05:26:52 EST 1zBZ+0HP No.39256 Reply
Why use competitive programming book instead of leetcode. Leetcode has way bigger community and same or even more frequently seen in interview tasks.

    39262>> 

>>
	
Ian Hoshsatch - Mon, 11 Jan 2021 11:22:12 EST pKlayWqm No.39257 Reply
How do I escape from this shithole known as web/mobile dev? OP any suggestions for something I can learn relatively quickly if I'm an experienced programmer and make money? SQL, data science, crypto, something like that?

    39260>> 

>>
	
Jenny Binderkork - Wed, 13 Jan 2021 00:07:59 EST x6K3CZQk No.39260 Reply
>>39257
Andy Pavlo's two database courses on Youtube you tear apart SQLlite and then the second advanced one you build your own dbms from scratch
Go work at salesforce after doing sql optimizations something he repeatedly tells you to do in the lectures for kind of stupid amounts of money and take the meme AI workshop while you are there to automate away your job, build an AI that optimizes a dbms by itself. A benefit of this kind of work is you can always, always freelance literally parachute your way into some business as their contract dbms so wage slavery is over. Webdev can still be fun too, reminder you don't have to target the english market, I targeted the Chinese market and I'm not even Chinese and my really ridiculous and shiity app is now trending on those appstores. Think up something impossible to build and make it happen with a pile of hacks like I did it may work, I'm actually competing with shopify too but with no budget and my architecture is literally a $50/mth rented server in the Netherlands that runs Elixir/Phoenix to simply generate html and I already surpassed shopify in features and it's totally free to use. Everything is automated, even bug reports which surprisingly I have none so far. I hired a translator to read support req and they are just minor req for UI adjustments. All I did was go through Shopify's reviews and pick out all the bad reviews and features suggestions and add them myself as a big hack. I have no hope of signing any kind of Stripe deals but in China, they don't give a fuck and you just fill out a form and presto: UnionPay on your site with no ID needed. Shit is crazy popular right now it's almost taking up all my time, somebody already offered to buy it and my investment so far is a rented server and a few hours of my time in the evenings. Anyway try to create the impossible, like your own Shopify but start very small and in some foreign market.

>>39253
Wildberger talks about this in one of his lectures if anybody has done the whole foundations series, he claims combinatorics/discrete math has had the most advances in the last 20 years because it's finite math thus simple to reason about so anybody can get involved. We will do it too during the Putnam seminar except I'm adding in all the Art of Computer Programming probability and combinatorics exercises as well to the Putnam challenges, I'm trying to create a single group of problems we can move through randomly and complete without having to do any prereqs, this is the goal of the second meme AI curriculum but it will take awhile to get there.

>>39249
15-451 is essentially competitive programming, look at homework, so we will do some of the recorded lectures I archived while they were available (all of the computational geometry lectures are open thankfully) when those topics come up. 15-210 is a much better course imho because you take everyday algorithms taught in every intro to cs class and you learn to make them parallel and in the process you end up being a mechanic and splitting them all apart/repairing them. My personal opinion is if you want to learn algorithm theory and design, the best book for his is still Kozen's book by far. If you want to learn algorithms and how they are represented in a computer, Knuth's book is the best for this it's the only book where you do analysis on algorithm A and compare it to algorithm B none of them do this... except 15-210 where they do some of this showing you the difference in work/span between common algorithms.

    39263>> 39265>> 39267>> 39268>> 

>>
	
Jenny Binderkork - Wed, 13 Jan 2021 01:03:36 EST x6K3CZQk No.39262 Reply
>>39256
Because they only allow certain languages, want money. and the hardest problems on leetcode are rated about 3 out of 10 on competitive programming practice sites/online judges. No understatement whatsoever, you also can't trust their test suites at all whereas online judge sites are run by university professors actively involed in world competitions every year.

    39264>> 

>>
	
Benedict Stark - Wed, 13 Jan 2021 02:28:40 EST UtjCv9TQ No.39263 Reply
>>39260
Hey OP, You are already competing with Shopify? that's crazy. how many years or experience do I need to be even able to do something like that? like what you said "reading the bad reviews of Shopify and fixing them in your own app" I think Is pretty cool, because I wouldn't mind getting the knowledge from the meme curriculum, and making my own tech startup. but I feel like if you make a startup in one of those other countries that the "big tech" don't really have a market in, you could be very successful.
>>
	
Benedict Stark - Wed, 13 Jan 2021 02:36:30 EST UtjCv9TQ No.39264 Reply
>>39262
Another question. what programming languages do you use for your apps? are they available on iOS? or just android?

    39271>> 

>>
	
Martin Follerdene - Wed, 13 Jan 2021 10:55:34 EST FpofZPIc No.39265 Reply
>>39260
Write an AI that optimises a DBMS? Is that even possible? If you can do that why not make an AI to optimise the compiler?
Anyway, what do you mean by working for Salesforce? Where and how to get DBMS contract work? I'm curious since I'm halfway through the first Andy Pavlo course

    39270>> 

>>
	
Hangor - Wed, 13 Jan 2021 21:53:58 EST wBYj+M1L No.39267 Reply
>>39260
OP, just curious. What is your daily routine like? How do you accomplish doing so much within a day. I know motivation dies down within a few days. What is your recipe for constant struggle?

Aside: Now I see that if someone does 15-151, Putnam seminar and 15-251 he/she basically knows everything that there is to jump into any advanced topic that he wants to learn for any specific purpose.

    39272>> 

>>
	
Hugh Subberwotch - Thu, 14 Jan 2021 00:36:43 EST wBYj+M1L No.39268 Reply
>>39260
OP, I can see that 15-210 is listed under public courses. They have listed videos on youtube. But they are private videos. Is there any possibility to get hold of them? If someone had a CMU friend it would be an invaluable resource.

https://www.diderot.one/courses

    39269>> 

>>
	
Caroline Farringhat - Thu, 14 Jan 2021 23:55:08 EST x6K3CZQk No.39269 Reply
>>39268
I can only see the exam review zooms
https://www.youtube.com/watch?v=om1hHuGo-p8
https://www.youtube.com/watch?v=pGMBjfNIXyI
https://www.youtube.com/watch?v=nrzUhXzBJD0
https://www.youtube.com/watch?v=hEjsB9-ixRg

All the practice exams and solutions are available too which is all you would need, the zooms are students going through all the material and figuring it out together. Use libgen to get the latest book version the website version is outdated.
Start with the first practice exam and just research the answer yourself in the book https://www.diderot.one/courses/44/books/260/chapter/3404?toc=book then look at solutions, watch the zoom recitation that walks through the solution if you want more info. Everything in there we will learn anyway when we do Ryan O'donnell's compsci theory course just more abstractly using models to split up work like his lectures on multiplying n-bit numbers together when they are 10k bits for immense crypto/quantum things. It may even be easier to do theoretical cs first then go through all these specific algorithm books like how it's easier to learn foundations from Tao's book then take MIT's calculus course which is dead simple because you already know how everything works. Any I liked 15-210's book it's suprisingly practical
>>
	
Caroline Farringhat - Fri, 15 Jan 2021 00:03:39 EST x6K3CZQk No.39270 Reply
>>39265
Andy Pavlo built an 'AI tuned' dbms prototype already it was in one of the advanced dbms lectures I did, he changes the research every year this year's is probably even more crazy. Nobody has built an AI sql optimizer that I'm aware of, see anon this could be something you work on while taking the meme workshop.

Sometime tonight or tomorrow morning I'll post this guy who works at CockroachDB and wrote an article about how all his competitive programming algorithms he learned ended up being used for sql optimization something Pavlo repeatedly talks about in all the lectures I saw. Salesforce IIRC sells a bunch of in-memory database systems, Pavlo teaches these systems and there's even lectures where some guy shows up to talk about X proprietary dbms to the class. Salesforce is this low key gigantic bigtech corp that literally buys up everything they can, if you write anything that uses their products they will buy you out immediately and likely the first recruiter that attacks you if you make a linkedin account (besides amzn recruiters) is salesforce. They literally do everything there
>>
	
Caroline Farringhat - Fri, 15 Jan 2021 00:59:36 EST x6K3CZQk No.39271 Reply
>>39264
Here is the secret what I did: I wrote something so highly abstract and modularized thanks to OCaml that when the person using the app wants to add some feature, like a customized payment gateway (China has a billion payment methods) they can click a button to launch an in-app bounty for this and because everything is highly modular (think Hurd kernel architecture) some developer in China who wants the money can easily write whatever they want in about a half hour and extend my app. So all the html generating and concurrency 'channels' are provided by elixir/phoenix, but the critical features like payment and the like are in OCaml because they don't need to be lightspeed. I got the inspiration from this from Sussman's MIT grad class where you read papers about systems that extend themselves that we will also read eventually, also because I learned from reading reviews that everybody wants their own specific feature so why not make this a market too.

So anyway launched it on an obscure appstore (China has like 20+ appstores) just to experiment around, and I'approve the features in the exact same way Jane street does code review simply because they were the only ones around with a detailed code review system they built and wrote about so I used it, plus it's an emacs mode so when I wake up and check emacs all the features are there waiting to be reviewed it's kind of awesome. I've done code review many times at companies/labs I've worked at but this is entirely automated where I just check it and click OK and boom, that's now a new feature even the documentation is updated automatically (again thanks to OCaml).

So this went on a few months occasionally checking features then suddenly I was getting about a dozen a day, so 300+ paid new features per month to expand my app's ability. Unlike every other app I straight up tell the user exactly where the hosting is, how it works, how I don't use any amzn/google or other cloud products it's a single server sitting in the netherlands (now 2 servers, moved the payment gateway to it's own). Everything just runs by itself because it's not doing anything impossible just generating html. Plus all I did was invent Shopify for services, slowly adding in shipping of products but kept it local for a single city to reduce complexity/authorities looking for tax/bigtech looking to crush with lawyers/scammers and fraudsters. Start very small and localized.

I also use @Homakov's 'ultimate authentication suite' which is a one time password sent to email. There is no sign up or anything just enter email, click link and you're in.
https://sakurity.com/blog/2015/04/10/email_password_manager.html every user loves this
>>
	
Caroline Farringhat - Fri, 15 Jan 2021 03:51:18 EST x6K3CZQk No.39272 Reply
>>39267
To 'jump into any advanced topic' you would need experience figuring out stuff by taking something you don't know and modelling it yourself to test it's properties/behavior/outputs/characteristics. Do this enough times and I don't see why you can't jump into anything that's why you end up learning things like turing machines and simple ram models in theoretical compsci classes and why they teach calculus so you can model things that change over time, which is everything on earth. Advanced thing gets put into framework you understand how to use and by screwing around with the framework testing the properties/behavior/characteristics of advanced thing you end up figuring out how it works in my experience.

You of course don't have to do endless course exercises to do this you could for example with competitive programming build your own online judge, meaning a model of a judge. Why bother submitting when you could figure out how to measure your model to pass CPU time limit, and write your own test cases like using combinatorics out of Knuth's books to generate all possible inputs. I wanted to do this originally in the meme curriculum but ran out of time, but may do it anyway.

    39273>> 

>>
	
Ian Chummleworth - Fri, 15 Jan 2021 08:10:23 EST wBYj+M1L No.39273 Reply
>>39272
Wow. OP your approach towards learning is so cool. How do you spend your day? How much do you devote to learning and what else do you do? How do you take care of your health amidst all these?

    39274>> 39276>> 

>>
	
Reuben Gullerwater - Sat, 16 Jan 2021 00:08:46 EST x6K3CZQk No.39274 Reply
>>39273
I have the same schedule of everybody else, a huge block like 12hrs a day is occupied by life things either work/family/friends and I try and squeeze in as much time as I can in the morning to complete the meme curriculum. Just allocate some time everyday and don't take any days off, life will just give you days off when you have to do other things. That's why I want to reduce everything to competitive psets which teach you many different fields and techniques all at the same time, that way you maximize your effort. For me a problem sticks in my head all day and annoys me if I can't solve it. When I do solve it or look at the solution after thinking enough so the answer is then worthwhile reading this just magically persists in your memory forever, so I'm generally changing the meme curriculum to just be that. I'd also like to take Wildberger's easy rational math analysis and then learn regular calculus with it, he even has a chain rule vid now for algebraic calc 2. So take advanced MIT calculus thing and project it into the Wildberger rational world and solve it there, so you now understand the 'advanced' MIT concepts.

    39275>> 

>>
	
Ebenezer Fevingwill - Sat, 16 Jan 2021 01:24:02 EST MDiFfW6m No.39275 Reply
>>39274
When is this competitive programming part of the workshop gonna start and how will you go about it? Will you take part in Codeforces contests or solve well known problems from cses or UvA?

    39277>> 39278>> 

>>
	
Reuben Gullerwater - Sat, 16 Jan 2021 01:54:52 EST x6K3CZQk No.39276 Reply
1610780092719.jpg -(89649B / 87.55KB, 600x901) Thumbnail displayed, click image for full size.
>>39273
Last post for a while because we're going full on the meme curriculum, but it's fri night in the midst of a total lockdown where I live so here goes:
This isn't /fit/ but I did consider running an anon fitness 'curriculum' because fitness is a lot like computer science, some guy somewhere has a lightbulb go off when he reads material X and then everybody must do X! But the material does not translate to large group Y, which is why I shill cs19 it's proven to work to teach beginners while there is an army of anecdotes pushing X. However when I was in fed prison for silly youth crimes, what I saw there did actually work for large group Y. In fact being a brief convict taught me a lot like how these guys just spend a lot of time thinking and figuring out shit because there is nothing but time, most of us don't have this time. That's kind of why the meme curriculum is going the way it is, all about solving problems because this is what these guys do in FDC Seatac and D. Ray, anybody who is a foreigner in the US system gets sent to D.Ray and possibly Arizona like I was eventually. All the convicts, they obsessively think all day and night and it produces results. This is also an influence to the meme curriculum, seeing people I saw in prison who I considered super human because all they did was sit around thinking all day.

This is all I have found which is purely anecdotal.
First I found that exercise helped me concentrate better, I have shilled riding a stationary bike before in these posts because that's what they do in some countries to get kids to calm down before class, they have them go hard on a bike for a few minutes getting their heart rate up. Once that happens you kind of can easily concentrate on things https://www.cbc.ca/news/canada/manitoba/stationary-bikes-south-oaks-1.5272559

If you want to gain cardio strength meaning you can can climb stairs without dying there is research for this: https://youtu.be/SHN-4ve81TY you can also type these results into google scholar: 30 sec intervals on a stationary bike, meaning for 2 mins you pedal normally then for 30 seconds you go "like your life depends on it" and keep repeating every couple of days. You can now climb huge subway stairs and never be out of breath (again anecdotal). In prison this is exactly what we did, you paced around the cell then went hard for 30 seconds doing anything like shadow boxing or clap pushups then back to 2 mins of pacing around. It worked. I also was impressed by the rest of the prison fitness routine when I witnessed it years ago. There were guys there beyond jacked and they just did bodyweight workouts or lift bags of water because weights were banned at the US fed institution I served in https://youtu.be/WLmDkcb6JQE that hilarious bushwick bill christian rap is what every other inmate listened to while we did these workouts, I swear all music in prison is turbo religious. I expected to hear 'Soon as I get home' by Tupac but it was always some religious music because the rest of the cons don't program like that, they are caught up in the daily drama and only the very religious have the discipline to sculpt themselves into a human super weapon. I'm not religious, but hung out with them impressed by their dedication

So anyway there are many false books for this like convict conditioning and the like you can get off library genesis or 'The Supple Leopard' which Firhas Zahabi shills if you watch his youtube channel. I did read through a lot of supple leapord and adapt it to my pullups but I don't entirely believe most of the whole 'motion science' and whatever, mainly because it's another thing that doesn't work for group Y and only works for individual X. Again this is my anecdotes, I don't really know anything about fitness except what I saw in prison dudes who were turbo jacked beyond belief who had mythical strength and cardio and not a weight set anywhere. Example, in prison you do not complain about how much time you have left unless you are doing life. Anyway there were ppl beside me once at a fed transfer complaining about everything, and then bragging how little time they had left. A guy there already doing life, who was there for another trial where they were going to give him double life, decided to walk over and rip their table out of the floor by himself and these things are bolted down, no mortal human can actually move these things for good reason to prevent riot weapons. He literally walked over and ripped their table out of the ground for daring to complain about prison reminding him he was never getting out. He also beat them so savagely it was nearly a homicide and not a single guard came to help them, something else I remember, nobody is coming to help you, ever. They take their time suiting up and getting ready to to come in while you are on the ground with a guy jacked to the gills is removing your head with a mess tray. Anyway it's a stupid story but I ended up in solitary with this guy beside me after because mainly my record at the time, they just assumed I caused it so I was with him for a few weeks every single day side by side talking through the doors. I milked him for fitness because I thought it would take his mind off his situation and also I wanted to know how he ripped a bolted table out of the floor (and also nearly killed 3 guys sitting at it). I joined his 'group', and we did nothing but fitness until I was released without charges eventually (but given diesel therapy around many federal institutions, I could write about this but anyway you don't want to end up there, they give all foreign prisoners in USA diesel therapy meaning shackled on a bus going state to state, prison to prison for no reason). This guy taught me his routine which was the most insane bodyweight conditioning and shadowboxing, and everything was slow like really focusing on the negatives meaning do a pullup and as slow as possble do the negative. He really, really believed in negatives. So that's what I do now, pull up fast, lower myself as slow as possible on a freestanding pullup bar I bought from amazon for like $99. It works, again anecdotal.

In D. Ray you are mixed with all other US foreign prisoners, which for 90% of the population is south american or mexican gang members. It doesn't matter if you're in there for minor fraud like some guy from Netherlands we were with you will serve time with all these central american gangs and mexican gangs it's just the way it is. For me it was an Iranian guy, a Sikh guy from the punjab who was a gangster, a pasty dutch guy and me holding court in the midst of about 98% guatemalan and a few mexican gang members. In this situation when you get rec time you have to do the central american/mexican gang fitness set when you get "outside" (outside being a cage by yourself, literally just trying to get some sunshine in a concrete box with a grid cage roof). They have a very specific workout routine which kind of seemed bullshit to me like mainly burpees. Burpees are a fitness test, not something you actually train. When I was forced to do those before my release back to my country I missed the guy who ripped the mess hall table from the ground, he was like some kind of fitness savant who actually studied it like all convicts do thinking about how to maximize efficiency while the D. Ray routines for gang members were definitely anecdotal, some high ranking gang member found them beneficial so made a monach type decree everybody else must do it but it didn't really work.

Anyway that's all I know, my health is shit like most people I am not somebody who should be consulted for fitness you should look up people who have done time and see what they have done, or nutritionists or anti-aging specialist like the guy who runs Prolon (tip: the paper he wrote tells you exactly what to eat, you don't need to buy the $200 prolon food boxes).

    39361>> 

>>
	
Reuben Gullerwater - Sat, 16 Jan 2021 01:56:00 EST x6K3CZQk No.39277 Reply
>>39275
Yeah probably, esp the ICPC/ACM problems
I don't really like UvA or Codeforces, shit UI forced languages, same content on Kattis.
>>
	
Reuben Gullerwater - Sat, 16 Jan 2021 02:08:38 EST x6K3CZQk No.39278 Reply
>>39275
However anon you should totally do codeforces and kattis yourself, you don't have to wait for me, UVAhunt has all the answers and Codeforces there are answers if you git search for almost every problem.
Competitive programming and Putnam will be easy for us because we can look up material, but when you do it IRL it's extremely hard because you do not have access to anything and have to figure it out yourself.

See this: https://imjching.com/writings/2019/06/21/getting-into-competitive-programming/ (click the detail button about competitive programming tips he hid)
and this: https://anzoteh96.wordpress.com/2020/03/22/putnam-2019/

    39284>> 

>>
	
Reuben Gullerwater - Sat, 16 Jan 2021 06:30:41 EST x6K3CZQk No.39280 Reply
Last post, I expect anons to make money using prof k's material and everything else we do is just interest to gain complete understanding of computation, you already can make money just with cs19. This is what I try and do: Whatever software you make/clone, enable other people to make money with it, then you will 'bootstrap' easily because they will word of mouth there is money to be made with your software.

-Don't reinvent things you can't compete with to which there is already existing solutions with billions of users like excel or quickbooks. Glue together your superior abstraction with whatever people want to actually use for things like inventory software
-Try to make new features paid for within your software, then you don't have to write them, encourage a features marketplace
-At every level of design think to yourself 'how could somebody else make money from this'
-Pick an already existing market to introduce your software, like a playstore
-Realize you're never going to get X company to allow payments on your app without trying to control you, so spin this off to the same marketplace where you sell features, let other people figure out how to put money in your software and let them handle collection of it worldwide. This is dead simple now users should be able to generate codes for any excess credits they have on your system and then sell them in the marketplace over email like trading gift card codes, in other words use some existing crypto currency scheme but abstract this so it's easy for plebs to sell/make money on your site, they just push buttons and get paid don't shill your 'blockchain technology' nobody know what it is or cares.

    Don't use any "cloud" hosting which means prices are sky high. Figure out how to use the cheapest leased dedicated servers to give the appearance of a cloud, figure it out yourself


Even monetize support, I had no idea what to charge for my trashly little app so I made all support tix responses monetized, if you sold the support user some kind of service you kept all that money yourself 100%, guaranteeing excellent support because if I took some of this, it would incentivize shit support for signing up as many people as possible whereas I wanted the ultimate players club type personal support, so if you keep the player you get all their money, make your money another way like selling bids to advertise in the app or the fee you take controlling the 'blockchain' moving around of internal funds. God speed anons, this has worked for me so far twice now

    39281>> 39283>> 

>>
	
Nell Billyfutch - Sat, 16 Jan 2021 06:37:50 EST tZypL0gu No.39281 Reply
>>39280

    >Realize you're never going to get X company to allow payments on your app without trying to control you

Can't wait for PWAs to reach feature parity with native apps so Google/Apple get fucked when everyone leaves their app stores
>>
	
Wesley Mundleworth - Sat, 16 Jan 2021 16:17:20 EST +6ZwaoW1 No.39282 Reply
OP have you ever authored or co-authored any papers? How hard is it to publish a legitimate paper completely by yourself? How long would it take to get to the point where you are able to do that?

    39287>> 

>>
	
Ronabego Francis - Sat, 16 Jan 2021 17:06:47 EST UtjCv9TQ No.39283 Reply
>>39280
OP among all the courses that you have taking, which of them were the most beneficial to you?

    39287>> 

>>
	
Alice Tootstock - Sun, 17 Jan 2021 01:57:25 EST hI2ubGcv No.39284 Reply
>>39278
Thanks OP. Very helpful. I also found this guide: https://codeforces.com/blog/entry/66909
>>
	
Nicholas Pickham - Mon, 18 Jan 2021 04:15:37 EST LyF3D+5a No.39285 Reply
OP do you know any resources on how can I get started on crypto and memecoins? I want to buy into the hype and start trading.

    39286>> 39288>> 

>>
	
Edwin Decklefork - Mon, 18 Jan 2021 05:30:40 EST xVsRkDu9 No.39286 Reply
>>39285
Start with babypips. Don't touch crypto until you are profitable trading regular currencies. Assuming you mean retail trading not algo trading
>>
	
Graham Trotlock - Mon, 18 Jan 2021 23:29:00 EST x6K3CZQk No.39287 Reply
>>39282
Yes, when you work in univ labs (which is why i shill for anons to work there) you get your name concatenated to the end of the huge amount of credits for every paper it produces. It's how I (briefly) went to gradschool, that plus the recommendation letters I got.

However you will see when we do Ryan O'donnell's Theoretical CS class how papers are actually really made, basically by accident. You poke around some thing you're working on, literally enter it into the online encyclopedia of integer sequences, discover it is a 'X polynomial' then you write a paper about it. It's in one of his lectures.

>>39283
I think for everybody the most beneficial is that CS19 course and PAPL book, including the cs173 parts at the end. People underestimate that course but when you start doing competitive programming you'll see how easy it is for you after doing cs19 because of all that 'property based testing' and examples building he makes students do, and explanations of things like graphs and trees which we'll finish in the workshop as we get there. My hope is that some anon here actually took that course then when they begint doing the real problems on say spoj or kattis, and they bypass that initial annoyance trying to figure out a new language, they realize... wow this is easy, all I did was the exact same things from cs19 like writing a few examples and testing the properties of the output and I was easily able to figure out all the gotcha cases they try in the psets. I've been reading ahead in the book trying the advanced problems and they are what we did in cs19. They are still of course good to do so you get practice but don't be surprised how easy it is for you.

Because I think much of competitive programming is too easy for us (obviously the big competition code jam and ICPC tier problems are not easy of course, those are like Putnam problems and when you do them in a real competition you can't have material to look at), I may try something insane and do the problems in MMIXAL from The Art of Computer Programming books. Knuth built this simulator where you can test alternative branch prediction, alternative instruction pipelines, test out simulated caches , simulate operating systems, basically you have a simulated theoretical machine as advanced or primitive as you want it to be and can run your code there essentially being your own judge server. I got this idea after watching his ancient lecture (in extinct real media codec unfortunately) about bottom up programming, where Knuth absolutely insists that if you know the machine code you will know all the crazy abstractions like the back of your hand because it is a superior computational model with all complexity removed, like the simple models we study in Ryan O'donnells compsci theory course which is for grad students. You can write bios from scratch too, embedded programs entirely in ROM that can be run on the MMIXware testbed, then we can learn what a bios is, how a superscalar CPU is constructed from ground up, and test different branch prediction strategies. You can easily transfer this knowledge over to FPGAs and RISCv https://beagleboard.org/beaglev

I don't think I have time though, but would be definitely interesting to do in some other workshop, in-line all the assembly and not even need to worry about TLE (i tried it on a DP problem from the last chapter, it works).
Last advice: Anon's who don't like any Kattis language forget Kattis and learn Swift on SPOJ. It's heavily used in machine learning right now, I'll update the meme curriculum with it soon.
>>
	
Graham Trotlock - Tue, 19 Jan 2021 01:54:05 EST x6K3CZQk No.39288 Reply
>>39285
If you want to speculate on stank tokens then you can buy into Nasdaq NexGen Economy ETF or similar https://www.nasdaq.com/articles/bitcoin-tops-%2421000%3A-etfs-to-play-2020-12-17
You don't bet on the actual memecoins, you bet on all the surrounding economy like highly suspicious crypto startups for mining/exchanging and whatever for various currencies etc, these are ETFs that pretty much grab the whole surrounding economy to speculate on which really is what you want, that economy goes up just like the coins go up except you limit your risk.

If you want actual physical memecoins you want to be the Foodora of memecoins. Think about how they abstracted Foodora/Door Dash and those restaurant middle men delivery companies. The concept there is just one big menu, and you pick what you want from several restaurants, and it all shows up roughly the same time (well, in some cities where this is the concept and it works as advertised, other's they run like shit) but anyway the concept is now you go to a single restaurant, get any food you want, that restaurant is Foodora. The trading bot should be the same, they trade coins but you are the exchange because you connect all of them together to make it look like one exchange. People can then write open source or paid for strategies to try on your bot, make a marketplace for this. At this point you reach the biggest abstraction of them all: there's no longer only smart contracts on Ethereum, you now run smart contracts for every coin hiding away all the details of logins/APIs and specific exchanges, you should just see the menu and nothing else (the prices for buy/sell) not knowing where they came from except as an optional filter. The hard part here is no exchanges can be trusted due to their history of market melting incompetence, so good luck anon.

Of course if you want to go full elon musk this would be a google/siri chat app, now it can be voice interface. 'Hey google sell stank tokens, buy hypecoin'. You bypass all the app stores now (who would just ban you anyway) and direclty target already installed software as a script they plug and play, google/apple can't do anything about it because they'd have to sabotage their own voicechat apps in order to block your script.

    39297>> 

>>
	
Phoebe Bloggleludging - Fri, 22 Jan 2021 15:33:30 EST 50Yz1k47 No.39296 Reply
>>39023 (OP)

    >Also I'm secretly writing a Pfpl and dan licata workshop for ML/OCaml

You still doing this? If so can you give a status update? Or are you gonna merge this into the AI workshop?

    39299>> 

>>
	
Devin Newton - Sat, 23 Jan 2021 02:04:56 EST UtjCv9TQ No.39297 Reply
>>39288
I know that you have read taocp. have you read all of them? what did you think? how does it compare to clrs? How hard is concrete mathematics for a "beginner" in that topic? what are the prerequisites to taocp and concrete mathematics? oh and i saw your textbook stack in the other thread, where do you buy your textbooks? do you get them for cheap?

    39298>> 39299>> 39300>> 

>>
	
Nell Gossleman - Sat, 23 Jan 2021 02:23:56 EST B9X4xV1H No.39298 Reply
>>39297
Not OP, but I read Concrete Mathematics first chapter first problem. It was not hard. But it was something I never seen before. By that I mean the way in which it was approached and solved. Never read further and I regret that.
>>
	
Cornelius Gollerlock - Sun, 24 Jan 2021 00:18:14 EST x6K3CZQk No.39299 Reply
>>39297
I want to include some while doing OCaml competitive programming but time is the fire in which we burn (famous star trek memesaying) so I don't know if I can.

>>39296
I've read all of them including the unpublished TAOCP 'Math prelim redux' which I kind of want to slipstream into the AI meme curriculum like the probability chapter in the latest version.

However I haven't really worked through all of them though, and want to. TAOCP is vastly different from CLRS you compare two algos at the same time, you dig deep into the mathematical property of trees and graphs, it is CLRS on steroids.
The meme AI curriculum is first draft and I want to rewrite it with TAOCP where we also see what recursion looks like with assembly, the lowest levels of abstraction. I'd like to read more of his MMIXware book, it teaches you everything you ever wanted to know about CPUs and exactly how branch prediction works and pipelines, and how alternative branch prediction works like making up a hypothetical chipset then testing it with Knuth's simulator. This is huge now since RISC-V is getting a lot of innovations lately, meaning anons can design and produce their own specific chip. That and Jane Street is desperate for FPGA designers, always looking for them. Take algorithm A and design a specific chip for it experimenting with alternative caches, this is all in TAOCP.

Concrete math relies on a lot of tricks, that's why I don't include it but they're informative when you see them, TAOCP is different these tricks aren't all completely in there. If you've done Tao's first Analysis I a few chapters you can figure out Concrete Math yourself easily.
>>
	
Cornelius Gollerlock - Sun, 24 Jan 2021 00:33:29 EST x6K3CZQk No.39300 Reply
>>39023 (OP)
I screwed around for ages trying to find the best calculus course.
I had Thomas' Calculus 3rd ed copied by a pirate printer, I went through all of Apostol all over again and Stewart's calculus. I even found a prof who described 'alien calculus' meaning what if aliens existed, how would they teach calculus compared to our version.

I've been watching Wildbergers algebraic calculus and I think, after watching Knuth talk about this from a 2003 talk, that it's all we need.
I also think his linear algebra courses is all we need, he teaches you the same concepts with all the complexity removed, then you can move up complexity to understand Axler type notation to manipulate matrices.
Problem is convincing people this is all they need, I don't think they understand concept A when abstracted to concept B is the same thing as concept A. Nothing has changed. The rational analysis Wildberger teaches in his memecalculus directly translates to differentials in Strang and MIT calc 2 courses, just they are using a different model, but in the end everything is the same thing just with different interpretations.

Anyway there is a calculus meme workshop to learn university calc just already it is totally crazy, but I've been testing it with 18.01/02 and so far works out fine. Idk though, again time is a factor, I'm now getting hammered with work.
>>39297
Eventually the ai software workshop, will include assembly for all concepts in PAPL/CS19 like recursion. I'm just figuring out how somebody can do this with limited access to technology and have a few ideas. Reminder the whole AI memecurriculum is just a test run that get's for looped to death where I rewrite it all over and over.

    39303>> 

>>
	
Cornelius Gollerlock - Sun, 24 Jan 2021 01:23:27 EST x6K3CZQk No.39301 Reply
1611469407746.jpg -(50548B / 49.36KB, 600x453) Thumbnail displayed, click image for full size.
I have a weird story
has anybody here taken the functionalCS memelist drone course? https://www.youtube.com/c/logicalsystemslab/videos
It was something I did for interest, anyway I have a github where all the assignments I did for that course I uploaded to the public and they just sat there dormat for about 5 years or so.

I am getting a lot of contract offers from that github to help build autonomous weapons systems. It immediately reminded me of detroit 2029 and SENTiNEL scifi https://youtu.be/ZiO2dq78mZI

By a lot I mean that very recently, like within the last 2 weeks I have had multiple offers to interview and every single one is a recruiter from a military (but pretending to be space) contractor. Something has obviously happened recently where this technology is now viable or permissible. I'm interested in following up and working there just to see wtf they are doing, are we really creating a drone army? But on the other hand I don't wish to erase all of humanity with a subtle bug that allows these things to just roam freely murdering on cruise control. Anyway, I'm going to try and work there and basically spy (I now have US citizenship too, long story, my crim record from the US can't exempt me from entry), so there may be a pause in the meme curriculum but I"m still on the same schedule, I'll just get up before I check into the shady contractor (they also design a space arm device, it's all so cryptic where you get hired for space automation but end up working military death drones), but I imagine other anons may be interested in cyber physical systems and I'm currently not working except my pleb lockdown covid job so why not. The preliminary material they sent me is far more advanced than I imagined, I didn't know we were already at this point yet where autonomous weapons could exist. Reminder this is a 'space' company that recruited me, nothing at all on their website about the real work they want me to do. It's both interesting and frightening at the same time, anyway like the rest of my life doing infiltration magazine I"m going to infiltrate and see what happens there, actually the meme AI workshop was going to do this, I was going to get jobs at Amazon and other FANG then write about it, but have paused for this creepy avenue. Anyway reminder if you've done cs19 you can finish all of competitive programming it's all you ever need. I should keep updating as usual just less often due to new workload of having to understand differential invariants all over again. Nothing should be all that different but anyway, that's what I'm doing now though I think I won't get in because of my background being in FDC Seatac but who knows.

Since my background is 'infiltration' I wanted to work at Amazon and game their hiring system for other anons then write about it in the meme curriculum seeing what happens, if I don't make it in the shady drone contractor I will continue. Anyway nothing should really change I will try to update as usual. it's become weird though, I have my first 'lie detector' test to pass clearance levels monday. You guy's can figure everything out yourselves anyway and don't need my help at this point, but I'll try to finish.

    39302>> 39306>> 

>>
	
Cornelius Gollerlock - Sun, 24 Jan 2021 01:44:16 EST x6K3CZQk No.39302 Reply
>>39301
Forgot the link from functionalCS http://symbolaris.com/course/lfcps.html
This is the course I took assuming it was about cars and robots, but it's really about drones https://youtu.be/eYfsPLl7zTk?t=53

    >UAV decision support


I never put those together, anyway I used Strang's 18.085/Computational Engineering book to learn this if you're interested.

    39304>> 39307>> 

>>
	
Hukomukho Hyangla - Sun, 24 Jan 2021 09:24:44 EST B9X4xV1H No.39303 Reply
>>39300
OP, I talked with a few profs and people in academia and all vouch for your method of learning mathematics through problem-solving. Regarding that matter:

I really want to do Concrete Mathematics. But before that I want to learn problem solving. Here are a few books that I know of:

    Putnam and Beyond
    The Art and Craft of Problem Solving - Paul Zeitz
    Problem Solving Strategies - Arthur Engel


Now, my math proficiency is basic calculus, matrix multiplication, etc. Which book should I begin with such that the leap is sufficient yet not deep enough that I get lost?

BTW, I found no solutions manual for Paul Zeitz's book.

    39309>> 

>>
	
Nathaniel Dribberstone - Sun, 24 Jan 2021 12:06:17 EST fXQjFEc7 No.39304 Reply
>>39302
OP sir where can I learn all about computer networks, the entire stack from the physical layer up and encompassing everything, from the shit they were running in the 70's to the Quantum internet and even beyond that. I want to become a networking wizard, not some IT certification scrub like I currently am.

    39309>> 

>>
	
Caroline Claybury - Sun, 24 Jan 2021 14:02:16 EST wEGx1P3c No.39305 Reply
Can I go through the DBMS course to learn C++? Or would that be too much to do at once? OP what resources do you recommend for C++ specifically?

    39310>> 

>>
	
Beatrice Dreppersot - Mon, 25 Jan 2021 04:18:58 EST RTMuLrHX No.39306 Reply
>>39301
So what you are saying is, If you complete exercises and post them to github as a way of showing competence, you will get scouted out by recruiters? Thats crazy dawg. But having a strong base to be able to specialize into any of these niche fields or getting recruited by futureware companies like neuralink makes me motivated to grind this stuff 24/7. Not as a was of working with spergs like Elon, but heing viable enough that you can pingong off of them and even compete with the,. For all this, thanks my man.

I am doing your math workshop first btw caus I am a complete illeterate, and also doing Serge Langs Basic Math as a supplement.
>>
	
Clementine Haruki - Mon, 25 Jan 2021 18:10:10 EST UtjCv9TQ No.39307 Reply
>>39302
OP, not related to cs, but what kind of books do you like to read? literature or philosophy. and for philosophy, who and what is your favorite?

    39311>> 

>>
	
Fuck Hushridge - Tue, 26 Jan 2021 13:55:36 EST zjbn0uZi No.39308 Reply
I'm lost
>>
	
Ian Pockhall - Wed, 27 Jan 2021 00:03:44 EST x6K3CZQk No.39309 Reply
>>39303
Putnam and Beyond w/the CMU seminar https://youtu.be/vGQZjITDft4 you take so you can learn an entire field, like your linear algebra sucks so you decide to do 100+ putnam questions about linear algebra. If you want to do CMath then do it, you don't need any problem solving books Knuth will show all the strategies and tricks he uses in the answers to exercises. I find those problem solving books are good for things like Putnam problems, or competitive programming or some olympiad highschool math stuff where you are given not enough information and need some kind of heuristic to solve it, and you do not have access to anything in competition so this is all from memory.

>>39304
I don't know actually, CMU has a course that is supposed to cover 'the future of networks' here https://computer-networks.github.io/sp19/lectures.html and they use this book which is free https://book.systemsapproach.org/ and even the grad course uses it too https://computer-networks.github.io/15-744-sp20/ however one I do enjoy is Ryan Odonnell's probability and computing, which covers things like server farm load balancing http://www.cs.cmu.edu/~odonnell/papers/probability-and-computing-lecture-notes.pdf and of course too there's the MIT security lectures https://www.youtube.com/playlist?list=PLA6Ht2dJt3SKN3z4S6nOvuJtesDXbly7S

I learned from MIT's 6.033 when it was still open, and 15-213 covers some of this too, like enough so that you can rip open some network libraries and send manual frames and shit. All of this is in the old book 'Advanced Programming in the Unix Environment' which they still use in these courses as a reference for network hacking.
>>
	
Ian Pockhall - Wed, 27 Jan 2021 00:27:12 EST x6K3CZQk No.39310 Reply
>>39305
I included a course http://web.stanford.edu/class/cs106l/lectures.html in the meme curriculum, though we won't use 1/4 of those features.
Really all you need is CS19/PAPL, objects and how they are dispatched is all covered there, memory manipulation, arrays etc.
Then you get that competitive programming book and just practice C++ for a month until you are fluent, then practice with some big software adding your own feature to it since that really is what C++ is about: huge, gigantic programs with a thousand people making them and you can slap on a feature.

I'm doing something insane with the competitive programming workshop basically going through the functional datastructures OCaml book and then straight to CMU's advanced algorithms book because it's exactly like doing algorithms in pyret, and you can make your own library that is highly optimized and include it for every submission to Kattis writing very little code since you have your own library. The CMU advanced book is really good teaching you all the different high level ways that a problem could exist and be solved by computation, same with the Nature of Computation book. Here it is: http://www.cs.cmu.edu/~15850/notes/cmu850-f20.pdf which won't make sense unless you've done CS19, some of Ryan Odonnells TCS toolkit lectures. Otherwise I think anybody can do this, the advanced algorithm book is like algorithms max abstracted to the big picture: 'there exists these kinds of problems in all of computation, these strategies solve it.'
>>
	
Ian Pockhall - Wed, 27 Jan 2021 01:12:33 EST x6K3CZQk No.39311 Reply
>>39307
I enjoy meme philosophy https://archive.org/details/2013ThePervertsGuideToIdeology/2013+-+The+Pervert's+Guide+to+Ideology.mp4 or books like this http://www.johnralstonsaul.com/non-fiction-books/voltaires_bastards/ and even the unabomber manifesto, a great read everybody should see sometime not that you will become a terrorist blowing up airport employees but for something written in the early 1990s you can check off the predictions incrementally and we're already at the bio revolution now, the industrial revolution is over, the information revolution is over, now it's the bio revolution and if I were to bet money that will be the bulk of startups, the bulk of research for this century. That's why I slipstream a lot of MIT biomed content into the meme curriculum like scientific machine learning, this is what we'll all be doing soon and Sussman's new book if you read it is all about creating a fail safe system like the human body. We already have an AI built in that can fix/adapt our bodies to even external events without us knowing how to do it. Think about how all of this is automated completely and fail safe like having two kidneys, two lungs. Another reason why I will try and finish with his new book.

I try when I have time to read ancient greek and latin books like Cicero, in latin (or at least try to). Human nature has not changed in thousands of years, we are fundamentally the same people, just back then everything was surprisingly much less censored, so you get the full human nature. Everything that happens to you today can be traced to some greek playright, lor atin orator talking about the problems of the day. The more I learn this the more I'm surprised it is not required in every highschool or university. By learning latin you end up speaking better english, it's like a model for complicated english grammar. Ok this is cringe: https://youtu.be/BMfnw6oBq9w however the benefits are unbelievable and if the meme curriculum ever finishes I will make a classical curriculum, in fact I think a classical curriculum is all you need to learn everything we are doing. All the logic they taught thousands of years ago we still use just with more refinements.

Elon Musk, to be sure is a meme, but he talks about information being lost over time like if you don't teach people to make pyramids, they will be unable to make them. I think if the education of ancient people who already figured this out is not taught anymore then we will forget how to do it ourselves, and this of course is the Wildberger philosophy, he believes everybody has forgot and so is reinventing everything in his own rational model and routinely injecting ancient greeks and indian math into his meme curriculum.

But I'm just a shallow student of all these things

    39312>> 39313>> 39314>> 

>>
	
Hukomukho Hyangla - Wed, 27 Jan 2021 04:57:15 EST B9X4xV1H No.39312 Reply
>>39311
Where is Sussman's new book?
>>
	
Harvey Yaley - Wed, 27 Jan 2021 17:18:22 EST UtjCv9TQ No.39313 Reply
>>39311
What resource do you recommend to learn the classical languages? greek or latin?

    39317>> 39318>> 

>>
	
Harvey Yaley - Wed, 27 Jan 2021 17:19:48 EST UtjCv9TQ No.39314 Reply
>>39311
and do you know a good way to make money if you are an immigrant and can't get a job because you don't have an ssn? or work permit?

    39318>> 

>>
	
Nell Goodforth - Wed, 27 Jan 2021 22:09:08 EST FXrHLuoV No.39315 Reply
Who are interesting people to follow on Twitter?

    39319>> 

>>
	
Dildo Baggins - Thu, 28 Jan 2021 04:32:25 EST /Tz8vc3k No.39316 Reply
OP I need to make an OCR AI for someone's cursive writing (I have pictures of the cursive writing). I have a lot of pictures of the cursive writing, and i also have the word document for the photos. Now I want to make a model so I dont have to type all that. How should i proceed?
I think first i need to slice the photo into indivisual words, create a dataset which maps the indivisual characters to their respective letter, and chug all that into an AI algorithm. Is there any lecture online which shows this?

    39319>> 

>>
	
Ebenezer Saffingstock - Thu, 28 Jan 2021 13:56:03 EST BsA7Kla+ No.39317 Reply
>>39313
Not OP, but I've got several years under my belt (some of those in an academic setting) with both Latin & Attic Greek. My Latin learning was done the old school way using the Wheelock's text, heavily grammar paradigm focused. It's a rough way to go honestly. What really jumpstarted my performance (as well as my interest) was incorporating the Lingua Latina textbooks - they're full-on immersion learning, basically being beginner readers entirely in Latin that anyone can pick up and start with. A combination of those textbooks and drilling the grammar on the side will get you pretty far. Going through Lingua Latina's Familia Romana and Roma Aeterna + the grammar will make the transition into harder readers/original texts like Caesar and beyond much easier. You can find PDFs of all of these + teacher's editions on libgen.

To me, Greek's grammar was easier to grapple with after having a foundation in Latin. There's no direct equivalent to Lingua Latina, but the JACT Learning Greek textbooks were decent in my opinion, especially for a self-learner given that there are answer books available. I think JACT + Mastronarde's grammar focused text are solid. Again, all on libgen.

    39318>> 

>>
	
Jack Pivingpen - Thu, 28 Jan 2021 23:07:05 EST x6K3CZQk No.39318 Reply
>>39313
I'm learning from "Learn Latin from the Romans" https://www.cambridge.org/ca/academic/subjects/classical-studies/classical-languages/learn-latin-romans-complete-introductory-course-using-textbooks-roman-empire?format=PB and just using youtube, like the Cambridge latin course videos. People underestimate a classical education, you really can write and speak better all that Latin grammar translates over to English. The biggest benefit being you can read the ancients in their language and not through some shitty translation but again I'm a very shallow latin and greek learner you should prob take this guy's advice >>39317 and try to read some Sophocles, everything we experience today already happened thousands of years ago that concern the nature of humans, like why does X get accolades and not Y who is more virtuous. Another thing I find interesting about the ancient Greeks is that they had axioms for absolutely everything. For example if you wrote plays to be performed there was an actual method to do this, and the art was to manipulate and work within the 'axioms' of playwriting to produce the best work amoungst your peers. What makes this awesome is that you apprenticed for everything you wanted to do as there was already established methods you had to follow, but the art was abstracting them as much as possible to produce truly amazing things so to me mathematical logic made it's way into every form of art. As a songwriter/poet you needed to have a certain set of parameters to operate in "this verse must be X beats" and your goal as the understudy/apprentice was to blow it out of the water but still keeping the original axioms. As a result all these things exceled not that they were confined by these 'rules', but instead these guidelines helped them learn as apprentices, and they surpassed their masters by being able to keep the 'rules' while thinking max abstractly and extending the field. Anyway, this is how I see it I could be totally wrong.

This to me is what University of the People should have been, learning a bunch of latin and ancient greek, your ability to communicate increases with studying these ancient languages which is like studying the lambda calculus so you can be better at understanding modern day code.

>>39314
Technically you could incorporate yourself in Deleware for $90 and be a contractor for anything. You could also just go on flexjobs website and take 2 shitty global jobs at the same time like answering calls on a headset and replying to emails in the other shit job. When I got released from prison and learned the meme curriculum I was a literal no-skill peasant doing landscaping everyday for cash with illegal immigrants because nobody would hire me. You either reply to craigslist labor ads or you find out where people stand around waiting for day jobs and go stand with them like I did. I think they changed restaurant work but in Europe you can easily work in a kitchen without being a citizen they don't care at all, I have no idea about the US. If you did this you would want to actually learn from somebody good, be their apprentice not just some lazy pleb doing min work.
>>
	
Jack Pivingpen - Thu, 28 Jan 2021 23:09:02 EST x6K3CZQk No.39319 Reply
>>39315
The only people I follow are:
this guy: https://cs.uwaterloo.ca/~plragde/flaneries/ because I want to know when his FICS intro is done, plus we will do his OCaml workshop, you may recognize him from the CS19 labs
prof k
@hashbreaker Daniel J Bernstein
I used to follow thegrug but too much politics, even the above have too much politics which twitter seems to encourage.

I really dislike politics https://youtu.be/lqHLYvQn_Po or living your life but having to wear what he calls 'apology badges' to signal your politics in case people think you are X politics when you are Y. Who cares, I also cringe whenever I see it injected into lectures or notes which if nobody hasn't noticed I try to avoid, I will even skip a lecture if it veers into politics. Sometimes this is unavoidable like Cozma Shalizi or CMU notes are just too good but you will never see me talk about politics ever in the meme curriculum it is a cancer.

>>39316
Almost certainly Google cloud AI already has cursive OCR you can use for free, or even algorithmia marketplace.
These are well known with papers all over google scholar search for them.
>>
	
Jack Pivingpen - Fri, 29 Jan 2021 00:49:34 EST x6K3CZQk No.39320 Reply
1611899374394.jpg -(49923B / 48.75KB, 1280x720) Thumbnail displayed, click image for full size.
>>39023 (OP)
Followers of the meme curriculum I actually have time now to work on it finally.

Software.html will do the rest of CS19, the OCaml functional datastructures workshop and CMU's advanced algorithms book together with Ryan O'Donnell's complexity course. We will just go straight to ICPC problems after some practice. That OCaml workshop is exactly like PAPL/CS19 and so far it's worked for me to solve a few of the ICPC problems. I don't think we need a competitive programming book, we can adhoc everything ourselves with just a god tier overview of algorithms like 'this problem requires this kind of graph input'. Every anon should take O'Donnell's course he literally shows you how papers are made where you think 'how did somebody think of this? I could never think of this myself'. If there is time I'd like to do Robert Harper's book, but there may be no time. I really want to grind kattis and UVa psets primarily the archived information olympiad and ICPC problems as fast as possible.

Math.html I will for-loop the entire thing repeatedly eliminating junk and clarifying things which are all poorly draft written, and finish the Putnam seminar. Calculus I'm just going to do MIT's course notes from 18.01/02, the math for ML book, and Strang's CSE which teaches you all the frameworks of applied math needed for black-scholes eq and the like. Wildberger's rational calculus is also so good I might include it, you see everything at level Z abstraction then going to A level is no problem.

Ai.html I injected some of the CMU putnam seminar, Knuth's 'math preliminaries redux' from TAOCP unpublished vol 5, as a daily challenge to just toss in there while we figure out AI. We need practice to figure these things out and it would be interesting to see anons get jobs as quants somewhere, as this is the kind of things they ask you, including some betting that Wildberger includes in his lectures. I will do all three AI courses CS4780/10-601 and 10-701 and the entire 'math for machine learning' book. I also want to do Sussman's critical writings about the shit state of AI and his new book on systems that can add their own features. I will do some of Strang's new LA book, some of those 'depth first learning' stochastic neural network curriculums for finance then it's done you're good to go doing whatever you want.

I have no time but anons may be interested in Wildberger's hyperbolic rational geometry course I have had great success using it to cast deep learning problems into that highschool math framework. It has a 'bigger' space than Euclidean space. It is simple to manipulate. In fact all of Wildberger's math 'just works' and is trivial to write libraries for.

Really would I would like to do is just do Tao and Wildberger materials and then produce some of the insane things I've found working in those abstractions, I'm hoping the probability we do will show anons how really crazy this all is, it's abstractions built on abstractions but somehow they all work down to axioms. There really is no end to the abstractions too you can always find new ones which is the amazing part. Wildberger's math is like this, you realize after the 10th conic video lecture that everything that isn't linear is just a conic and the greeks were right all along, whatever your curve is it's just a conic that was already figured out thousands of years ago. Anyway, god speed anons, I got my hilarious US citizenship finally despite actually serving time in their foreigner only prison known as CI D. Ray James a privately run gulag which was very different from FDC Seatac, a literal nightmare on cruise control. I will see you all at JS I look forward to my shitty Jersey apartment and ferry commuting while we scheme for bonuses and try and take over the flimsy market from within.

    39321>> 39322>> 39323>> 39324>> 39325>> 39347>> 

>>
	
Dildo Baggins - Fri, 29 Jan 2021 01:43:27 EST 5LZnG1nu No.39321 Reply
>>39320
Congratulations OP, it was really interesting to see your journey.
Now tell us a condensed one year plan on how to get into JS, getting aninterview with them seems to be as hard as clearing that interview.

    39328>> 

>>
	
Ian Bemmerson - Fri, 29 Jan 2021 05:59:05 EST zjbn0uZi No.39322 Reply
>>39320
Good I was lost
>>
	
William Tootgold - Fri, 29 Jan 2021 08:35:39 EST fXQjFEc7 No.39323 Reply
>>39320
Wilderberger has retired now and I think hes going be focusing even more on making math vids. I love new formalisms for math that dramatically reduce complexity and he seems hellbent on reformulating it so that it is a lot more constructive.
>>
	
Mac Milano - Fri, 29 Jan 2021 23:06:51 EST UtjCv9TQ No.39324 Reply
>>39320
Hey OP. Don't mean to be pushy, but when do you plan on adding calculus to the meme curriculum? i am really looking forward to it.
>>
	
Simon Tootbury - Sat, 30 Jan 2021 01:48:18 EST KeC1XbJX No.39325 Reply
>>39320
Hi OP. What are your thoughts about this introductory course in machine learning? Seems very practical as they also teach the code and math along with the main course. Here is the link: http://d2l.ai/

    39346>> 

>>
	
Cornelius Criffingbanks - Sat, 30 Jan 2021 11:07:37 EST /sVpfPny No.39326 Reply
How do I into reversing? I want to make something like Cheat Engine

    39327>> 

>>
	
Cyril Cruttingwun - Sat, 30 Jan 2021 23:46:36 EST x6K3CZQk No.39327 Reply
>>39326
The cmu 15-213 course is all you need to go on libgen.rs and get https://beginners.re/main.html as it is now a paid resource
There are places that hire common lisp programmers to obfuscate the entire build process so that reverse engineering is more difficult https://en.wikipedia.org/wiki/GrammaTech
If you read their marketing it's a way to surf the C/C++ code and do binary analysis, but it's real money making purpose is to obtain disassembly that is high quality enough to support rewriting. You can relink objects and do all sorts of obfuscation to make it very difficult to reverse engineer C/C++ code. They have papers around google scholar https://link.springer.com/chapter/10.1007/978-3-540-31985-6_19 you can use sci-hub to access if you're interested in how they do this. Obfuscating the codepath is an interesting way to get into reverse engineering https://youtu.be/_f5wo_ypAjo
>>
	
Cyril Cruttingwun - Sun, 31 Jan 2021 00:26:50 EST x6K3CZQk No.39328 Reply
>>39321
I think anybody who took cs19 and understood it can easily work there.
Watch his effective ML talk. They do what you do in cs19 just adding an error variant to the type declaration.
All the prof k talks where he breaks down a program is what they do too.
The JS 'expect tests' are exactly the kind of property based testing taught in cs19 https://blog.janestreet.com/testing-with-expectations/
Those same tests also help them write the program, just like examples in CS19 that are runnable like you can link a second function to test the first function

CS19 is literally the blueprint to get into JS now all you need to do to get noticed is read his book on real world ocaml and find one of the 198 repositories on github of their's you want to start contributing to and this will lead to employment there if that's what you want. This is why they claim their interview strategy is not to care if you don't know the answers, they want to know how you would reason about the answers with property based testing, breaking down the logic like prof k, and thinking about ways the program could come up with an illegal state (effective ML) so write a type for that state and then handle it. All of this is taught in cs19 though we all need practice getting better thinking about how our code runs which is what things like Kattis do 'hey I thought this wouldn't TLE, what happened... '' then repeat until this isn't a great mystery anymore.

It would be interesting to work at any of these outfits just to apprentice doing things that are huge in complexity, so you can then go out and do it yourself, but the meme curriculum isn't about getting a job it's about understanding how these things really work then the reader can come up with their own strategy to profit from what they now know.

    39330>> 39332>> 39335>> 39341>> 

>>
	
Oliver Pickfuck - Mon, 01 Feb 2021 02:49:11 EST X1feYcHx No.39329 Reply
What should I make with OCaml to learn it? I want to make something moderately complex to figure out what's so special about OCaml's module system compared to OOP in C++ or something like that and why you shill it so much.
Also want to figure out if the language is worth pursuing seriously because clients don't really give a shit about what technologies you use as long as you deliver a good product
>>
	
Reuben Pittstone - Mon, 01 Feb 2021 11:32:45 EST B9X4xV1H No.39330 Reply
>>39328
OP, there are multiple avenues to get started with mathematics. Wilderberger, Tao, Problem solving through Putnam. It's so confusing what to do and what not to. You have advocated for all during the past. What do you suggest?

    39331>> 

>>
	
Phoebe Faddlewore - Mon, 01 Feb 2021 12:00:29 EST zjbn0uZi No.39331 Reply
>>39330
he literally wrote a math workshop how to get started with maths

    39333>> 

>>
	
JOhn Sena - Tue, 02 Feb 2021 01:58:01 EST B9X4xV1H No.39332 Reply
>>39328
OP, I know from your past posts that you shill CS19 for it being the all encompassing intro to CS. Once we complete it we can learn anything in CS.

For math which resource do you shill at the level of CS19 equivalent? Math has a 'why' side and another 'how' side. Problem solving is as important in math as learning the why's. If we don't learn problem solving we can't solve new research problems and implement stuff.

    39333>> 

>>
	
George Fonnercocke - Tue, 02 Feb 2021 10:23:51 EST zjbn0uZi No.39333 Reply
>>39332
>>39331
>>
	
Jarvis Nicklebanks - Tue, 02 Feb 2021 14:01:25 EST MmoLooUZ No.39334 Reply
>>39023 (OP)
OP please upload the org-mode files to the AI repo. I want to be able to quickly find removed resources without going through a bunch of cryptic generated html
>>
	
Jeremiah Janus - Tue, 02 Feb 2021 16:25:17 EST UtjCv9TQ No.39335 Reply
>>39328
Op i know that you know how to find obscure things. do you have any idea how to get chegg or course hero for free? do you know a way to unblur thier content?
>>
	
Eliza Clezzlestone - Tue, 02 Feb 2021 17:49:15 EST cdA/1D3p No.39336 Reply
op, do you think doing sicp over cs19(PAPL) is a mistake. I was already in midst of SICP, so changing to another book seems a bit painful. I will tho, if PAPL is a better option. What do you think, big guy?
>>
	
Don Smith - Wed, 03 Feb 2021 10:01:52 EST LyMbp9P8 No.39337 Reply
OP, as you have previously written that you want anons to make money with Prof Krishnamurthy's material. How exactly do you recommend it ? (For someone living in third world country). Like should I work on my app,website or find work, freelance ?
You are a inspiration for me, thanks.
>>
	
Eric Gole - Wed, 03 Feb 2021 10:14:11 EST LyMbp9P8 No.39338 Reply
How do you stop your timesinks on YouTube or Whatsapp ( text ) ? Because it is very easy to go down in the rabbit hole, and waste a ton of time.
Do you use your phone to write schedule or have some diary ? ( I know these questions are silly,I tried using some shitty notes app, when I open my phone to look for my schedule, I almost every time end up doing something like checking text or whatever)

    39339>> 39349>> 

>>
	
Cyril Nubblewater - Wed, 03 Feb 2021 16:00:20 EST zjbn0uZi No.39339 Reply
>>39338

    >using whatsapp

>>
	
Frederick Crubbertene - Fri, 05 Feb 2021 07:02:59 EST JlKh6m7n No.39340 Reply
ALL PAJEETS GTFO
>>
	
JOhn Sena - Fri, 05 Feb 2021 08:14:09 EST B9X4xV1H No.39341 Reply
>>39328
OP, is the CS Theory Toolkit course a superset of Complexity Theory and other courses by Ryan O'Donell?

    39349>> 

>>
	
Phoebe Duckwell - Fri, 05 Feb 2021 10:00:51 EST rJ4Saw60 No.39342 Reply
>>39023 (OP)
OP, if you have a firm of your own, would you take an intern for 3 months? Gotta do it on behalf of the uni at some point before 2024.

    39343>> 

>>
	
Graham Fabblegold - Fri, 05 Feb 2021 11:51:55 EST zjbn0uZi No.39343 Reply
>>39342
cringe
stop being cringe retards and posting stupid shit
>>
	
Molly Hammerfine - Fri, 05 Feb 2021 19:23:03 EST fXQjFEc7 No.39344 Reply
This board is getting flooded with low quality Q's. This is one of the downsides of popularizing resources like this.
>>
	
Beatrice Nungerbanks - Fri, 05 Feb 2021 22:52:13 EST JlKh6m7n No.39346 Reply
>>39325
Thoughts on this OP?

    >39344

Agreed. But what other options are there? Discord?
>>
	
Alice Bardbanks - Sat, 06 Feb 2021 07:57:55 EST Na350K92 No.39347 Reply
>>39320
A humble suggestion-
In future, if you are going to remove certain sources from the curriculum, can you please add what you removed and why, there? Or better yet, instead of removing stuff, why not make it optional?
This way, anons who have the time will do the optional stuff, while others who are short on time will avoid it.

    39348>> 

>>
	
Graham Nimmergold - Sun, 07 Feb 2021 00:02:32 EST x6K3CZQk No.39348 Reply
>>39347
I hacked Org-mode so diffs are meaningful instead of div's being randomly generated with each update, now you can see the changes though if I delete something it means you shouldn't do it because either the meme curriculum covers it already or it has misleading information. For example I recently nuked both MIT 'weak' induction and 'strong' induction lectures after spending a week reading the entire metamathematical logic book by Kleene.

In the MIT lectures they inaccurately describe induction as 'rows of dominoes being pushed over' and even in Tom Apostol's book that taught me induction it's 'toy soldiers being kicked over'
This is a totally wrong analogy.
A more accurate analogy is cloning, the new clone has the same properties of the last clone and so every single future clone will inherit the properties of earlier clones. Inductively defined things are generated from the same base.
There is also much less blur between compsci and metamathematics, meaning definition of math functions and the like, they are primitive recursive almost exactly like the lambda calculus. I took this before but never really put it all together so I will inject this into the meme workshop somewhere. f(x ) = x + 0 = x is primitive recursion. tl;dr it's all the same thing, there's a set of complete lecture notes from Pfenning @ CMU that covers this http://www.cs.cmu.edu/~fp/courses/15814-f20/lectures/00-all.pdf including linear types that now make garbage collection obsolete.

I also think proof theory now is essential so will add that, you remove all the assumptions, and proof theory directly translates to type constructions. A concrete, constructable method for deducing (like a program) how disjunction or conjunction works, or iff or impilies or it's contrapositive. All of it is modelled easily by proof theory both the classical pragmatic version of logic and the new verification automated logic. By removing assumptions you actually remove them in this system, no more assume P(n) that n is property P. Very easy logic anybody can follow compared to confusing math/classical logic of 'not true'. So that's what I've been doing, removing a lot of obsolete logic and rewriting the math.html curriculum to be less confusing.

    39351>> 

>>
	
Graham Nimmergold - Sun, 07 Feb 2021 00:43:09 EST x6K3CZQk No.39349 Reply
>>39338
The idea for 'a phone curriculum' came from me only having a phone while working and doing life things, and there is downtime like eating or whatever and you want to knock off some kattis problems, do a CS19 assignment or type into CPO some CS19 code he writes on the board and attack it with corner cases, and the fact that most countries I've been to nobody has a laptop/desktop but they all have phones. This is also why Poh-Shen Loh made expii for people who only have phones.

I schedule on a piece of scrap paper using pen like Cal Newport actually because it's the easiest to update. I don't really believe in the importance of scheduling anymore unless you are in a job like he has being a tenured professor where there is constantly things to do and you actually have to squeeze in 20min blocks here and there to do something. For the meme curriculum, if you truly are interested in how math and computer science work then you'll be fine, and never need motivation because whenever you have downtime it is a hobby you will always want to do (which is why I try now to gamify the material much like Knuth has done with TAOCP making it into an 'advanced puzzle book'). I try to recurse over the material over and over and gamify it so it can be done incrementally over a lunch break for a year and then one day you discover you're an advanced complexity theorist and programmer.


>>39341
TCS tookit course goes with the book 'Nature of Computation' and is all you need, that book/course is much more advanced and teaches you to do actual research in compelxity theory on your own. Speaking of Ryan O'Donnell he now makes youtube videos for all his quantum theory papers and they're really good, one just came out a few hours ago on his channel.

    39350>> 

>>
	
JOhn Sena - Sun, 07 Feb 2021 08:54:40 EST B9X4xV1H No.39350 Reply
>>39349
OP, how many subjects do/did you study when you are learning on your own something new. I see study streams on youtube and they study multiple subjects per day and their entire study session is based on the target of completing homework or assignments. That is okay because most of them are in a college/university setting.

I think when I am starting out I should concentrate on one subject. But I have one fear. Suppose I want to learn math and cs. I start with CS19. After I finish it I do one math subject and I alternate like this as I go on with my learning journey. I doubt that after CS19 when I learn the math subject I will forget or get out of practice with the CS topic I learned beforehand.

What is your take on this and how do you do it or rather did it when you started out. I am sure when you start to know things and get your basics rock solid, this problem diminishes out.

    39354>> 

>>
	
Reuben Horringludge - Sun, 07 Feb 2021 17:44:12 EST RVwyLQwt No.39351 Reply
>>39348
I see you mentiond org-mode couple of times and you seem to take quite a lot of notes. I wonder if there is some method in which you organize them.

Also, what's your opinion on org-roam (and Zettelkasten in general)? I've been dabbling with it for a couple of days, and it seems kind of promising. It seems to be helpful to make a "creative" work (find connections between concepts). However, when doing more linear work (e.g. going through book) it seems that you will be better off with single org-file (which can still link to some concepts/files).

Also, there is a problem with org, that it's easier to do math on paper. I'm figuring out a method in which I will do proofs/ problems on paper, and then just write parts or commentary into org/ org-roam files. I could probably also work through code books using org-babel and it's source blocks.

    39354>> 

>>
	
Jenny Songersock - Thu, 11 Feb 2021 23:18:42 EST x6K3CZQk No.39354 Reply
>>39350
In university you do 4-6 different classes per semester depending how many credits you take, it's common to take more than one thing at a time esp math and cs will be so similar why not do both at the same time. For example when they talk about bounds and optimization and 'family of functions' ior logarithms or exponentials in CS 101 it's all standard calculus 101 type things. What study streams do you watch, link them I'm interested in making one and removing all the cringe. It seems like I never update the meme curriculum but in fact I will go through a few dozen books per week (not every page of course) to find the best material, reminder the meme curriculum 2.0 is a draft that I'm going to radically change soon.

>>39351
For notes, the #1 best part of org-mode is being able to link to a specific line in any pdf, so when you forget something you can bring up your notes and click that org-mode link you made and go directly to that pdf sentence/line/page. For hand written notes you can just take a pic of the paper and then have org-mode link the pic and it will display in your notes as you view them in org or while exporting to html that's all I do. I haven't tried Zettelkasten but it looks exactly like a graph db, so could just use any graphdb software really if you wanted to run really advanced queries on your own notes. I don't take that many notes, because my field doesn't require it really I just organize things by concepts 'this is a derivative concept' and then a few alt-arrow key's and i stuff that entry into my derivative notes for example.

    39358>> 39359>> 

>>
	
Jenny Songersock - Fri, 12 Feb 2021 00:47:20 EST x6K3CZQk No.39355 Reply
>>39023 (OP)
I will rant on things I have discovered relevant to all our interests.

I weasled my way into the inner circle of many profs we know about, so I am able to ask them questions about educational materials. I credit my ability to do this simply from my history as a total cringe hacker and of course Kevin Mitnic's old book on social engineering. Anyway I will be making a seperate calculus workshop thing based on the convos and also I own the orig 1960s Thomas' Calculus book Knuth shills, and will copy this to pdf for all anons and upload to library genesis.

I also weasled my way into the email circle of Neuralink and what they are doing there is very interesting though frightening, the idea is AI is a waste of time, the real AI is connecting your brain with everything else and reducing the bandwidth barriers so you can just think something and this is translated to the computation world in effect you become the AI when all bandwith barriers are removed and you have a real time link with every system on earth. I say frightening because they experiment a lot on animals 'hey Mr. Monkey, would you like this brain implant.. well too bad it's happening anyway'. This is of course a major ethnical dilemma for working there. These are the real ethical questions that of course no university covers, I took CMU's "AI ethics" course and it was a politically written joke, nothing about what is really happening like liquifying some animal's brain by accident. That's why I don't have any of these ethics courses in the meme curriculum they focus on petty and stupid things. To me this is diabolical and unnecessary, you should be able to simulate a brain and prove it has the same response/functions, not have to kill thousands of animals through trial and error with your C++ prototype implant 'oops off by one error, that animal now has liquid organs'.

Then we have Sussman's opinion where all CS is nothing like the human brain, a system should be infinitely extensible like biology and evolution and nobody is doing it, which is why he wrote his new book, which you can also do entirely in OCaml if anybody is interested. Anyway that's my rant, things are moving quickly because we are in the biorevolution now anons, the information/industrial revolution is over it's all about computation of dna like our covid vaccines, these things used messenger RNA an experimental new method of 'customized cancer treatements' they could never greenlight until this pandemic happened. Now it's all greenlit, they're all hiring for CS students these days moving into totally scifi territory of customized genetic medicine which is done entirely with algorithms.

    39357>> 39362>> 

>>
	
George Smallham - Fri, 12 Feb 2021 06:59:12 EST 6G/NZHHo No.39357 Reply
1613131152944.jpg -(1799015B / 1.72MB, 2160x3840) Thumbnail displayed, click image for full size.
>>39355

    >seperate calculus workshop thing based on the convos

unexpected, isn't the calculus we're covering in the math workshop enough? i always thought calc is pretty simple and learnable in a couple days if you exclude all those endless "prove continuity"/"find local minima" mini-games they use in unis to have something to put on exams.

    >I took CMU's "AI ethics" course and it was a politically written joke

yeah "AI ethics" smells from kilometers away that it's some kind of filler course or hiring vector for diversity quotas or whatever. teaser for upcoming platonic philosophy workshop maybe?! jk

anyway my questions:
1) can i do Scientific ML course in python since I'm already invested in its ecosystem? is julia that much better that it's worth changing? what about the other julia "computational modelling" course, is it just intro to CS with julia ie kinda useless if i'm already a programmer?
2) >>39239 i'm curious about this post, most courses seem to cover this obsolete material if this is true, how can I get to state of the art level then?

here's some chart circulating on /sci/ lately, can't vouch but it might give you ideas for when you cover quant shit.

    39372>> 

>>
	
JOhn Sena - Fri, 12 Feb 2021 07:48:25 EST B9X4xV1H No.39358 Reply
>>39354
https://www.youtube.com/channel/UCMwo6hT5hI3R56rO2HYP-wQ this is one such study stream which is consistent since lockdown.

    39360>> 39374>> 

>>
	
Bari tar Bangla - Fri, 12 Feb 2021 09:00:47 EST B9X4xV1H No.39359 Reply
>>39354
OP, forgive me for saying this. These are just my thoughts. I may be wrong.

I know recently you have been changing and refining a lot of resources while designing the meme curriculum 2.0. You sometimes say resource X is the best and then change later to resource Y. And you give justified arguments for that.
What I am saying is that your judgement may be biased because you have ploughed through several courses beforehand. You have completed Apostol, Infinite Descent, etc. Similarly for CS courses, too. Now when you say course Z is the best to start with for CS are you eliminating that bias of your previous knowledge of CS (same for math or whatever)?

This thought came to my mind when I was switching between resources and suffering from paralysis from analysis. This suddenly came to my mind. I may be wrong. Contradict me please.

    39361>> 39373>> 

>>
	
Emma Blenderspear - Fri, 12 Feb 2021 11:09:10 EST YudSoNIV No.39360 Reply
>>39358
lol, this was recommended to me too. it's amazing that the guy can study 12 hrs at a time.

    39374>> 

>>
	
Emma Blenderspear - Fri, 12 Feb 2021 11:29:35 EST YudSoNIV No.39361 Reply
>>39359
not op, but a counter argument could be that OP has gone through so many courses, that he now knows what's good and what's shit. And so he recommends only the good stuff, leaving out the useless material.

OP once mentioned in a fitness post >>39276 that he tries to recommend stuff that would benefit most people, like PAPL and cs19.
>>
	
Ovid Achenbaugh - Fri, 12 Feb 2021 12:05:57 EST UtjCv9TQ No.39362 Reply
>>39355
OP how the hell do you finish textbooks so fast? i know you said you aren't reading all pages, but reading some pages of all those textbooks is equivalent to a full textbook. how do you do it? deep work? or you pull all nighters? i can barely finish 1 textbook in like 1 month.

    39365>> 

>>
	
Sophie Bravingfield - Fri, 12 Feb 2021 23:51:47 EST RTMuLrHX No.39365 Reply
>>39362
Dude hes slogged through Apostol's calc and other encyclopedic math books and knuth etc, he has already built mathematic rigor.
>>
	
Emma Smallville - Sun, 14 Feb 2021 10:34:15 EST dKSjCUCX No.39366 Reply
OP do you know anything about crypto mining? I have cheap electricity so thinking about making a mining rig but have no idea where to start or if it's even profitable in 2021

    39367>> 

>>
	
Priscilla Crombletetch - Sun, 14 Feb 2021 11:48:53 EST azP+DVy6 No.39367 Reply
>>39366
From what I've seen the days of random people like you and me mining crypto are gone - now that entire companies are doing it, we can't possibly compete.

    39368>> 

>>
	
Simon Pavingfet - Mon, 15 Feb 2021 06:43:15 EST Elx2+0Q0 No.39368 Reply
>>39367
GPU mining is insane right now with 3-4 months ROI IF you get the cards at MSRP. ETH 2 will change everything for miners but another currency will probably just fill the void
>>
	
Ebenezer Bunkinfotch - Wed, 17 Feb 2021 22:43:29 EST x6K3CZQk No.39372 Reply
>>39357
The meme math curriculum will just do the putnam seminar and that will be fine for any undergrad math we want to learn, for the whole meme curriculum. Meaning you want to know how integration works in an algorithm (or to prove how it works). Btw integration is just a sum if you're wondering, that's all.

The applied calculus curriculum I'm making is for science lab computational applied math basically a full engineering 21st century curriculum (because things in 18.06 have changed ie: linear algebra methods) and also for people worried about returning to university and don't know anything about calculus. I'm going to do computational engineering math so modelling fourier transform and differential eq. You will learn all this in the Putnam curriculum anyway just it's interesting to see the engineering applied version if you've seen any Wildberger lectures where he talks about the differences.

tl'dr the Putnam book will teach us all we need to know but it's not something you can just spring on somebody and I run into numerous people all day long who failed calculus and I'd like to do a purely applied, 100% university tier currilculum with some engineering math because it really isn't hard. In that curriculum I will have absolutely no basics, we'll just crank out exercises and figure it out as we go.

To answer your questions:

    >can I do python

sure, you can also just import the python libraries into Julia it's your choice (and R libraries)

    >julia course

i will use it in the applied math workshop, the idea is purely computational math doing everything on a computer, but the MIT course so far is actually not an intro to programming it's more like 'oh hey we're going to model the climate and here's how' kind of thing. I think it's an advanced course at MIT but I haven't done enough of it to know yet. From what I've seen so far you definitely need to know how to program but on the other hand you don't because modelling things is intuitive enough with the simple language. What I like about that course is MIT is fully shilling it in EVERY course these days, so it will persist, and they teach you the entire language.

MIT for whatever reasons, has gone all in to Julia and it's eating up almost every course. For us this is great we get to use a python syntax lisp in order to do highly advanced numerical linear algebra because they've opened all their courses.
>>
	
Ebenezer Bunkinfotch - Wed, 17 Feb 2021 23:02:55 EST x6K3CZQk No.39373 Reply
>>39359
Experience teaching people IRL and reading teaching research, primarily Prof K and his associates who specialize in this and have actual data to back up what they claim should be a curriculum.

For example if you want to learn math, and you know nothing, you should probably do Apostol's Calculus books. However 90% of people will likely give up in the induction chapter and never finish it. 10% will finish it and then go around shilling Apostol's book as the best book (it really is a good book(s), like he introduces the entire field axioms, he teaches you the cartesian plane from scratch, he builds a linear space from scratch) but if I just tell you oh hey take this book you will never finish it.

Infinite Descent needs lectures to go with it or it won't make sense, instead I took Tao's book because it uses conceptually simple natural numbers to teach the same concepts as that book, which is to teach you proofs. I'm hoping some anon here did Tao's book and then tries Poh-Shen Loh's discrete math course and realizes the text recommended is actually too easy just like he says it's too easy for CMU students meaning.. you are now the CMU student too because it's too easy.

I'm also hoping various anons who try the Putnam book;/seminar realize that most undergrad is too easy, meaning you skip half the book to find the content now. This was my experience after slogging through all of Apostol's Calculus it was putting in that work that gave me the ability to just skip most courses so when I recommend a course on functionalCS literally 60% of it will always be too easy for you and a simple one day read.

    39375>> 39376>> 

>>
	
Ebenezer Bunkinfotch - Wed, 17 Feb 2021 23:53:53 EST x6K3CZQk No.39374 Reply
>>39358
>>39360
interesting I"ll check it out, I def like the Geohot 5hr sunday streams where he will code shit up for lelz
The meme curriculum will be a live youtube series eventually, but not like this spending hours and hours studying, I learned the hard way you don't have to spend forever doing this material, you just need to do single problems, that are competition level on a regular basis. That's it, wake up look at a competition problem, think about it, kind of read through Tao's books or other material, go to work or school or whatever it is you do all day, have that problem in the back of your mind nagging you that you can't solve it, then when you either figure it out or look at the solution after thinking about how to solve it all day long....... you will never forget it ever. All those memorization memes or drill or whatever, is not needed and I don't think they work either

This is also why I slow walk the AI part, for various reasons I'd rather just do challenges and then use those courses as the research to help finish the challenges but nothing decent exists yet however I do have email interactions with all the profs we know about and the people from jane street's signals blog, this may change soon, anyway I'll just drill those AI courses in the meantime and be done with it, it has to be finished within a few months so it will be while the other two workshops persist with daily challenges.

In other news I had another drone job offer, something must be up they are pouring in from github. If you want this work (please secretly sabotage your autonomous weapons and claim it was a 'mistake' while collecting a bunch of money) try that 'cyber physical systems' cmu course where you program by differential invariants. All the lectures are open now too: https://www.youtube.com/logicalsystemslab it's very interesting, using 'time derivatives' except sadly the only use case presently for me it seems is making weapons judging by the bios of the companies contacting me from github.
>>
	
XYZ - Thu, 18 Feb 2021 11:25:18 EST 2mMvMi74 No.39375 Reply
>>39373
So I have a few questions:

1) You think Infinite Descent is not for self study (without supporting lectures). Yet the book preface says you read it and do all the problems and that's that. Of course a lecturer may share his own insights with his own way of teaching. I mailed the prof once but he said it's not possible to share the lectures. Btw, whenever I start with Infinite Descent I get bored very easily.

2) Tao's book is good for learning how to do proofs but it is only analysis. Po Shen Loh says to learn to do proofs do it the Putnam seminar style i.e. don't get stuck to proofs from one particular field of math. Tao is only a single topic.

3) How does the Discrete math course compare with 251? Is it a subset?

4) Suppose I don't do Apostol's book. What will I miss out on? What is so special about Apostol?

5) Putnam seminar lectures explain more. The book chapters are very skimmy and assumes much knowledge. The preface says first read a standard book of the topic then do that chapter from Putnam book.

    39377>> 

>>
	
Bari tar Bangla - Thu, 18 Feb 2021 22:08:07 EST 2mMvMi74 No.39376 Reply
>>39373
You say most courses will be one day read/study after I do Tao, Putnam and Discrete math. Good. I also was always searching for building a strong base so that as I move up things become less of a grind and more of enjoyment and aha's.

The above is in regard to math. What are those base courses for CS? CS19 and?
>>
	
Hannah Pummerstock - Sun, 21 Feb 2021 00:09:59 EST x6K3CZQk No.39377 Reply
>>39375
I used Tao's book because anon's need to learn basic math, and Tao reduces the complexity to just the natural numbers and you learn everything that 15-151/21-128 is trying to teach you which really is mathematical logic meaning how to write a proof but removed is all the complexity of number theory or whatever else is in that course. The infinite descent book isn't even finished either. Anon's will discover when they do the putnam seminar that after about a month they are so advanced that any undergrad course is now a joke to them, which is my ultimate goal, to fool people into thinking what we are doing is easy when it's not, but they discover they still can do it anyway then they go and take some standard linear algebra or analysis course and realize it's way too easy. I also fool anon's into taking Tao's book itself, which is an advanced book.

Poh-Shen Loh's discrete math course is entirely combinatorics which Wilberger shills on a regular basis as being the only math field that's had any kind of math breakthrough's in the last 20 years because it's finite. 251 is different, you are taking a crash course in theoretical compsci topics. As for Apostol nothing is special about Apostol except any Calculus book will have a thousand exercises and if you actually do them, you will then 'know how to solve problems' which is the Don Knuth quote I posted on the orig meme list functionalCS and how I credit my ability to know these things which was only though slogging through Apostol's book and learning every single trig identity over and over, and petty limit exercises. You do enough of these and you just kind of figure it all out and no amount of me telling you what is really going on will ever sink in, it's only from doing that you get it which is why I structure the meme curriculum how it is and not give you a stupid animation that declares 'here is everything you need to know how L'hospital rule works' because you only, only will ever get it through doing a bunch of seemingly pointless problem sets.

Math is deceptively hard to learn, it's only through repeated practice you kind of figure it out yourself. I can't teach you math, I can only get you to do enough of it you figure it out yourself because like that DEK quote you will 'learn to solve problems' by doing all the extra problems at the back of a calculus book.

Anon's don't have to learn proofs either, I only chose them because I think it makes it easier to learn math but you can be the world's best programmer and never write a proof in your life, I think it's easier because you can now learn to deduce by yourself any kind of mathematical law. That's why the calculus/applied math meme workshop I'm doing has zero prereqs or proofs we just model continuous shit that moves and do problems until we figure out how the model works, there's no proofs but you will thank me later for making you take all those proofs when you come across something and now remember it easily, or how to produce it easily like whatever laws of exponentiation or limits.
Anyway there is no base math course for CS, there really is only calculus so you can know how optimization or bounds work, linear algebra also will be extremely helpful but again you don't have to know it but once you do, you will wish that somebody taught you it in the beginning instead of wasting all that time.

tl;dr there's no royal road, you either recognize how these things can help you or you don't, and it won't matter either way which is my current opinion after doing this long enough.

    39379>> 39385>> 

>>
	
Hannah Pummerstock - Sun, 21 Feb 2021 04:09:48 EST x6K3CZQk No.39378 Reply
>>39023 (OP)
I'm throwing control theory into the meme AI curriculum as it's now supremely popular for biological systems AI and so anons if they want can work at SpaceX, it's just understanding dynamical systems theory, phase diagrams, all standard AI things and also taught in strang's applied math framework 18.085 course.
>>
	
John Grandbanks - Sun, 21 Feb 2021 12:20:41 EST 0Y98nxlo No.39379 Reply
>>39377
By base CS course I meant are there any set of courses in CS which when completed , the advanced courses seem cake walk just like in the case of math after soing Tao and Putnam.

    39387>> 

>>
	
Basil Worthingdale - Sun, 21 Feb 2021 17:11:45 EST RVwyLQwt No.39380 Reply
>>39187
OP, I wonder what's your opinion on weed in general. I've managed to grab some medical weed in my 3rd world country, but I wonder if I should even touch it. I have intellectual ambitions and I don't want to waste my potential.
The question is, should I go into straight ascetic teetotaler mode? Or do you think weed and moderate alcohol consumption is acceptable for a wannabe scientist like me?

    39388>> 

>>
	
Esther Blangerforth - Sun, 21 Feb 2021 22:53:19 EST FXrHLuoV No.39381 Reply
What books/resources should I use if I want to cover my lower div math courses like calculus, linear algebra, differential equations, vector calc?

    39387>> 

>>
	
Cedric Buvingwidge - Mon, 22 Feb 2021 03:56:27 EST i7ymVTru No.39382 Reply
1613984187055.png -(753044B / 735.39KB, 1000x837) Thumbnail displayed, click image for full size.
>>39023 (OP)

Can you give me some advice OP?
What should I focus in order to get a job at Google, Facebook or Microsoft (I'm a senior so this is my last chance to ge an intership)?
I've managed to get interviews very easily, FB on my freshman year, MS & Google on my sophmore year, and FB & Google on my junior year. But I can't pass the interviews.

The whole interview process has become a rat race since CTCI and leetcode came up, kids in china are just memorizing 400+ leetcode questions, I just can't keep up with that. The fact that most of the interviewers just want you to regurgitate memorized code within 10 minutes doesn't help at all.

I don't wanna cram leetcode like everybody else, I wanna become a good problem solver, I know I can. The last summer during an interview with Google I pulled up some sick math skills of out nowhere and solved a problem with a more optimal solution that the most optimal solution you can find on the internet, I stil can't believe how I did it. But sadly that was in 1 of 3 interviews.
Because of that I have guaranteed an interview with google on july/august of this year. What should I focus on?, math?, clrs?, competitive programming?, leetcode?, comunication skills?

I just want to get out of my third world shithole country, what do you recommend?. College in my country is free (so no student loans) and because of my nationality I can get a visa just with a bachelor degree (guaranteed no lottery bullshit).

    39387>> 

>>
	
Jesse Pinker - Thu, 25 Feb 2021 12:01:26 EST 2mMvMi74 No.39385 Reply
>>39377
OP, I am a newbie college student of STEM. My intent is to do good research work in AI and Theory and I want to build stuff. I know I should learn a decent amount of math and CS.

For math as you have advised I will do Tao then Putnam then Discrete Math and then maybe topics as and when I need them.

For CS I have started doing CS19. But what after that?

I know you are doing a workshop but it will take time. I want to get a headstart so that I can progress on the courses/books/topics on my own.

Can you suggest me what else I need to do in either math or CS, maybe a list, so that I can start doing them on my own time and plan accordingly?
I want to move into AI research as fast as possible.

    39387>> 

>>
	
Sidney Fimmershit - Fri, 26 Feb 2021 20:36:44 EST x6K3CZQk No.39387 Reply
Sorry anons I slacked all month because I realized after doing a bunch of ICPC problems and some AI courses that CS19 is actually the only thing you need, and I also decided to redo that whole course exactly how prof K designed it from start to finish, so rewrote the entire software thinghy workshop to be an exact TA replica of the real course. Then I will use the CP4 book 'methods to solve' to drill it on kattis so things like graph algorithms are second nature but the assignments like tour guide are in a way all you will ever need to design your own software for anything you want.

>>39385
Then do the depth first curriculums https://www.depthfirstlearning.com/ we will do them eventually too, it's a curriculum built around an AI paper. The more problems you do out of any of Poh-Shen Loh's seminars like the Putnam and Beyond book, or any Titu Andreescu written book, the easier the math will be for those papers. Andreescu's linear algebra book on library genesis is especially good and I'm combing it with the Wildberger lectures right now actually for the math workshop thinghy. Note they are just like all his other books so very hard math olympiad style problems, with fully worked out solutions by the hundreds.

>>39382
No idea, look on team blind forums though it's full of fakes like 'i got offered TOE eleventy billions and studied only day' type posts you have to filter out. Interviews they just want you to talk through a problem like prof K does in class. That's literally all you have to do, while spending some spare time cranking out some competitive programming problems, which should be noted are vastly more difficult than leet code you need like 2-3 different datastructures and imagination at solving problems to beat those, and efficiency is always a concern so you build up really good skills in estimating efficiency.

I wouldn't want to work for any of those companies though as a new grad it's fine, but you won't be there very long. The way big tech works is that they mine for new employees and make sure they are gone by the end of the year or second year, that way you never increase compensation and there is always a new talent pool of students to replace you. You will be presented with an almost impossible end of the year evaluation, and by that time you will realize that the whole goal was just to have their name on your resume so you can parachute out of there not actually remain there and just be a cog in the big wheel. This is why the majority of Jane Streeter's now are from Amazon, who are probably the best of all the bigtech because you get to do systems programming or AI immediately and not end up on some useless Facebook or Google or Apple team that just manipulates widgets on a page. Amazon will also literally hire anybody and also present them with impossible evaluations.

I think any new grad would have much more fun at a gaming company, doing some really interesting shit like player AI, seeing how design and graphics are done, hacking efficiency so the engine is faster, seeing how storyboarding is done so you can maybe go into film as an editor for some hollywood studio and there are no endless meetings with Zuckerberg management clones who try to indoctrinate you into the company cult like there will be in bigtech. Plus you can contract yourself after to every other game studio. The employment laws are getting so crazy lately contractors will clean up and direct employment will be harder to find as the bar keeps getting raised higher. For example NYC you have to take a harassment class every single year and the company pays for this whereas they can just contract you and not have to pay, not have to worry about compliance of various skyrocketing regulations, not have to pay engineers to sit there and interview you, not have to worry about you suing them, so tl;dr contractors are on the rise again provided you have real world experience. But that's end of my employment/bigtech rant.

>>39381
The most efficient is Strang's book on calculus and a few of his videos about it, and MIT's new 'modern' LA course https://github.com/mitmath/1806/blob/spring19/summaries.md which emphasizes SVD and matrix calculus. I am making all of the above into a regular workshop maybe this weekend, it'll be learnaifromscratch.github.io/calculus.html covering Strang, Honors Calculus the notes that go with Spivak here: http://alpha.math.uga.edu/~pete/expositions2012.html and Andreescu's 'Essential Linearinear Algebra w/applications' which is a weird olympiad tier book where you set yourself up to learn the extremely abstract linear algebra later in other courses. I still think Wildberger is also the best for this, setting you up to learn all the advanced abstract stuff later. This workshop will be standard Calc I, II and III sequence w/linear algebra every student is forced to take though in the reg math workshop thinghy, we will learn all these things anyway through doing olympiad problems.

>>39379
Yes like the Discrete Math book for Poh-Shen Loh's class is way too easy for us already, which is why he just teaches combinatorics problems in it's place. Ryan O'donnell's Theoretical CS lectures on youtube, combined with the book 'Nature of Computation' is a research course meaning you're supposed to solve open unsolved problems in theoretical CS and you will find this isn't very easy, and requires a lot of patience to stick with a single problem which really is what Poh-Shen Loh is trying to teach students with his olympiad seminars, that real problems take years to solve not giving up after a few minutes and the more harder problems you do, the easier it gets to focus on the even harder problems. He has a whole talk about this on youtube somewhere I'll post sometime, just like I discovered that really the point of every single undergrad course is to just teach you Polya's 'How to Solve it' indirectly so then you have the experience and patience to do it for real in grad school or industry. This was all in a prof K cited paper how essentially that's all they want from us the actual subjects we take for undergrad are incidental, meaning really anybody can learn this, the goal is Polya's heuristics.

    39389>> 39390>> 39392>> 39393>> 39394>> 

>>
	
Sidney Fimmershit - Fri, 26 Feb 2021 23:21:04 EST x6K3CZQk No.39388 Reply
>>39380
Do whatever you want in 'moderation' the problem with drugs and alcohol is it's easy to get into a persistent habit then you're kind of fucked, you have no motivation to do anything and are content with shitty distractions. I don't think anything impacts your cognitive ability so long as you aren't doing it all the time.

    39391>> 39397>> 39398>> 

>>
	
Jesse Pinker - Sat, 27 Feb 2021 00:01:04 EST 2mMvMi74 No.39389 Reply
>>39387
When will you update the CS workshop in the website?
>>
	
Fanny Pickson - Sat, 27 Feb 2021 01:04:12 EST 2mMvMi74 No.39390 Reply
>>39387
Correct me if I am wrong. As far as I understand it, the path for learning both CS and math are as follows:

CS:

Do CS19. Then 15-213.
After these you can learn any programming language and learn about algorithms.
For further systems knowledge do an OS or compilers course.
For CS Theory you do 251 and CS Theory Toolkit.


Math:

Do Tao/Infinite Descent. Then do Putnam Seminar and Discrete Mathematics.
Then you learn abstract math like analysis or Linear Algebra or whatever you like.
>>
	
Vander Davis - Sun, 28 Feb 2021 10:16:58 EST UtjCv9TQ No.39391 Reply
>>39388
OP, do you ever forget the math you learn? I feel like If I learned smooch math, I don't think I would remember the material for so long. How do you not forget the. math you learn?

    39402>> 

>>
	
Jack Pankinwuck - Sun, 28 Feb 2021 14:50:37 EST RTMuLrHX No.39392 Reply
>>39387
IMO learning to make mods is s great way to get into game dev. One of my goals is to learn enough AI that I can read papers on physics simulations and make them as mods for games. Things like snow simulations for skyrim etc. It is probably also way more rewarding that working in some game dev studio where you have minimal leverage. I mean, look at what Rockstar employees say about working there during crunch times. The consensus seems to be that game dev is not a very rewarding place to work as a software person, thought this could be wrong.

    39402>> 

>>
	
Archie Hagglestidge - Mon, 01 Mar 2021 02:11:44 EST 2mMvMi74 No.39393 Reply
>>39387
OP have you recently talked with Prof K regarding the 3rd edition of PLAI? It seems to get postponed always.
>>
	
Archie Hagglestidge - Mon, 01 Mar 2021 09:44:08 EST 2mMvMi74 No.39394 Reply
>>39387
OP, since you shill the Putnam seminar so much I would suggest another book to you by Arthur Engel called Problem-Solving Strategies. It is an old book but geared towards problem solving and was used for IMO training. Take a look over it and share your feedback please.

    39402>> 

>>
	
Martha Claywater - Tue, 02 Mar 2021 05:42:59 EST FXrHLuoV No.39395 Reply
What should I do if I want to learn data structures & algorithms and operating systems for a dumb person?

    39399>> 

>>
	
Hamilton Sorringfoot - Tue, 02 Mar 2021 23:21:55 EST RTMuLrHX No.39397 Reply
>>39388
OP, have you read Sussmans reading list? There is a probability book he heavily shills by E.T Jaynes, Probability Theory The Logic of Science. Thoughts on it? since you seem to be covering probablity.

I do believe Sussmans idea of flexible machines and programs is going to ultimately shift the paradigm forward, maybe not solve AGI, but get us much closer than NN wankery.

    39403>> 

>>
	
Vandar Lothbrok - Thu, 04 Mar 2021 01:44:47 EST UtjCv9TQ No.39398 Reply
>>39388
OP, just want to remind you to upload the calculus workshop on your website, incase you forgot. I was looking forward to it.

    39403>> 

>>
	
Wesley Curryshaw - Thu, 04 Mar 2021 15:18:21 EST X0T5kdj/ No.39399 Reply
>>39395
I'm not OP but here is what I recommend, I'm following a similar philosophy to OP's: build projects, do problems and try to fill the gaps using whatever resource you want.

    > Data structures

Read the data structures part of this https://cses.fi/book/index.php and do some competitive programming problems, I recommend the starred problems of the chapter 2 of Competitive programming 3 (or 4), you can find the problems on uhunt https://uhunt.onlinejudge.org/.

By this point you should already know how to use data structures and why they are useful, so it's time to implement them.
There's no good books/resources on data structures, because universities also use that course to teach their OOP bullshit.
In my opinion it's better to learn how to implement them using C, that way you understand what it's going on under the hood, it also makes you realize why OOP is actually usefull on some cases instead of just putting everything inside a class.
The only decent book that I've found that teaches data structures using C is: Advanced Topics in Core Concepts in Data Structures.

    > Operating systems

I recommend Operating Systems: Three Easy Pieces https://pages.cs.wisc.edu/~remzi/OSTEP/ , but make sure that you do all the homeworks, systems labs, and xv6 labs.
You can use whatever book/resource as a reference.
You should do the systems labs before the xv6 labs, and you may also want to read the chapters 9 to 12 of CSAPP while doing the systems labs, bc there is some overlap between the systems labs of OSTEP and CSAPP.
>>
	
George Pallymen - Fri, 05 Mar 2021 09:42:52 EST zjbn0uZi No.39400 Reply
OP any advice on how to work with that Putnam book? Like what is your "algorithm" to work with these exercises? Is it just spend some X hours trying to wrestle with it yourself if that fails then spend some Y hours trying to maybe solve it by researching concepts (and learning them along the way) and then if that fails just look up the answer in the solutions of the book?

    39404>> 

>>
	
Priscilla Bunbury - Fri, 05 Mar 2021 20:55:51 EST x6K3CZQk No.39402 Reply
>>39391
You never forget because you can always derive whatever you forgot
We will see this when we do the Putnam book just I got sidetracked with other things like trying Andreescu's linear algebra book to go w/Wildberger lectures
You will see some expression, then wonder 'this is probably equal to some other expression' and then playing around with it, you discover yes indeed it is. A lot of practice manipulating things back and forth, and most importantly figuring this out yourself instead of reading about it, you will always remember. Poh-Shen Loh has numerous talks about this I haven't posted yet.

Something about math I should shill more is it's not about the math, it's about 'this is what you can do with a properly abstract model' meaning, how abstract can you get and prove it all still functions properly. This is how you come up with ideas too you study math, see the often mind blowing abstraction happening (group theory, e * thing = thing.. but e is not 1 is more abstract you're not even in the realm of numbers at this point). Really this is all I want to get across to anons, forget the details it's the big picture of somebody was able to model this natural/artificial phenomena and then from their model derive ways to automate it completely and prove the automatic expressions are all correct. They were able to derive space ships and economics and everything else from the exact same model. That to me is interesting and floods you with ideas what you want to make not any kind of recipe book or w/e. Btw I'm including all of this in the math meme curriculum where the Wildberger lectures are (and in the eventual calculus workshop thing for other people) you too will see how this works then your view will totally change about math, at least it did for me.

>>39392
Yes, one of the reasons I slow walk that workshop hoping it will be done but CS1730 they still use PLAI version 2 and version 1 book together, the only difference is the mystery languages which you can do yourself in racket and read his paper's about it, he asked not to post any solutions because they are very hard to make kind of like how they came up with the subtle unstable matcher testers in the I think oracle assignment, using Alloy to satisfy X but not Y. I regularly email 'all the profs we know about' which I don't want to name but you can guess, any prof on functionalcs or learnai I've talked to, I am able to do this by stepping to them as a researcher wannabe that has already done the intro material and probing for more. I don't tell any of them what I'm doing because of legal reasons, I'm sure they don't want these courses online or even hints, or recorded lectures. To answer your question it will be a mix of PLAI 1 and PLAI 2, plus the mystery languages but all done in Pyret but it really doesn't matter, you can do it in Racket too if you want it's the same 'paradigm' meaning cases on lists, pattern matching, map/filter/fold etc.

Nobody will believe me but if you do that functional datastructures 'flanarie' course by prof K protege Prahabar Ragde (spelling, forgot his name, we'll do the notes anyway) you can do every single one of those ICPC kattis practice problems from past world finals. I also want to do C++ anyway so will include it: https://ucsd-cse100-s20.github.io/ somebody asked about datastructures, there you go.

>>39394
yes I know about that book, and also Problem solving by Larson which I got from the MIT Putnam seminar https://yufeizhao.com/a34/
Something I figured out by reading Prof K papers and others he cites, the entire undergrad curriculum just teaches you Polya's 'How to Solve it'. yes, the entire undergrad. All those courses you take that seem like a specific course trying to teach you chem engineering or whatever is just teaching you Polya's how to solve it with a chem engineering abstraction. PAPL is Polya's book almost exactly every chapter if you compare them what you're doing. This is what Poh-Shen Loh and Don Knuth was trying to tell us the whole time, it's not the specifics you should get hung up on, it's the strategy of 'problem solving' which can be transfered knowledge to absolutely every field including law/engineering/everything.

    39410>> 

>>
	
Priscilla Bunbury - Fri, 05 Mar 2021 21:40:19 EST x6K3CZQk No.39403 Reply
>>39397
No but I've read most of his books, I've done his symbolic course too which is his new book and it will be good. Modelling everything like a biological system that can adapt to things not expected by the 'designer'.

The AI workshop I'm changing drastically to do the depth first learning papers in the beginning the the lectures in the end because I realized how fast the lectures jump to expected probability and other technical shit we haven't done, the depth first curriculum that I've done so far you figure it out on your own then those lectures are easy. I also feel the lectures for 10-601 etc are too easy, meaning they don't really explain what is actually going on like 10-701 does. Then at the same time I feel the Sussman view of AI is likely correct, just writing stats algorithms is not 'intelligence'.

I also experimented with his advanced symbolic computation course playing around with guix system. If anybody here has made it to say the 3rd lecture in CS19, you can now build and run your own massively abstract server farm using guix because it's the same kind of 'paradigm' just lists putting together your whole server. If it works for scientific researchers in europe it will work for us to deploy a million bots all identical to each other (as in cs19 identical definition) all controlled in emacs.

Some anon asked about operating systems and I'd like to slipstream MMIX/TAOCP into the meme curriculum when we (finally) do competitive programming because it's not like any OS course you've ever taken Knuth clearly explains the operations and then you go about manipulating this imaginary architecture like it exists. It truly is the best book for understanding hardware though everyone will disagree but we'll see.

>>39398
The idea in the meme math workshop was just to finish Tao's book as we do the putnam calculus problems.
However I routinely run into ppl IRL who never understood calculus who are in engineering type fields like say, land surveying where you are calculuating 'azimuths' or bearings and also need to know basic calculus. I also would like to know applied math in order to do anything like build a house from scratch and I'm sure other anon's would too. So that is how I will approach the not-meme calculus workshop where it's real applied math meaning the framework that applies to everything in the concrete world.

The calculus workshop and everything else is designed so anons have the fewest lectures to watch, the most brief yet specific reading material. In my opinion if I present anons with 'take this course' they just won't do the course, because I never did either, so I will attempt to condense as much as possible that is possible we still have to watch some lectures.

This guy http://alpha.math.uga.edu/~pete/ has excellent notes for honors calculus http://alpha.math.uga.edu/~pete/expositions2012.html and many other fields I will slipstream in. it's meant to be done along side Spivak's calculus if you're interested, anyway I want to do it so we can know the lebesque (spelling) version of integration and can do probability and silly measure theory, which Wildberger would absolutely rage about being imprecise and wishful thinking but nevertheless we have to do it because we live at point X in history and right now this is how you do applied calculus and probability.

I wanted to do the rational calculus by Wildberger but it's actually very advanced, so is his linear algebra course. Anon's may not realize what Wildberger is really teaching in his linalg playlist, it's 'real' linear algebra meaning the overall crazy abstraction to help you learn multiple fields and dimensions. His calculus course is like this too, it's not just what it appears he is teaching you the really advanced intuition that goes with that kind of math of a model that can be abstracted to literally anything. Esp his linalg course, that affine plane simple vector geometry is what you end up doing in very advanced books reasoning about a thing that can bisect other thing, then project to new thing. Poh-Shen Loh if anybody watched his teacher seminar on linear algebra he talks about this how he failed his first university linear algebra course and had to take it twice because he had the highschoo lintuition of manipulating a matrix and these are all 'numbers' but they really aren't. It's just the first level of abstraction to something even more crazy and Wildberger somehow can teach this by removing all the complexity to rational numbers, like his hyperbolic geometry course. I still routinely model things in hyperbolic 'universal geometry' and it has not failed me. Wildberger is some kind of time travelling prophet from another dimension who specializes in explaining the most extreme hard math into basic highschool math.

    39406>> 39409>> 39414>> 

>>
	
Priscilla Bunbury - Fri, 05 Mar 2021 22:23:39 EST x6K3CZQk No.39404 Reply
1615001019795.jpg -(7378B / 7.21KB, 179x281) Thumbnail displayed, click image for full size.
>>39400
We will see shortly because I'm writing it now.
Really you just try and figure it out yourself, for as long as possible, meaning you honestry tried to research the problem. Then you look at the solution and it is meaningful because you thought about it and you get that 'aha, that's how you solve it'. Repeat a few hundred times and that is the Putnam/Olympiad style math problems. Eventually you develop a strategy to solve them. The book plus Poh-Shen Loh will teach us this strategy but there is no 'right' answer there is a dozen different answers. That's what I got from doing this material anyway.

The meme curriculum is also an infiltration curriculum, I'd like to apply to Amazon and all these companies solely using CS19 or say the Putnam book as by background and see what happens, how the interviews go. Amazon will literally hire anybody these days. Not that we want to help Amazon usurp the globe but you can learn a lot there about sytems which is what.... jane street desires. Again not that we want to know a lot about wallstreet and covet money but it would be also interesting to work there too and bleed them for information just like we bleed Amazon. I will try this and see how it goes, I will always just submit a resume that has cs19 info on it and no other background to recruiters to see what happens. I already have a job but I like having a fake job, where you just don't care what happens and mainpulate your way internally in other words it becomes your research/game. I would like to game hiring which was the original meme workshop idea, like just show up to a meetings not giving a fuck, and solely working to advance yourself within company A as a literal hobby while you work some other job. Anyway my background is essentially this kind of behavior sort of like a journalist but more of a clown filled boat of hijinx. This is stage 2 of the meme workshop, stage 1 is going through all the present material and trying it out on people I know IRL and seeing the results, I will eventually rewrite most of stage 1 into intuitive videos plus the material to make it as short as possible, no 1hr long lectures. Then stage 2 is me manipulating bigtech using only material from stage 1, to see if it's possible. I have no desire to work at Amazon but I'd love to infiltrate like the old days and see what goes on there, game their stupid efficiency targets. Move around departments, I want my hobby to be sitting in a meeting sometime not knowing what the fuck is going on and just manipulating my way into a new department to see if it's possible for other anons. 100% Kevin Mitnic book type things I've already used dozens of times.

Then upgrade my manipulation, now that I have memeMerica citizenship go into various so-called 'impossible' jobs like Jump or jane street and see what goes on there. Manipulate there too of course only using the cs19 -> Amazon background none of my 'oh btw I write this online tutorial and I worked at X in Hong Kong and have these 2 profs shilling for me in letters' it will be a blind hire, just like you guys. Let's infiltrate everything and see what happens surely we can game their shittty corporate hiring algorithm. The grand goal is an Elon Musk type corp, I'd like to get into one of his obscure startups as well (btw, I have multiple jobs, I still do a working class job to avoid the global lockdown while on the phone in meetings for another job I don't care about for purely infiltration purposes) , So this is the 'denouement' of the meme curriculum I would like to infiltrate all of bigtech and find out what goes on there as a hobby, and how to internally manipulate the system because I'm kind of good at doing that and have been doing it since the late 1990s.

Other anons should try this too, the competitive programming we eventually do will make these interviews trivial to pass and we are kind of lucky there is no standardization for these things we can just wing it with no degree. Everything else requires piles of official credentials we have no hope at doing but this, we can do we currently live in a time where you can 'prove' yourself instead of doing some credentialed linear destiny only a few can achieve because they had a pefect life up to state X, most of us failed up to state X for various reasons like myself but I think it's completely possible to overtake X and become Y.

    39405>> 

>>
	
Priscilla Bunbury - Fri, 05 Mar 2021 23:34:34 EST x6K3CZQk No.39405 Reply
>>39404
Badly written post on a phone, the absolute state of phoneposting

Since this is an AI workshop this is a good talk https://youtu.be/GEaCuk1EhH4 specifically the comment by Sussman about symbosis, man and machine.
Elon Musk's meme AI startup is trying to do exactly this instead of trying to make a program intelligent, think about shrinking the bandwidth from your brain to all these external systems so you can mainpualte them on that level of bandwidth, the better the bandwidth reduction the more a single thought can control something because why not, it's still just data bouncing around in a dynamical system, find the best way to translate this system to the external one like an API.

The talk was posted by an MIT prof I shilled a few times who will teach you computational biology, meaning we are in the biotech revolution now and computational manipulation of bio systems is the real future. https://www.youtube.com/c/ManolisKellis1/playlists

That same prof is of course heavily blackPR'd against because he holds so-called radical views on biology, which is apparently a thing, just like Wildberger holds radical views on math. But he will teach you bio machine learning with genetics and opened up all his other courses at MIT so his youtube channel is an endless resource of information that is normally impossible for random anons. This is what the meme AI course will now do because why not, it's accessible to us.

    39407>> 39413>> 39416>> 

>>
	
Caroline Brallynudge - Sat, 06 Mar 2021 00:20:57 EST 2mMvMi74 No.39406 Reply
>>39403
OP, don't you think Apostol would be a good choice for the workshop? It covers everything - proof techniques, rigorous development of calculus, differential equations, linear algebra, probability. And it is definitely better than Stewart's garbage calculus books. Once Apostol is finished we can go deeper into whatever topic we want using more rigorous books.

    39411>> 39421>> 

>>
	
Devin Menace - Sat, 06 Mar 2021 00:45:20 EST UtjCv9TQ No.39407 Reply
>>39405
you mentioned you have read most of the books on sussman reading list. Which ones? and do you think the physics books he mentioned on that list is really suitable for people with no experience at all? i looked through the list, and some (most) of all the books on that list that he says are for highschoolers are actually textbooks for the advanced topics in physics. and it seems like you are interested/involved in a lot of science subjects besides cs (biology, physics, computer science) are you a genius or something? or just have a lot of free time, you have probably read more books this year, than i have read in myy lifetime. what is your iq?

    39421>> 

>>
	
Molly Clayford - Sat, 06 Mar 2021 08:47:29 EST Q5Bf+lNN No.39408 Reply

    > https://ucsd-cse100-s20.github.io/
    > https://cses.fi/book/index.php

Nice links, thanks. Been meaning to pick up C++. I started doing kattis almost 2 months ago, but have been using c# since i had to learn it for my current course anyways. It's pretty fun using map/filter/fold tricks i learned from PAPL when using c#.
Also, the gamification of kattis works suprisingly well, I can usually never be bothered to do exercsises in programming textbooks, but with kattis i do a minimum of one problem every single night.
>>
	
Charles Blellerworth - Sat, 06 Mar 2021 11:34:47 EST zvsCr5Bq No.39409 Reply
>>39403
Op, why don't you ever talk about courses from Berkeley? They are mkre open than CMU. And Berkeley's math dept is quite famous.
>>
	
Caroline Brallynudge - Sat, 06 Mar 2021 13:01:26 EST 2mMvMi74 No.39410 Reply
>>39402
OP, so basically what you are saying is that if we do CS19 and Putnam seminar we will begin to learn what real problem solving is all about? Then we do more problem solving, the book doesn't matter. The skills we learn from that can be used to pick up any subject. But before starting Putnam we need basics of proof from Tao. No need for Apostol, Stewart or Infinte Descent?
>>
	
Clara Hanningson - Sat, 06 Mar 2021 18:54:33 EST fXQjFEc7 No.39411 Reply
>>39406
He mentioned several times that hes trying to avoid that. People can't sit through massive tomes like Apostol and just slog through, you have to do it differently/

    39412>> 

>>
	
Ernest Chezzledark - Sat, 06 Mar 2021 23:35:26 EST 2mMvMi74 No.39412 Reply
>>39411
OP is a human being and part of people. He did it.
>>
	
Priscilla Blondlenene - Mon, 08 Mar 2021 09:29:37 EST 2mMvMi74 No.39413 Reply
>>39405
OP, have you ever reached out to John Mackey of 151 for recorded lectures? Fall 2020 was online.

    39422>> 

>>
	
Thomas Dammerpig - Wed, 10 Mar 2021 09:11:41 EST zs5s8lza No.39414 Reply
1615385501798.png -(60767B / 59.34KB, 885x385) Thumbnail displayed, click image for full size.
>>39403
Op, the linear algebra course of wild berger isn't complete(pic related). I read it in a comment by him on the last video in the playlist.
(https://www.youtube.com/watch?v=QDIcznHyWTo&list=PL01A21B9E302D50C1&index=44)

Do you think it's still ok to go through it completely? Do you think it covers most of the stuff in usually taught in a standard course/book? If not, do you think it's better to just hit a standard book like strang's?

    39422>> 

>>
	
Archie Goodman - Thu, 11 Mar 2021 22:21:02 EST 2mMvMi74 No.39415 Reply
OP, did you finish both volumes of Tao's books? Before moving on to Putnam should we finish the 2 volumes?

    39422>> 

>>
	
Henry Flavell - Fri, 12 Mar 2021 01:56:19 EST UtjCv9TQ No.39416 Reply
>>39405
Did you do every course in the functionalcs Curriculum? If so impressive.

    39417>> 

>>
	
Archie Goodman - Fri, 12 Mar 2021 03:19:49 EST 2mMvMi74 No.39417 Reply
>>39416
Not OP, but yes. He said so in a previous post. I just want to know how did he manage to do so in such a short time and work in a research lab and produce meaningful publications. He also exercised regularly. Just how? Whenever I plan my day I get so overwhelmed and everything falls apart.

    39420>> 39424>> 

>>
	
Rossie O Donald - Fri, 12 Mar 2021 13:29:24 EST UtjCv9TQ No.39420 Reply
>>39417
Yeah. each time i start i end up stopiing and starting over again.
>>
	
Polly Turveyridge - Fri, 12 Mar 2021 21:15:47 EST x6K3CZQk No.39421 Reply
>>39406
I think if you have the motivation, you can make any book into your own curriculum for example you can't just work through Apostol by yourself, I had to constantly look up his proofs elsewhere in other books (Like Tao's books) but then I picked up his style eventually. I cannot teach his style, you have to do it yourself and if I present 'hey do these 2 books that are 600+ pages where it takes you over a week for a single page in some parts' nobody will do it. These kinds of books already exist, they are called the Art of Computer Programming and famously nobody does them because they seem like too much work but they're definitely worth doing. For example I rewrote 15-213 using just Knuth's MMIX book, it's 1/4 the size but so highly abstract you kind of need a solid background in manipulating inequalities and other olympiad type math (which we are doing) but imagine takign 15-213 but you finish in a week with the same knowledge, that's my goal.

I also dislike big lecture series, ie: 35+ hours of lectures that need watching. I want access to them in case I don't understand something but like everybody else I have a hard time finding the motivation to finish them. So on one hand I want them to exist so I can quickly look up something and get the intuition of what is going on but I don't want to be forced to watch them. All of this is considered when putting together the ultimate meme compsci curriculum because I am the same as everybody else, we don't have the time or incentive to sit through them. Major exceptions: CS19, the bulk of the lectures are working on something he asks students (or you, while watching) to do so really there isn't a lot of long content. Things like Ryan O'Donnell's theoretical CS series and other grad seminar content like some crazy Robert Harper talk about heyting arithmetic which normally would be a boring subject I find really good but undergrad lectures are painful to sit through for the most part that's why I don't force them on anons.

>>39407
I don't think IQ matters. My first day of kindergarten they tested me and claimed I had a 'grade 12 reading level' so they pulled me and put me in a school for child prodigy's which I promptly failed out of due to acting like an idiot and not doing the work, and people who had 'normal IQ' compared to me ended up as lawyers and doctors that I grew up with so I've come to believe that it's just the ability to work at something you want to do and care about enough to put the time in. On top of that I led a very stupid early adult life, resulting in me almost extinguishing my own life staring down a conspiracy and criminal hacking sentence for min 25 years (foreign prisoners are never released early) I magically skated on through pure luck and shaming my entire family through being a total and utter failiure. You don't want to end up like this, and don't need to, what you need is interesting yet not totally the university curriculum because much of it we have no motivation to finish being we don't have skin in the game, we aren't paying tuition, we aren't being threatened with expulsion if we fail. We are different students so traditional university curriculum won't work with us but at the same time, we need to know what they know so yes, in the beginning I did try the entire curriculum myself in a David goggins type moment where I forced myself to take a lot of things, but I don't recommend anybody else do this.
Btw it's all very similar after awhile, once you reach some kind of 'math maturity' meaning you can effortlessly move around abstractions and kind of get what's going on you too can finish all those courses in fact many of them are review, so you throw out 50% of the course/book and the meat ends up being a few lectures or a single chapter for many of the topics there.

I also only dabbled in many courses, meaning I did them but not on the level I now do courses, so I forgot many of the things I learned whereas now I never forget anything. Those CS19 exercises, I'm amazed how good they are still. If you slog through them you will never, ever have any problems understanding some binary tree abstraction or graph every again. The other day when I finally redid Updater assignment I realized the whole point of that assignment was to just understand the structure of node(value, [list]) ... until the day you die. The graph assignments are like this too, and map/reduce, etc. That Oracle assignment where you now know you can build an entire program to test another, no intro course teaches this anywhere.

Remember anon it's just a few hours a day, over a few years, that's all you need to do to finish functionacs yourself all the hard work is in the beginning trying to figure out what the fuck math is, once you get that it's skiing downhill
>>
	
Polly Turveyridge - Fri, 12 Mar 2021 21:30:01 EST x6K3CZQk No.39422 Reply
>>39413
Yes and universities don't want to release anything for fear of some student taking themselves then crushing the course, which I never understood until recently that the whole point of a good school is to challenge you and if you already know all the answers then you will be like a virus spreading to the other students and now you have a credential mill. This is why 15-251 changes so much, every year apparently the proofs are harder/different and same with Mackey's class

btw I have access to the lectures, and that's why I shilled Tao's book because the first couple of chapters teach roughly the same thing but for a self-learner. I also don't think we need 27-128/15-151 all of that is contained in Andreescu books, or the Hungarian Problem Books, or the latest book I just uploaded for anons to library genesis I will shill in a few posts.

Now that Poh-Shen Loh opened up CMU's Discrete Math course we def don't need it, btw has anybody tried some more lectures? He goes deep into linear algebra as usual with his very, very dense lectures suggesting dozens of problem solving solutions while doing a single problem, seems like every comment he has is some kind of gem that lights up any dark areas you had on a previous subject.

>>39414
I am changing that part to include Wildberger/Poh-Shen Loh lectures, and Andreescu's linear algebra olympiad book which I've been doing all last week. The calculus curriculum also does this: https://github.com/mitmath/1806/blob/master/summaries.md

>>39415
The idea is to finish both Tao's books by doing the putnam book, you have to look in his book and do some exercises to figure out some of the putnam problems and some are so advanced we'll have to dig around Tao's measure theory book or even Wildberger's Lie theory material

    39423>> 

>>
	
Martin Dressleham - Fri, 12 Mar 2021 21:52:22 EST 2mMvMi74 No.39423 Reply
>>39422
You say you have access to 15-151 lectures. Can you create a torrent and share the lectures with us at least? Maybe for some 151 will be more suiting than Tao?

    39425>> 

>>
	
Polly Turveyridge - Fri, 12 Mar 2021 21:57:44 EST x6K3CZQk No.39424 Reply
>>39417
Exercise back then I learned from prison https://youtu.be/WLmDkcb6JQE and recently I completely slacked, so I may make a weight loss thing just for lels as most are trash with exception of Matt Might compsci prof: http://matt.might.net/articles/least-resistance-weight-loss/ btw he has the original curriculum meme list, I can't find it right now but he recommends an insane amount of books that everybody balks at. Anyway prison like the military just programms you to get up and work out for the 'war'. It's pure conditioning, when you get out this stays with you for a long time because you get an unfiltered view of human nature and realize, shit I better be ready. This is also why I sometimes shill ancient greek and latin books, which I think somebody else would be better to make a curriculum for, because that too is unfiltered and uncensored human nature that has not changed and never will.

Second the functionalcs list I started and stopped/failed dozens and dozens of times. I think 5 years of false starts where I took a book, gave up after the 3rd or 4th chapter, revisited it 2 months later but had forgotten everything and needed to go back to scratch. Functionalcs is also not something you should do sequentially or anything it's just a recommendation of things filled with theory I found better than the usual sources because I had a thirst for theory and it was hard to find. It's easy to find a million books on whatever, but if you want the theory behind it they are few.

The lab I worked at anybody else can get into because (back then) regular students never applied there, they all went off to chase a highly paid internship at whatever bigtech company in the area. However with the global plague maybe these lab positions are much harder to get. I also maneouvered myself internally while there, I was originally hired just to do simple tech work and then proceeded to ask all the post-doc's what I should be reading and did the reading, built the algorithms in my spare time, then ended up integrated with the rest of them and by pure benevolence ended up with credits on the papers they released as they could have easily just cut me out though I did use a specific technique from CMU's parallel algorithms course to solve a problem they could not solve and essentially saved their grant funding. It's a long story but they needed to have progress to point B by time C, and weren't there, I arrived and got them to B to ensure more funding and then got the credits. From there I was passed around like a cheap whore to many other research grants because once you get that single letter of recommendation you're good to go, nobody even looks at your resume just these letters by other professors.

tl;dr I started and failed dozens of times, which is why the meme curriculum 2.0 is being gamified more and more, to take the same linear courses/books and translate them into a daily challenge type thing because you won't forget it if you try and figure it out, and you will learn much faster. I want the entire thing to eventually just be get up, look at problem, spend all day trying to solve it in the back of your mind, look at solution when you get home or wake up the next day, repeat. Do this 365 times in a single year and you will see the benfits compared to all the false starts we've all done having to go back and redo everything because you forgot.
>>
	
Polly Turveyridge - Fri, 12 Mar 2021 22:11:59 EST x6K3CZQk No.39425 Reply
>>39423
tbh Tao and going on library genesis and searching for 'xyz press' and getting Andreescu's books are much better but sure I'll try and get them again. They lockout lectures now after the semester which completely sucks. I also find Poh-Shen Loh's new lectures from CMU's discrete math course covers 99% of that same 15-151/27-128 course but even better, and they are open on youtube.

Andreescu and other olympiad type books (hungarian problem books) or 'challenging problems in algebra' all these have full solutions and are much faster than trying to figure out 15-151. I also don't have access to the recitations of 15-151 where most of the 'what is really going on' material is but anyway when the next semester starts I'll try and get them. tl'dr I have full access to cmu and all their courses, and princeton, and harvard, and MIT. I simply paid for any course that got me andrew access and thus school email sign-in, kazaam you're in.

    39427>> 39430>> 

>>
	
Polly Turveyridge - Fri, 12 Mar 2021 22:32:06 EST x6K3CZQk No.39426 Reply
>>39023 (OP)
meme curriculum update:
I've been uploading a bunch of books to library genesis, here's one for anons I got: https://libgen.is/book/index.php?md5=B45D7552DC5CDC4E1EC1A323039B9AF9
brand new not even released yet, we will slipstream it into the meme math curriculum it's a very difficult Djiboutin olympiad book to teach you highschool math the rigorous way by proving that 'the gap between university math and highschool math does not exist'. Keep in mind this is how Djiboutins learn math, we are so fucked if this is true so far it's a very good yet difficult book.

I did some of Andreescu's Linear Algebra book I wanted to go back and combine with wildberger lectures, it's on library genesis if you search. Very, very good goes well with Wildbeger's abstract and complexity free linear algebra videos. Reminder Wildberger is not really teaching you intro linear algebra though it appears that way, it's generalized linear algebra so you can go into much more abstract fields/spaces later. Andreescu's book is the perfect combination and just like his Putnam book in similar style where challenging problems, and fully worked solutions.

ai.html I decided it would be better to work through depth first learning and use the lectures because again, I don't want to recommend anons a bunch of lectures they will never finish. Reminder I am you, I also can't just sit there and linearly do a huge course with a few exception like grad seminars above our ability and CS19 because they really aren't that long of lectures, maybe 20mins of content and the rest the class is working on something.

I took a few weeks off to begin again in April the new meme curriculum, also the learnaifromscratch.github.io/calculus.html will exist soon it's primarily a math modelling book, the new version of 18.06 and the book 'challenging problems in algebra' it's made for people who aren't us and actually need to work using calculus like say, land surveyors. I thought about speed running Gilbert Strang's old calc book which you could do in a single week but applied stuff like least squares (Calc III) model fitting I'd rather just do a single course, and it's a pretty good one all of calc I, II and III in one book but 1/4 the size of most. Reminder this is for regular people going into biology or trades that need calculus, whereas we will learn it through math competition books in the other workshop. Anyway, I enjoy programming calculus and casting real life things into math models to be manipulated which is what that workshop does.

I also like that Kirtaner has a twitch broadcast, and eventually the meme curriculum will be a sequence of short videos showing how equations take different forms, but not in a cringe 3blue way, though I love that guy and his content it's still too much cringe. I have an old "anonymous" story too, remember the slogan 'we don't forgive, or forget' I will tell you anons where that originally came from which was a 4 chin video chat channel very famous yet can't be typed here because of the name (you know what it is) and at the time some anon was playing a deep space 9 episode at 2 in the morning. Some klingon guy gets on and shouts into the camera 'AND FOR THIS.. WE NEVER FORGET, OR FORGIVE' and from this it got spammed in numerous raids, ended up in the promos posted 'join us this weekend to invade this game, we never forgive, or forget' and history was born. Insert now you know rainbow thing. I have some good sabu stories too which I prob shouldn't share here considering how he ended up a fed (tip they're all feds) but yeah anyway.

next shitpost I will talk about emailing profs and bleeding them for info, but the meme curriculum returns diffierent, all challenge/game based, I want a game you just gain levels and at the end you have an undergrad degree. I got this idea from robert harper actually and daniel bernstein which is another post.

    39431>> 39433>> 

>>
	
Rossie O Donald - Fri, 12 Mar 2021 23:52:57 EST UtjCv9TQ No.39427 Reply
>>39425
OP, can you turn some of them into torrents? i want to get the curriculum for mathematics or physics degree, from one of those colleges, and do the courses one by one like i was actually studying for a degree, when in reality i am just self studying as a neet.
>>
	
Martin Dressleham - Sat, 13 Mar 2021 00:18:25 EST 2mMvMi74 No.39428 Reply
How do you buy individual courses from CMU? If you buy their OLI courses do they give you access to internal regular courses?
>>
	
Martin Dressleham - Sat, 13 Mar 2021 02:01:53 EST 2mMvMi74 No.39430 Reply
>>39425
If you have access to MIT courses, this term 6.009 is fully online. You may grab the entire course. Maybe CS51 of Harvard. And the dreaded Math 55 of Harvard. The ML class 6.036 of MIT. You can archive them all. And torrent them.

And how long till you update the entire CS19 sequence in the sequential pattern you did for the first half?

    39431>> 

>>
	
Leo Dostoevsky - Sat, 13 Mar 2021 02:18:21 EST UtjCv9TQ No.39431 Reply
>>39430
>>39426
Second this!! i heard it is the hardest math class in harvard, so OP if you can pls make a torrent of math 55, the whole course, including the lectures, notes, homework, labs?, recitations?, etc. and it might also be something you might be interested in.
>>
	
Henry Brovingkene - Sat, 13 Mar 2021 12:08:01 EST ZKgfXGdm No.39433 Reply
>>39426
Hey OP do you have any plans of doing a Learn Blockchain from Scratch version? Or some resources to get leet in the field? geohot's last streams have been about that subject and it looks like we're in the mid of a crypto bullrun again. It might turn out to be a huge in-demand field to get into in a few years
>>
	
Thomas Shittingham - Sat, 13 Mar 2021 23:30:00 EST Rlbvn3Fc No.39434 Reply
Thoughts on https://github.com/ossu/computer-science vs functionalcs for someone with no background?

    39435>> 

>>
	
Reuben Fasslewill - Sun, 14 Mar 2021 08:29:57 EST fXQjFEc7 No.39435 Reply
>>39434
This question is already answered if you think about the name of the cirriculum. Funtionalcs >>>>>>>>> the OSSU cirriculum if you have the dedication to go through with it. It ls far less hand holdey though.
	
	
